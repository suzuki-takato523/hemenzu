var t=Object.defineProperty,e=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,i=Math.pow,n=(e,s,o)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[s]=o,a=(t,i)=>{for(var a in i||(i={}))s.call(i,a)&&n(t,a,i[a]);if(e)for(var a of e(i))o.call(i,a)&&n(t,a,i[a]);return t},r=(t,e,s)=>new Promise((o,i)=>{var n=t=>{try{r(s.next(t))}catch(e){i(e)}},a=t=>{try{r(s.throw(t))}catch(e){i(e)}},r=t=>t.done?o(t.value):Promise.resolve(t.value).then(n,a);r((s=s.apply(t,e)).next())});import{_ as l}from"./pdf-lib-COQB5Ng-.js";!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver(t=>{for(const s of t)if("childList"===s.type)for(const t of s.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)}).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();const h=50;class c{removeAllEventListeners(){console.error("イベントハンドラーを削除中..."),this.canvas.removeEventListener("mousedown",this.mouseDownHandler),this.canvas.removeEventListener("mousemove",this.mouseMoveHandler),this.canvas.removeEventListener("mouseup",this.mouseUpHandler),this.canvas.removeEventListener("mouseleave",this.mouseLeaveHandler),this.canvas.removeEventListener("wheel",this.wheelHandler),this.canvas.removeEventListener("touchstart",this.touchStartHandler),this.canvas.removeEventListener("touchmove",this.touchMoveHandler),this.canvas.removeEventListener("touchend",this.touchEndHandler),this.canvas.removeEventListener("touchcancel",this.touchCancelHandler),document.removeEventListener("keydown",this.keyDownHandler),document.removeEventListener("keyup",this.keyUpHandler),this.canvas.removeEventListener("contextmenu",this.contextMenuHandler),console.error("イベントハンドラー削除完了")}constructor(t){this.canvas=document.querySelector(t),this.ctx=this.canvas.getContext("2d",{willReadFrequently:!0}),this.isDrawing=!1,this.currentPath=[],this.allPaths=[],this.redoStack=[],this.segmentHistory=[],this.segmentRedoStack=[],this.eraserHistory=[],this.eraserRedoStack=[],this.lastOperationType=null,this.strokeWidth=2,this.penWidth=2,this.eraserSize=30,this.strokeColor=this.getDefaultStrokeColor(),this.currentTool="pen",this.lineStyle="solid",this.doorType="smallbox",this.doorWidth=75,this.eraserOperationActive=!1,this.eraserOperationChanges=[],this.eraserClickProcessed=!1,this.isEraserPressed=!1,this.gridSize=160,this.stairSteps=10,this.stairWidth=1*this.gridSize,console.log(`初期化: gridSize=${this.gridSize}px, 初期stairWidth=${this.stairWidth}px`),this.startPoint=null,this.previewEndPoint=null,this.showShapePreview=!1,this.eventListeners={},this.snapToGrid=!0,this.isShiftPressed=!1,this.textInput=null,this.fontSize=48,this.selectedTextBox=null,this.isResizing=!1,this.resizeHandle=null,this.handleSize=8,this.isDraggingTextBox=!1,this.dragOffset={x:0,y:0},this.lastClickTime=0,this.showEraserPreview=!1,this.eraserPreviewCoords=null,this.isRedrawing=!1,this.redrawRequested=!1,this.lastRedrawTime=0,this.redrawThrottleMs=8,this.mouseMoveThrottleMs=4,this.lastMouseMoveTime=0,this.touchPreviewTimer=null,this.isShowingTouchPreview=!1,this.isMultiTouch=!1,this.multiTouchCooldown=!1,this.lastMultiTouchTime=0,this.scale=1,this.minScale=.1,this.maxScale=5,this.translateX=0,this.translateY=0,this.lastPinchDistance=0,this.isPinching=!1,this.pinchCenter={x:0,y:0},this.lastPanPoint=null,this.initCanvas(),this.setupEventListeners()}initCanvas(){this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.strokeStyle=this.strokeColor,this.ctx.fillStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth,this.ctx.imageSmoothingEnabled=!1,this.setupHighDPI(),this.updateCursor(),this.redrawCanvas()}setupHighDPI(){const t=window.devicePixelRatio||1,e=this.canvas.getBoundingClientRect();this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height),this.canvas.width=e.width*t,this.canvas.height=e.height*t,this.ctx=this.canvas.getContext("2d",{willReadFrequently:!0}),this.ctx.scale(t,t),0===this.translateX&&0===this.translateY&&(this.translateX=this.canvas.width/2,this.translateY=this.canvas.height/2),this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.strokeStyle=this.strokeColor,this.ctx.fillStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth,this.canvas.style.width=e.width+"px",this.canvas.style.height=e.height+"px",this.redrawCanvas()}setupEventListeners(){this.canvas.addEventListener("mousedown",t=>{this.startDrawing(t)}),this.canvas.addEventListener("mousemove",t=>{if("text-horizontal"===this.currentTool||"text-vertical"===this.currentTool)return this.updateCursorForPosition(t),void this.draw(t);this.isDrawing||this.isDraggingTextBox||this.isResizing||this.updateCursorForPosition(t),"eraser"===this.currentTool?this.updateEraserPreview(t):this.showEraserPreview=!1,this.draw(t)}),this.canvas.addEventListener("mouseup",t=>{"eraser"===this.currentTool&&this.isEraserPressed&&this.stopEraserOperation(),this.stopDrawing(t)}),this.canvas.addEventListener("mousedown",t=>{"eraser"===this.currentTool&&this.startEraserOperation(t)}),this.canvas.addEventListener("mouseleave",()=>{this.showEraserPreview=!1,this.redrawCanvas()}),this.canvas.addEventListener("wheel",t=>{t.preventDefault();const e=this.canvas.getBoundingClientRect(),s=t.clientX-e.left,o=t.clientY-e.top,i=t.deltaY<0?1:-1,n=Math.exp(.1*i);this.zoomAt(s,o,n)}),this.canvas.addEventListener("touchstart",t=>{t.preventDefault(),2===t.touches.length?(this.isPinching=!0,this.isMultiTouch=!0,this.lastMultiTouchTime=Date.now(),this.lastPinchDistance=this.getPinchDistance(t.touches),this.pinchCenter=this.getPinchCenter(t.touches),this.lastPanPoint=this.getPinchCenter(t.touches),console.log("ピンチジェスチャー開始")):1!==t.touches.length||this.isPinching||this.multiTouchCooldown||this.startDrawing(t.touches[0])}),this.canvas.addEventListener("touchmove",t=>{if(t.preventDefault(),2===t.touches.length&&this.isPinching){const e=this.getPinchDistance(t.touches),s=this.getPinchCenter(t.touches);if(this.lastPinchDistance>0){const t=e/this.lastPinchDistance;this.zoomAt(s.x,s.y,t)}if(this.lastPanPoint){const t=s.x-this.lastPanPoint.x,e=s.y-this.lastPanPoint.y;this.translateX+=t,this.translateY+=e,this.redrawCanvas()}this.lastPinchDistance=e,this.pinchCenter=s,this.lastPanPoint=s}else 1!==t.touches.length||this.isPinching||this.multiTouchCooldown||(this.isDrawing||this.isDraggingTextBox||this.isResizing||this.updateCursorForPosition(t.touches[0]),"eraser"===this.currentTool?this.updateEraserPreview(t.touches[0]):this.showEraserPreview=!1,this.draw(t.touches[0]))}),this.canvas.addEventListener("touchend",t=>{t.preventDefault(),t.touches.length<2&&(this.isPinching=!1,this.lastPinchDistance=0,this.lastPanPoint=null,0===t.touches.length&&this.isMultiTouch&&(console.log("全タッチ終了 - シンプルクールダウン開始"),this.multiTouchCooldown=!0,this.isMultiTouch=!1,this.lastMultiTouchTime=Date.now(),setTimeout(()=>{this.multiTouchCooldown=!1,console.log("クールダウン終了 - 描画再開可能")},200))),0!==t.touches.length||this.multiTouchCooldown||("eraser"===this.currentTool&&this.isEraserPressed&&this.stopEraserOperation(),this.stopDrawing(t.changedTouches[0]),"eraser"===this.currentTool&&(this.showEraserPreview=!1,this.eraserPreviewCoords=null,this.cancelTouchEraserPreview(),this.redrawCanvas()))}),this.canvas.addEventListener("touchcancel",()=>{this.cancelTouchEraserPreview(),this.showEraserPreview=!1,this.isPinching=!1,this.redrawCanvas()}),this.canvas.addEventListener("touchstart",t=>{"eraser"!==this.currentTool||1!==t.touches.length||this.multiTouchCooldown||this.startEraserOperation(t.touches[0])}),this.isShiftPressed=!1,document.addEventListener("keydown",t=>{if("Shift"===t.key){this.isShiftPressed=!0,this.updateCursor(),this.canvas.classList.add("shift-mode");const t=document.getElementById("shift-indicator");t&&t.classList.add("active")}}),document.addEventListener("keyup",t=>{if("Shift"===t.key){this.isShiftPressed=!1,this.updateCursor(),this.canvas.classList.remove("shift-mode");const t=document.getElementById("shift-indicator");t&&t.classList.remove("active")}}),this.canvas.addEventListener("contextmenu",t=>t.preventDefault())}getCoordinates(t){const e=this.canvas.getBoundingClientRect();let s=t.clientX-e.left,o=t.clientY-e.top;const i=window.devicePixelRatio||1;if(s*=i,o*=i,s=(s-this.translateX)/this.scale,o=(o-this.translateY)/this.scale,this.snapToGrid)if("polyline-grid"===this.currentTool){const t=this.gridSize/2;console.log("ポリライングリッド スナップ:",{gridSize:this.gridSize,halfGrid:t,originalX:s,originalY:o}),s=Math.round(s/t)*t,o=Math.round(o/t)*t,console.log("スナップ後:",{x:s,y:o})}else if("pen"!==this.currentTool&&"text-horizontal"!==this.currentTool&&"text-vertical"!==this.currentTool&&"eraser"!==this.currentTool)if("door"===this.currentTool||"stairs"===this.currentTool){const t=this.gridSize/4;s=Math.round(s/t)*t,o=Math.round(o/t)*t}else if("line"!==this.currentTool||"dashed"!==this.lineStyle&&"arrow"!==this.lineStyle)if("line"===this.currentTool&&"solid"===this.lineStyle||"rectangle"===this.currentTool){const t=this.gridSize/2;s=Math.round(s/t)*t,o=Math.round(o/t)*t}else s=Math.round(s/this.gridSize)*this.gridSize,o=Math.round(o/this.gridSize)*this.gridSize;else{const t=this.gridSize/4;s=Math.round(s/t)*t,o=Math.round(o/t)*t}else this.isShiftPressed&&"pen"===this.currentTool&&(s=Math.round(s/this.gridSize)*this.gridSize,o=Math.round(o/this.gridSize)*this.gridSize);return{x:s,y:o}}startDrawing(t){if(console.log("startDrawing called with tool:",this.currentTool),this.ctx.strokeStyle=this.strokeColor,this.ctx.fillStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth,this.ctx.lineCap="round",this.ctx.lineJoin="round",t.touches&&t.touches.length>1)return this.isMultiTouch=!0,this.lastMultiTouchTime=Date.now(),void console.log("マルチタッチ検出 - 描画無効化");if(this.multiTouchCooldown)return void console.log("クールダウン中のため描画をスキップ");if(this.isMultiTouch)return void console.log("マルチタッチ中のため描画をスキップ");if("eraser"===this.currentTool&&t.type&&t.type.includes("touch"))return void this.startTouchEraserPreview(t);this.textInput&&this.textInput.parentNode&&(console.log("既存のテキスト入力を完了します"),this.finishTextInput());const e=this.getCoordinates(t);if(this.selectedTextBox){const t=this.getResizeHandle(e,this.selectedTextBox);if(t)return console.log("選択中テキストボックスのリサイズハンドルをクリック:",t),this.isResizing=!0,this.resizeHandle=t,this.dragOffset={x:e.x,y:e.y},void this.redrawCanvas()}for(let o=this.allPaths.length-1;o>=0;o--){const t=this.allPaths[o];if("textbox"===t.tool&&t!==this.selectedTextBox){const s=this.getResizeHandle(e,t);if(s)return console.log("他のテキストボックスのリサイズハンドルをクリック:",s),this.allPaths.forEach(t=>{"textbox"===t.tool&&(t.isSelected=!1)}),this.setSelectedTextBox(t),this.isResizing=!0,this.resizeHandle=s,this.dragOffset={x:e.x,y:e.y},void this.redrawCanvas()}}const s=this.getTextBoxAt(e);if(s){if(console.log("テキストボックスをクリックしました（ツール:",this.currentTool,")"),this.allPaths.forEach(t=>{"textbox"===t.tool&&(t.isSelected=!1)}),this.setSelectedTextBox(s),this.lastClickTime&&Date.now()-this.lastClickTime<500)return console.log("ダブルクリック検出、編集モード開始"),this.editTextBox(s),void(this.lastClickTime=0);if(this.isPointInMoveArea(e,s))return console.log("移動エリアをクリック、移動準備開始"),this.isDraggingTextBox=!0,this.dragOffset={x:e.x-s.x,y:e.y-s.y},this.lastClickTime=Date.now(),void this.redrawCanvas();const t=this.getResizeHandle(e,s);return t?(console.log("エリア外でリサイズハンドル検出:",t),this.isResizing=!0,this.resizeHandle=t,this.dragOffset={x:e.x,y:e.y},this.lastClickTime=Date.now(),void this.redrawCanvas()):(console.log("デフォルト移動準備"),this.isDraggingTextBox=!0,this.dragOffset={x:e.x-s.x,y:e.y-s.y},this.lastClickTime=Date.now(),void this.redrawCanvas())}if(this.selectedTextBox&&(this.clearTextBoxSelection(),this.redrawCanvas()),"eraser"!==this.currentTool){if("door"===this.currentTool&&"smallbox"===this.doorType)return void this.drawSmallBoxInstantly(e);this.isDrawing=!0,this.startPoint=e,this.currentPath=[e],this.canvas.classList.add("drawing")}if("pen"===this.currentTool)this.ctx.setTransform(this.scale,0,0,this.scale,this.translateX,this.translateY),console.log("Pen drawing start - setting color:",this.strokeColor),this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.beginPath(),this.ctx.moveTo(e.x,e.y);else if("polyline-grid"===this.currentTool)this.ctx.setTransform(this.scale,0,0,this.scale,this.translateX,this.translateY),console.log("Polyline-grid drawing start - setting color:",this.strokeColor),this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth+6,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.beginPath(),this.ctx.moveTo(e.x,e.y);else if("text-horizontal"===this.currentTool||"text-vertical"===this.currentTool)return}drawSmallBoxInstantly(t){console.log("📦 開口部即座描画開始:",t);const e=this.gridSize/4,s=this.gridSize/4,o=Math.round(t.x/s)*s-e/2,i=Math.round(t.y/s)*s-e/2,n={tool:"door",doorType:"smallbox",startPoint:{x:o,y:i},endPoint:{x:o+e,y:i+e},strokeColor:this.strokeColor,strokeWidth:this.strokeWidth,lineStyle:this.lineStyle};this.allPaths.push(n),this.lastOperationType="path",this.redoStack=[],this.updateUndoRedoButtons(),console.log("開口部をパス履歴に追加:",n),this.redrawCanvas(),console.log("📦 開口部即座描画完了")}draw(t){if(this.isMultiTouch||this.multiTouchCooldown)return;if(t.touches&&t.touches.length>1)return;const e=this.getCoordinates(t);if(this.isShowingTouchPreview&&"eraser"===this.currentTool)return this.eraserPreviewCoords=e,void this.redrawCanvas();if("eraser"===this.currentTool&&this.isEraserPressed)return void this.eraseAtPoint(e);if(this.isResizing&&this.selectedTextBox&&this.resizeHandle)return this.resizeTextBox(this.selectedTextBox,this.resizeHandle,e),void this.redrawCanvas();if(this.isDraggingTextBox&&this.selectedTextBox){const e=this.canvas.getBoundingClientRect();let s=t.clientX-e.left,o=t.clientY-e.top;const i=window.devicePixelRatio||1;return s*=i,o*=i,s=(s-this.translateX)/this.scale,o=(o-this.translateY)/this.scale,this.selectedTextBox.x=s-this.dragOffset.x,this.selectedTextBox.y=o-this.dragOffset.y,void this.redrawCanvas()}if(!this.isDrawing)return;const s=performance.now();if(!(this.lastMouseMoveTime&&s-this.lastMouseMoveTime<this.mouseMoveThrottleMs))if(this.lastMouseMoveTime=s,this.currentPath.push(e),console.error("draw メソッド: ツール確認",{currentTool:this.currentTool,isDrawing:this.isDrawing,instanceId:this.constructor.name,thisRef:this===window.drawingCanvas?"GLOBAL":"UNKNOWN"}),"pen"===this.currentTool)console.error("ペンツール分岐に入りました"),this.ctx.setTransform(this.scale,0,0,this.scale,this.translateX,this.translateY),console.log("Pen drawing - applying color:",this.strokeColor),this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.lineTo(e.x,e.y),this.ctx.stroke();else if("polyline-grid"===this.currentTool)console.error("グリッド連続直線ツール分岐に入りました"),this.ctx.setTransform(this.scale,0,0,this.scale,this.translateX,this.translateY),console.log("Polyline-grid drawing - applying color:",this.strokeColor),this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth+6,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.lineTo(e.x,e.y),this.ctx.stroke();else{let t=e;if("line"===this.currentTool&&this.isShiftPressed){t=Math.abs(e.x-this.startPoint.x)>Math.abs(e.y-this.startPoint.y)?{x:e.x,y:this.startPoint.y}:{x:this.startPoint.x,y:e.y}}this.previewEndPoint=t,this.showShapePreview="text-horizontal"!==this.currentTool&&"text-vertical"!==this.currentTool,this.redrawCanvas()}}stopDrawing(t){if(this.isMultiTouch||this.multiTouchCooldown)return void console.log("マルチタッチ中またはクールダウン中のため停止処理をスキップ");if(this.isShowingTouchPreview)return void this.cancelTouchEraserPreview();if(this.isResizing)return this.isResizing=!1,void(this.resizeHandle=null);if(this.isDraggingTextBox)return void(this.isDraggingTextBox=!1);if(!this.isDrawing)return;this.isDrawing=!1,this.canvas.classList.remove("drawing");let e=this.getCoordinates(t);if("line"===this.currentTool&&this.isShiftPressed){e=Math.abs(e.x-this.startPoint.x)>Math.abs(e.y-this.startPoint.y)?{x:e.x,y:this.startPoint.y}:{x:this.startPoint.x,y:e.y}}if("text-horizontal"===this.currentTool||"text-vertical"===this.currentTool);else{const t="line"===this.currentTool||"rectangle"===this.currentTool||"door"===this.currentTool||"polyline-grid"===this.currentTool?this.strokeWidth+6:this.strokeWidth,s={tool:this.currentTool,path:this.currentPath,strokeWidth:t,strokeColor:this.strokeColor,startPoint:this.startPoint,endPoint:e};"line"===this.currentTool&&(s.lineStyle=this.lineStyle,s.isDashed=this.isDashed,s.hasArrow=this.hasArrow),"door"===this.currentTool&&(s.doorType=this.doorType),"stairs"===this.currentTool&&(s.stairSteps=this.stairSteps,s.stairWidth=this.stairWidth),"eraser"===this.currentTool?console.log("消しゴム操作 - クリック処理で完結"):(this.allPaths.push(s),this.lastOperationType="path",console.log("パス追加:",{tool:s.tool,pathCount:this.allPaths.length,lastOperationType:this.lastOperationType}),this.updateUndoRedoButtons()),this.redoStack=[],"pen"!==this.currentTool&&"polyline-grid"!==this.currentTool||this.emit("drawingComplete",this.currentPath)}"eraser"===this.currentTool&&(this.showEraserPreview=!1,this.eraserPreviewCoords=null,this.stopEraserOperation()),this.showShapePreview=!1,this.previewEndPoint=null,this.currentPath=[],this.allPaths.length>h&&this.optimizePaths()}drawShape(t,e){if(this.ctx.setTransform(this.scale,0,0,this.scale,this.translateX,this.translateY),this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth+6,"line"===this.currentTool&&"dashed"===this.lineStyle){const t=20,e=15;console.log("プレビューで点線を設定します:",{dashLength:t,gapLength:e,strokeWidth:this.strokeWidth}),this.ctx.setLineDash([t,e])}else this.ctx.setLineDash([]);switch(this.ctx.beginPath(),this.currentTool){case"line":this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y);break;case"rectangle":const s=e.x-t.x,o=e.y-t.y;this.ctx.rect(t.x,t.y,s,o);break;case"door":return this.drawDoor(t,e),void this.ctx.restore();case"stairs":return this.drawStairs(t,e),void this.ctx.restore()}this.ctx.stroke(),"line"===this.currentTool&&"arrow"===this.lineStyle&&(console.log("プレビューで矢印を描画します:",{lineStyle:this.lineStyle}),this.drawArrowHead(this.ctx,t.x,t.y,e.x,e.y))}drawDoor(t,e){const s=e.x-t.x,o=e.y-t.y,i=.5*this.gridSize;let n,a,r;Math.abs(s)>Math.abs(o)?s>0?(r="horizontal-right",n={x:t.x,y:t.y},a={x:t.x+i,y:t.y}):(r="horizontal-left",n={x:t.x,y:t.y},a={x:t.x-i,y:t.y}):o>0?(r="vertical-down",n={x:t.x,y:t.y},a={x:t.x,y:t.y+i}):(r="vertical-up",n={x:t.x,y:t.y},a={x:t.x,y:t.y-i});const l=r.startsWith("horizontal")?0:1,h=r.startsWith("vertical")?0:1;switch(this.doorType){case"single":case"single-right":this.drawSingleDoor(n,a,l,h,i,"right");break;case"double":this.drawDoubleDoor(n,a,l,h,i);break;case"smallbox":this.drawSmallBox(t,e);break;case"single-left":this.drawSingleDoor(n,a,l,h,i,"left")}}drawSingleDoor(t,e,s,o,i,n){const a={x:Math.floor(t.x)+.5,y:Math.floor(t.y)+.5},r={x:Math.floor(e.x)+.5,y:Math.floor(e.y)+.5};this.ctx.save(),this.ctx.lineWidth=6,this.ctx.strokeStyle=this.getBackgroundColor(),this.ctx.beginPath(),this.ctx.moveTo(a.x,a.y),this.ctx.lineTo(r.x,r.y),this.ctx.stroke(),this.ctx.lineWidth=6,this.ctx.strokeStyle=this.getBackgroundColor(),this.ctx.beginPath(),this.ctx.moveTo(a.x,a.y),this.ctx.lineTo(r.x,r.y),this.ctx.stroke(),this.ctx.restore();const l="left"===n?r:a,h=i,c=Math.atan2(r.y-a.y,r.x-a.x);let d;d="left"===n?c+Math.PI/2:c-Math.PI/2,this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle=this.getShapeColor(),this.ctx.beginPath(),this.ctx.arc(l.x,l.y,h,Math.min(c,d),Math.max(c,d)),this.ctx.stroke(),this.ctx.restore();const x=Math.floor(l.x+Math.cos(d)*h)+.5,g=Math.floor(l.y+Math.sin(d)*h)+.5;this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle=this.getShapeColor(),this.ctx.beginPath(),this.ctx.moveTo(l.x,l.y),this.ctx.lineTo(x,g),this.ctx.stroke(),this.ctx.restore()}drawDoubleDoor(t,e,s,o,i){const n={x:Math.floor(t.x)+.5,y:Math.floor(t.y)+.5},a={x:Math.floor(e.x)+.5,y:Math.floor(e.y)+.5};this.ctx.save(),this.ctx.lineWidth=6,this.ctx.strokeStyle=this.getBackgroundColor(),this.ctx.beginPath(),this.ctx.moveTo(n.x,n.y),this.ctx.lineTo(a.x,a.y),this.ctx.stroke(),this.ctx.restore();const r=Math.floor((n.x+a.x)/2)+.5,l=Math.floor((n.y+a.y)/2)+.5,h=i/2;this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle=this.getShapeColor(),this.ctx.beginPath();this.ctx.moveTo(r+4*s,l+4*o),this.ctx.lineTo(r-4*s,l-4*o),this.ctx.stroke(),this.ctx.restore();const c=Math.atan2(a.y-n.y,a.x-n.x),d=h;this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle=this.getShapeColor(),this.ctx.beginPath();const x=c-Math.PI/2;this.ctx.arc(n.x,n.y,d,Math.min(c,x),Math.max(c,x)),this.ctx.stroke(),this.ctx.restore(),this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle=this.getShapeColor(),this.ctx.beginPath();const g=Math.floor(n.x+Math.cos(x)*d)+.5,u=Math.floor(n.y+Math.sin(x)*d)+.5;this.ctx.moveTo(n.x,n.y),this.ctx.lineTo(g,u),this.ctx.stroke(),this.ctx.restore(),this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle=this.getShapeColor(),this.ctx.beginPath();const p=c+Math.PI,y=p+Math.PI/2;this.ctx.arc(a.x,a.y,d,Math.min(p,y),Math.max(p,y)),this.ctx.stroke(),this.ctx.restore(),this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle=this.getShapeColor(),this.ctx.beginPath();const m=Math.floor(a.x+Math.cos(y)*d)+.5,v=Math.floor(a.y+Math.sin(y)*d)+.5;this.ctx.moveTo(a.x,a.y),this.ctx.lineTo(m,v),this.ctx.stroke(),this.ctx.restore()}drawSmallBox(t,e){console.log("📦 キャンバス用開口部描画開始:",{start:t,end:e});const s=this.gridSize/4,o=t.x,i=t.y;this.ctx.save(),this.ctx.fillStyle="rgba(200, 200, 200, 0.8)",this.ctx.fillRect(o,i,s,s),this.ctx.lineWidth=1,this.ctx.strokeStyle="#666666",this.ctx.strokeRect(o,i,s,s),this.ctx.restore(),console.log("📦 キャンバス用開口部描画完了:",{boxX:o,boxY:i,boxSize:s})}drawStairs(t,e){console.log(`階段描画開始: start(${t.x}, ${t.y}), end(${e.x}, ${e.y}), stairWidth: ${this.stairWidth}px`),this.ctx.save(),this.ctx.lineWidth=2,this.ctx.strokeStyle=this.getShapeColor();const s=e.x-t.x,o=e.y-t.y,i=Math.sqrt(s*s+o*o);if(0===i)return void this.ctx.restore();const n=-(o/i),a=s/i,r=this.stairWidth,l=r/2;console.log("階段描画詳細:",{length:`${i.toFixed(1)}px`,stairWidth:`${r}px`,gridUnits:`${(r/this.gridSize).toFixed(2)}マス`,halfWidth:`${l}px`,gridSize:`${this.gridSize}px`,currentSize:r===.5*this.gridSize?"small":r===1*this.gridSize?"medium":r===1.5*this.gridSize?"large":"unknown"}),this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y),this.ctx.stroke();const h=Math.PI/6,c=e.x-20*Math.cos(Math.atan2(o,s)-h),d=e.y-20*Math.sin(Math.atan2(o,s)-h),x=e.x-20*Math.cos(Math.atan2(o,s)+h),g=e.y-20*Math.sin(Math.atan2(o,s)+h);this.ctx.beginPath(),this.ctx.moveTo(e.x,e.y),this.ctx.lineTo(c,d),this.ctx.moveTo(e.x,e.y),this.ctx.lineTo(x,g),this.ctx.stroke();const u=i/(this.stairSteps+1);for(let p=1;p<=this.stairSteps;p++){const e=p*u/i;if(e>=1)break;const r=t.x+s*e,h=t.y+o*e,c=r+n*l,d=h+a*l,x=r-n*l,g=h-a*l;this.ctx.beginPath(),this.ctx.moveTo(c,d),this.ctx.lineTo(x,g),this.ctx.stroke()}this.ctx.fillStyle="#ffffff",this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.arc(t.x,t.y,4,0,2*Math.PI),this.ctx.fill(),this.ctx.stroke(),this.ctx.restore()}redrawCanvas(){if(this.redrawRequested)return;this.redrawRequested=!0,this.redrawTimeout&&cancelAnimationFrame(this.redrawTimeout);const t=performance.now();this.lastRedrawTime&&t-this.lastRedrawTime<this.redrawThrottleMs?this.redrawTimeout=setTimeout(()=>{this.redrawRequested=!1,this._performRedraw()},this.redrawThrottleMs-(t-this.lastRedrawTime)):this.redrawTimeout=requestAnimationFrame(()=>{this.redrawRequested=!1,this.lastRedrawTime=performance.now(),this._performRedraw()})}_performRedraw(){this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.setTransform(this.scale,0,0,this.scale,this.translateX,this.translateY),this.drawGrid(),console.log("redrawCanvas: パス数=",this.allPaths.length,"scale:",this.scale),this.allPaths.forEach((t,e)=>{if(console.log(`パス${e}: ${t.tool}`),this.ctx.save(),"pen"===t.tool)this.ctx.strokeStyle=t.strokeColor,this.ctx.lineWidth=t.strokeWidth,this.ctx.beginPath(),t.path.forEach((t,e)=>{0===e?this.ctx.moveTo(t.x,t.y):this.ctx.lineTo(t.x,t.y)}),this.ctx.stroke();else if("polyline-grid"===t.tool){this.ctx.strokeStyle=t.color||t.strokeColor,this.ctx.lineWidth=t.width||t.strokeWidth,this.ctx.beginPath();(t.points||t.path).forEach((t,e)=>{0===e?this.ctx.moveTo(t.x,t.y):this.ctx.lineTo(t.x,t.y)}),this.ctx.stroke()}else if("text-horizontal"===t.tool||"text-vertical"===t.tool)console.log(`テキスト: "${t.text}" at (${t.x}, ${t.y})`),this.ctx.fillStyle=t.strokeColor,this.ctx.font=`${t.fontSize}px "Noto Sans JP", "Hiragino Sans", "Yu Gothic", "Meiryo", Arial, sans-serif`,t.isVertical?this.drawVerticalText(t.text,t.x,t.y,t.fontSize):this.ctx.fillText(t.text,t.x,t.y);else if("textbox"===t.tool)console.log("テキストボックスを描画:",t),this.drawTextBox(t);else{if(console.log(`図形: ${t.tool} (${t.startPoint.x},${t.startPoint.y}) → (${t.endPoint.x},${t.endPoint.y})`),this.ctx.strokeStyle=t.strokeColor,this.ctx.lineWidth=t.strokeWidth,this.ctx.lineCap="round",this.ctx.lineJoin="round","line"===t.tool){const e=t.lineStyle||(t.isDashed?"dashed":t.hasArrow?"arrow":"solid");if("dashed"===e){console.log("保存済み図形で点線を設定します:",e);const t=20,s=15;this.ctx.setLineDash([t,s])}else this.ctx.setLineDash([])}else this.ctx.setLineDash([]);switch(this.ctx.beginPath(),t.tool){case"line":this.ctx.moveTo(t.startPoint.x,t.startPoint.y),this.ctx.lineTo(t.endPoint.x,t.endPoint.y);break;case"rectangle":const e=t.endPoint.x-t.startPoint.x,s=t.endPoint.y-t.startPoint.y;this.ctx.rect(t.startPoint.x,t.startPoint.y,e,s);break;case"door":const o=this.doorType;return this.doorType=t.doorType||"single",this.drawDoor(t.startPoint,t.endPoint),this.doorType=o,void this.ctx.restore();case"stairs":const i=this.stairSteps,n=this.stairWidth;return this.stairSteps=t.stairSteps||10,this.stairWidth=t.stairWidth||1*this.gridSize,this.drawStairs(t.startPoint,t.endPoint),this.stairSteps=i,this.stairWidth=n,void this.ctx.restore()}if(this.ctx.stroke(),"line"===t.tool){const e=t.lineStyle||(t.hasArrow?"arrow":"solid");console.log("保存済み直線の線スタイル確認:",{lineStyle:e,pathDataLineStyle:t.lineStyle,pathDataHasArrow:t.hasArrow}),"arrow"===e&&(console.log("保存済み図形で矢印を描画します"),this.drawArrowHead(this.ctx,t.startPoint.x,t.startPoint.y,t.endPoint.x,t.endPoint.y))}}this.ctx.restore()}),this.selectedTextBox&&this.drawSelectionHandles(this.selectedTextBox),this.showEraserPreview&&this.eraserPreviewCoords&&this.drawEraserPreview(),this.showShapePreview&&this.startPoint&&this.previewEndPoint&&this.drawShapePreview(this.startPoint,this.previewEndPoint),this.isDrawing&&"polyline-grid"===this.currentTool&&this.currentPath.length>0&&(this.ctx.setTransform(this.scale,0,0,this.scale,this.translateX,this.translateY),this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth+6,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.beginPath(),this.currentPath.forEach((t,e)=>{0===e?this.ctx.moveTo(t.x,t.y):this.ctx.lineTo(t.x,t.y)}),this.ctx.stroke()),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.setLineDash([]),this.ctx.strokeStyle=this.strokeColor,this.ctx.fillStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth,this.ctx.lineCap="round",this.ctx.lineJoin="round"}drawShapePreview(t,e){if(this.ctx.setTransform(this.scale,0,0,this.scale,this.translateX,this.translateY),this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth+6,"line"===this.currentTool)if(console.log("プレビューでlineStyle:",this.lineStyle),"dashed"===this.lineStyle){const t=20,e=15;console.log("プレビューで点線を設定:",{dashLength:t,gapLength:e,strokeWidth:this.strokeWidth}),this.ctx.setLineDash([t,e])}else this.ctx.setLineDash([]);else this.ctx.setLineDash([]);switch(this.ctx.beginPath(),this.currentTool){case"line":this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y),this.ctx.stroke(),"arrow"===this.lineStyle&&(console.log("プレビューで矢印を描画:",{start:t,end:e}),this.drawArrowHead(this.ctx,t.x,t.y,e.x,e.y));break;case"rectangle":const s=e.x-t.x,o=e.y-t.y;this.ctx.rect(t.x,t.y,s,o),this.ctx.stroke();break;case"door":return void this.drawDoor(t,e);case"stairs":return void this.drawStairs(t,e)}}drawSelectionHandles(t){const e=this.ctx.strokeStyle,s=this.ctx.fillStyle,o=this.ctx.lineWidth,i=this.ctx.font,n=this.ctx.textAlign,a=this.ctx.textBaseline,r=this.calculateActualTextBoxSize(t),l=this.getResizeHandles(t);this.ctx.strokeStyle="#8B5CF6",this.ctx.lineWidth=1,this.ctx.setLineDash([3,3]),this.ctx.beginPath(),this.ctx.rect(t.x,t.y,r.width,r.height),this.ctx.stroke(),this.ctx.setLineDash([]);const h=this.handleSize,c=t.x+h,d=t.y+h,x=Math.max(0,r.width-2*h),g=Math.max(0,r.height-2*h);if(x>0&&g>0){this.ctx.fillStyle="rgba(139, 92, 246, 0.1)",this.ctx.fillRect(c,d,x,g);const e=t.x+t.width/2,s=t.y+t.height/2;this.ctx.fillStyle="rgba(139, 92, 246, 0.5)",this.ctx.font="10px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText("⊹",e,s)}this.ctx.fillStyle="#ffffff",this.ctx.strokeStyle="#8B5CF6",this.ctx.lineWidth=1.5;for(let u in l){const t=l[u];"w"!==u&&"e"!==u||(this.ctx.save(),this.ctx.fillStyle="rgba(0, 0, 0, 0.15)",this.ctx.fillRect(t.x-this.handleSize/2+1,t.y-this.handleSize/2+1,this.handleSize,this.handleSize),this.ctx.restore(),this.ctx.beginPath(),this.ctx.rect(t.x-this.handleSize/2,t.y-this.handleSize/2,this.handleSize,this.handleSize),this.ctx.fillStyle="#ffffff",this.ctx.fill(),this.ctx.strokeStyle="#8B5CF6",this.ctx.stroke(),this.ctx.beginPath(),this.ctx.arc(t.x,t.y,1.5,0,2*Math.PI),this.ctx.fillStyle="#8B5CF6",this.ctx.fill())}this.ctx.strokeStyle=e,this.ctx.fillStyle=s,this.ctx.lineWidth=o,this.ctx.font=i,this.ctx.textAlign=n,this.ctx.textBaseline=a}drawVerticalText(t,e,s,o){t.split("").forEach((t,i)=>{this.ctx.fillText(t,e,s+i*o)})}drawTextBoxPreview(t,e){this.ctx.strokeStyle="#007AFF",this.ctx.lineWidth=1,this.ctx.setLineDash([5,5]),this.ctx.beginPath();const s=e.x-t.x,o=e.y-t.y;this.ctx.rect(t.x,t.y,s,o),this.ctx.stroke(),this.ctx.setLineDash([])}createTextBox(t,e){const s=Math.abs(e.x-t.x),o=Math.abs(e.y-t.y),i=(t.x+e.x)/2,n=(t.y+e.y)/2,a="text-vertical"===this.currentTool,r=this.fontSize;let l,h;a?(l=Math.max(s,3*r),h=Math.max(o,10*r)):(l=Math.max(s,10*r),h=Math.max(o,1.5*r)),this.createTextBoxAuto(i,n,l,h,a)}createTextBoxAuto(t,e,s,o,i){console.log("=== createTextBoxAuto が呼ばれました ==="),console.log("既存のテキスト入力状態:",{textInput:this.textInput,parentNode:this.textInput?this.textInput.parentNode:null,allPathsCount:this.allPaths.length});if(this.allPaths.some(t=>"textbox"===t.tool&&t.isSelected)||this.textInput&&this.textInput.parentNode)return void console.log("編集中のテキストボックスがあるため、新しいテキストボックスの作成をスキップします");const n={tool:"textbox",x:t-s/2,y:e-o/2,width:s,height:o,text:"",fontSize:this.fontSize,fontFamily:'"Noto Sans JP", "Hiragino Sans", "Yu Gothic", "Meiryo", Arial, sans-serif',strokeColor:this.strokeColor,isVertical:i,isSelected:!0};this.allPaths.forEach(t=>{"textbox"===t.tool&&(t.isSelected=!1)}),this.setSelectedTextBox(n),this.allPaths.push(n),this.redoStack=[],this.lastOperationType="path",this.updateUndoRedoButtons(),console.log("テキストボックス作成: lastOperationType = path"),console.log("作成されたテキストボックス:",n),console.log("allPaths配列:",this.allPaths),this.redrawCanvas(),this.editTextBox(n)}editTextBox(t){console.log("=== editTextBox 開始 ==="),console.log("textBoxData:",t),console.log("isVertical:",t.isVertical);if(this.allPaths.some(e=>"textbox"===e.tool&&e.isSelected&&e!==t)||this.textInput&&this.textInput.parentNode){console.log("他の編集中のテキストボックスがあるため、編集をスキップします");const e=this.allPaths.indexOf(t);return void(e>-1&&(this.allPaths.splice(e,1),console.log("重複テキストボックスを削除"),this.updateUndoRedoButtons(),this.redrawCanvas()))}this.removeTextInput();const e=this.canvas.getBoundingClientRect(),s=this.canvas.parentElement;t.isVertical?(this.textInput=document.createElement("textarea"),this.textInput.value=t.text||"",this.textInput.placeholder="縦書きテキスト"):(this.textInput=document.createElement("textarea"),this.textInput.value=t.text,this.textInput.placeholder="横書きテキスト"),this.textInput.className="text-input-overlay";const o=t.fontSize,i=Math.max(4,.2*o),n=window.devicePixelRatio||1,a=t.x*this.scale+this.translateX,r=t.y*this.scale+this.translateY,l=t.width*this.scale,h=t.height*this.scale;if(this.textInput.style.position="absolute",t.isVertical?(this.textInput.style.left=a/n+e.left-s.offsetLeft+i-3*o+"px",this.textInput.style.top=`${r/n+e.top-s.offsetTop+i}px`):(this.textInput.style.left=`${a/n+e.left-s.offsetLeft+i}px`,this.textInput.style.top=`${r/n+e.top-s.offsetTop+i}px`),t.isVertical){const t=Math.max(3.5*o,80),e=Math.max(10*o,250);this.textInput.style.width=`${t}px`,this.textInput.style.height=`${e}px`}else{const t=Math.max(80,l-2*i,5*o),e=Math.max(40,h/n-2*i,2*o);this.textInput.style.width=`${t}px`,this.textInput.style.height=`${e}px`}this.textInput.style.fontSize=o/n+"px",this.textInput.style.fontFamily=t.fontFamily,this.textInput.style.color=t.strokeColor,this.textInput.style.background="rgba(255, 255, 255, 0.8)",this.textInput.style.border="2px solid #007AFF",this.textInput.style.borderRadius="4px",this.textInput.style.padding="2px",this.textInput.style.resize="none",this.textInput.style.zIndex="1000",this.textInput.style.overflow="hidden",this.textInput.style.boxSizing="border-box",this.textInput.style.lineHeight="1.3",this.textInput.style.cursor="text",t.isVertical?(console.log("縦書きテキストボックス編集 - 縦書きスタイルを適用"),this.textInput.classList.add("vertical"),this.textInput.classList.remove("horizontal"),this.textInput.style.setProperty("writing-mode","vertical-rl","important"),this.textInput.style.setProperty("-webkit-writing-mode","vertical-rl","important"),this.textInput.style.setProperty("-ms-writing-mode","tb-rl","important"),this.textInput.style.setProperty("text-orientation","upright","important"),this.textInput.style.setProperty("-webkit-text-orientation","upright","important"),this.textInput.style.setProperty("direction","ltr","important"),this.textInput.style.minWidth="40px",this.textInput.style.minHeight="80px",this.textInput.setAttribute("dir","ltr")):(console.log("横書きテキストボックス編集 - 横書きスタイルを適用"),this.textInput.classList.add("horizontal"),this.textInput.classList.remove("vertical"),this.textInput.style.setProperty("writing-mode","horizontal-tb","important"),this.textInput.style.setProperty("-webkit-writing-mode","horizontal-tb","important"),this.textInput.style.setProperty("-ms-writing-mode","lr-tb","important"),this.textInput.style.setProperty("text-orientation","mixed","important"),this.textInput.style.setProperty("-webkit-text-orientation","mixed","important"),this.textInput.style.setProperty("direction","ltr","important"),this.textInput.removeAttribute("dir")),this.selectedTextBox=t,this.currentTextBox=t,this.textInput.addEventListener("blur",()=>this.finishTextBoxEdit()),this.textInput.addEventListener("keydown",t=>{"Escape"===t.key?this.cancelTextBoxEdit():"Enter"===t.key&&t.ctrlKey&&(t.preventDefault(),this.finishTextBoxEdit())}),this.textInput.addEventListener("input",()=>{this.adjustTextBoxSize(t)}),s.appendChild(this.textInput),console.log("=== テキスト入力要素のスタイル確認 ==="),console.log("writingMode:",this.textInput.style.writingMode),console.log("textOrientation:",this.textInput.style.textOrientation),console.log("isVertical:",t.isVertical),setTimeout(()=>{if(this.textInput.focus(),this.textInput.style.cursor="text",this.textInput.select)this.textInput.select();else{const t=document.createRange();t.selectNodeContents(this.textInput);const e=window.getSelection();e.removeAllRanges(),e.addRange(t)}},10)}adjustTextBoxSize(t){if(!this.textInput)return;const e=this.textInput.value.split("\n"),s=t.fontSize,o=window.devicePixelRatio||1;if(t.isVertical){const i=Math.max(...e.map(t=>t.length),1),n=Math.max(3.5*s,s*(i+1));this.textInput.style.width=`${n}px`,t.width=n*o}else{const i=Math.max(e.length,1),n=1.3*s,a=Math.max(1.5*s,n*i+8);this.textInput.style.height=a/o+"px",t.height=a}this.redrawCanvas()}finishTextBoxEdit(){if(!this.textInput||!this.selectedTextBox)return;const t=this.textInput.value.trim();this.selectedTextBox.text=t,this.removeTextInput(),this.selectedTextBox=null,this.currentTextBox=null,this.redrawCanvas()}cancelTextBoxEdit(){if(this.selectedTextBox){if(!this.selectedTextBox.text.trim()){const t=this.allPaths.indexOf(this.selectedTextBox);t>-1&&(this.allPaths.splice(t,1),this.updateUndoRedoButtons())}this.removeTextInput(),this.selectedTextBox=null,this.currentTextBox=null,this.redrawCanvas()}}drawTextBox(t){console.log("=== drawTextBox 開始 ==="),console.log("textBoxData:",t),this.ctx.strokeStyle="#CCCCCC",this.ctx.lineWidth=1;let{x:e,y:s,width:o,height:i,text:n,fontSize:a,fontFamily:r,strokeColor:l,isVertical:h}=t;this.ctx.font=`${a}px ${r}`;const c=o,d=Math.max(4,.2*a),x=1.3*a;if(n&&n.trim())if(this.ctx.fillStyle=l,h){const t=n.split("\n");let e=0,s=t.length;for(let o of t)e=Math.max(e,o.length);const r=e*a+2*d,l=s*a*1.2+2*d;i<r&&(i=r),o<l&&(o=l)}else{const t=n.split("\n");let e=[],s=0;for(let o of t){if(""===o){e.push("");continue}const t=o.split("");let i="";for(let o of t){const t=i+o;this.ctx.measureText(t).width>c-2*d&&""!==i?(e.push(i),s=Math.max(s,this.ctx.measureText(i).width),i=o):i=t}i&&(e.push(i),s=Math.max(s,this.ctx.measureText(i).width))}const a=e.length*x+2*d;i<a&&(i=a),o<s+2*d&&(o=s+2*d)}if(this.ctx.beginPath(),this.ctx.rect(e,s,o,i),console.log("テキストボックス枠を描画:",{x:e,y:s,width:o,height:i}),this.ctx.stroke(),n&&n.trim()){if(this.ctx.fillStyle=l,h){this.ctx.textAlign="center",this.ctx.textBaseline="middle";const t=n.split("\n"),r=t.length,l=1.2*a,h=r*l,c=Math.max(...t.map(t=>t.length)),d=e+o/2+(h-l)/2,x=s+i/2-c*a/2;t.forEach((t,e)=>{const s=t.split(""),o=d-e*l;s.forEach((t,e)=>{const s=x+e*a+a/2;this.ctx.fillText(t,o,s)})})}else{const a=t.isPreset||!1;this.ctx.textAlign=a?"center":"left",this.ctx.textBaseline="middle";const r=n.split("\n");let l=[];for(let t of r){if(""===t){l.push("");continue}const e=t.split("");let s="";for(let t of e){const e=s+t;this.ctx.measureText(e).width>o-2*d&&""!==s?(l.push(s),s=t):s=e}s&&l.push(s)}const h=s+(i-l.length*x)/2+x/2;l.forEach((t,s)=>{const i=a?e+o/2:e+d,n=h+s*x;this.ctx.fillText(t,i,n)})}this.ctx.textAlign="start",this.ctx.textBaseline="alphabetic"}}handleSelection(t){console.log("handleSelection called");const e=this.getCoordinates(t);if(console.log("Click coordinates:",e),this.selectedTextBox){console.log("Already selected textbox:",this.selectedTextBox);const t=this.getResizeHandle(e,this.selectedTextBox);if(t)return console.log("Resize handle clicked:",t),this.isResizing=!0,this.resizeHandle=t,void(this.startPoint=e);if(this.isPointInTextBox(e,this.selectedTextBox))return console.log("Starting to drag textbox"),this.isDraggingTextBox=!0,void(this.dragOffset={x:e.x-this.selectedTextBox.x,y:e.y-this.selectedTextBox.y})}const s=this.getTextBoxAt(e);console.log("Found textbox at click:",s),s?(console.log("Selecting textbox:",s),this.selectedTextBox=s,this.redrawCanvas()):(console.log("Deselecting textbox"),this.selectedTextBox=null,this.redrawCanvas())}getTextBoxAt(t){console.log("Searching for textbox at:",t),console.log("Total paths:",this.allPaths.length);for(let e=this.allPaths.length-1;e>=0;e--){const s=this.allPaths[e];if(console.log(`Path ${e}:`,s.tool,s),"textbox"===s.tool&&this.isPointInTextBox(t,s))return console.log("Found matching textbox:",s),s}return console.log("No textbox found at coordinates"),null}isPointInTextBox(t,e){const s=this.calculateActualTextBoxSize(e);return t.x>=e.x&&t.x<=e.x+s.width&&t.y>=e.y&&t.y<=e.y+s.height}calculateActualTextBoxSize(t){if(!t.text||!t.text.trim())return{width:t.width,height:t.height};const e=this.ctx.font;this.ctx.font=`${t.fontSize}px ${t.fontFamily||"Arial"}`;let{width:s,height:o,fontSize:i,isVertical:n,text:a}=t;const r=Math.max(4,.2*i),l=1.3*i;if(n){const t=a.split("\n");let e=0,n=t.length;for(let s of t)e=Math.max(e,s.length);const l=e*i+2*r,h=n*i*1.2+2*r;o=Math.max(o,l),s=Math.max(s,h)}else{const t=a.split("\n");let e=[],i=0;for(let o of t){if(""===o){e.push("");continue}const t=this.ctx.measureText(o).width;i=Math.max(i,t);const n=o.split("");let a="";for(let o of n){const t=a+o;this.ctx.measureText(t).width>s-2*r&&""!==a?(e.push(a),a=o):a=t}a&&e.push(a)}const n=e.length*l+2*r;o=Math.max(o,n);const h=i+2*r;s=Math.max(s,h)}return this.ctx.font=e,{width:s,height:o}}isPointInMoveArea(t,e){const s=this.calculateActualTextBoxSize(e),o=this.handleSize,i=e.x+o,n=e.y+o,a=Math.max(0,s.width-2*o),r=Math.max(0,s.height-2*o),l=t.x>=i&&t.x<=i+a&&t.y>=n&&t.y<=n+r;return console.log("移動エリア判定:",{coords:t,moveArea:{x:i,y:n,width:a,height:r},actualSize:s,isInMoveArea:l}),l}getResizeHandle(t,e){const s=this.getResizeHandles(e),o=2.5*this.handleSize;console.log("ハンドル検出試行:",{coords:t,textBox:{x:e.x,y:e.y,width:e.width,height:e.height},detectionSize:o});const i=["w","e"];for(let n of i){const e=s[n],i=o/2,a=t.x>=e.x-i&&t.x<=e.x+i&&t.y>=e.y-i&&t.y<=e.y+i;if(console.log(`ハンドル${n}検出:`,{handle:e,range:{left:e.x-i,right:e.x+i,top:e.y-i,bottom:e.y+i},isInRange:a}),a)return console.log("✅ ハンドル検出成功:",n),n}return console.log("❌ ハンドル検出失敗"),null}resizeTextBox(t,e,s){console.log("🔄 リサイズ実行:",{handle:e,coords:s,textBox:{x:t.x,y:t.y,width:t.width,height:t.height}});const o=Math.max(30,3*this.fontSize);Math.max(20,2*this.fontSize);let i=t.width;switch(t.height,t.x,t.y,t.width,t.height,e){case"w":i=t.width+(t.x-s.x),i>=o&&(t.width=i,t.x=s.x);break;case"e":i=s.x-t.x,i>=o&&(t.width=i)}console.log("✅ リサイズ完了:",{handle:e,coords:s,textBox:{x:t.x,y:t.y,width:t.width,height:t.height}}),this.redrawCanvas()}updateCursorForPosition(t){const e=this.getCoordinates(t);if(this.selectedTextBox){const t=this.getResizeHandle(e,this.selectedTextBox);if(t){switch(t){case"nw":case"se":this.canvas.style.cursor="nw-resize";break;case"ne":case"sw":this.canvas.style.cursor="ne-resize";break;case"n":case"s":this.canvas.style.cursor="ns-resize";break;case"w":case"e":this.canvas.style.cursor="ew-resize";break;default:this.canvas.style.cursor="default"}return}if(this.isPointInTextBox(e,this.selectedTextBox))return void(this.isPointInMoveArea(e,this.selectedTextBox)?this.canvas.style.cursor="move":this.canvas.style.cursor="grab")}for(let s=this.allPaths.length-1;s>=0;s--){const t=this.allPaths[s];if("textbox"===t.tool){const s=this.getResizeHandle(e,t);if(s){switch(s){case"nw":case"se":this.canvas.style.cursor="nw-resize";break;case"ne":case"sw":this.canvas.style.cursor="ne-resize";break;case"n":case"s":this.canvas.style.cursor="ns-resize";break;case"w":case"e":this.canvas.style.cursor="ew-resize";break;default:this.canvas.style.cursor="default"}return}if(this.isPointInTextBox(e,t))return void(this.isPointInMoveArea(e,t)?this.canvas.style.cursor="move":this.canvas.style.cursor="pointer")}}this.updateCursor()}getResizeHandles(t){const e=this.calculateActualTextBoxSize(t),s=t.x,o=t.y,i=e.width,n=e.height;return{nw:{x:s,y:o},ne:{x:s+i,y:o},sw:{x:s,y:o+n},se:{x:s+i,y:o+n},n:{x:s+i/2,y:o},s:{x:s+i/2,y:o+n},w:{x:s,y:o+n/2},e:{x:s+i,y:o+n/2}}}handleSelectDrag(t){const e=this.getCoordinates(t);this.isResizing&&this.selectedTextBox&&this.resizeHandle?(this.resizeTextBox(this.selectedTextBox,this.resizeHandle,e),this.redrawCanvas()):this.isDraggingTextBox&&this.selectedTextBox&&(this.selectedTextBox.x=e.x-this.dragOffset.x,this.selectedTextBox.y=e.y-this.dragOffset.y,this.redrawCanvas())}setStrokeWidth(t){this.strokeWidth=t,this.ctx.lineWidth=t}setPenWidth(t){this.penWidth=t,"pen"===this.currentTool&&(this.strokeWidth=t,this.ctx.lineWidth=t)}setEraserSize(t){this.eraserSize=t}setStrokeColor(t){console.log("setStrokeColor called with:",t),this.strokeColor=t,this.ctx.strokeStyle=t,this.ctx.fillStyle=t,console.log("Updated strokeColor:",this.strokeColor,"ctx.strokeStyle:",this.ctx.strokeStyle)}setFontSize(t){if(this.fontSize=t,this.selectedTextBox){if(this.selectedTextBox.fontSize=t,this.textInput&&this.textInput.parentNode){const t=this.selectedTextBox,e=Math.min(t.fontSize,t.height/2,t.width/4),s=Math.max(8,e);this.textInput.style.fontSize=s*dpr+"px"}this.redrawCanvas()}}setSelectedTextBox(t){this.selectedTextBox&&(this.selectedTextBox.isSelected=!1,this.emit("textBoxDeselected")),this.selectedTextBox=t,t&&(t.isSelected=!0,this.emit("textBoxSelected",t))}clearTextBoxSelection(){this.allPaths.forEach(t=>{"textbox"===t.tool&&(t.isSelected=!1)}),this.selectedTextBox&&(this.selectedTextBox=null,this.emit("textBoxDeselected"))}setTool(t){console.error("ツール切り替え:",{from:this.currentTool,to:t}),this.isDrawing&&this.currentPath.length>0&&(console.log("描画中のため、現在の描画を完了させます"),this.finishCurrentDrawing()),this.currentTool=t,this.showEraserPreview=!1,this.eraserPreviewCoords=null,this.cancelTouchEraserPreview(),"pen"===t?(this.strokeWidth=this.penWidth,this.ctx.lineWidth=this.penWidth):(this.strokeWidth=2,this.ctx.lineWidth=2),this.ctx.strokeStyle=this.strokeColor,this.ctx.fillStyle=this.strokeColor,this.updateCursor(),this.redrawCanvas()}finishCurrentDrawing(){if(this.isDrawing&&0!==this.currentPath.length){switch(console.log("現在の描画を完了:",{tool:this.currentTool,pathLength:this.currentPath.length}),this.currentTool){case"polyline-grid":this.currentPath.length>1&&this.allPaths.push({tool:"polyline-grid",color:this.strokeColor,points:[...this.currentPath],width:this.strokeWidth+6});break;case"pen":this.currentPath.length>0&&this.allPaths.push({tool:"pen",color:this.strokeColor,points:[...this.currentPath],width:this.penWidth});break;case"line":this.currentPath.length>=2&&this.allPaths.push({tool:"line",color:this.strokeColor,start:this.currentPath[0],end:this.currentPath[this.currentPath.length-1],width:this.strokeWidth});break;default:this.currentPath.length>0&&this.allPaths.push({tool:this.currentTool,color:this.strokeColor,points:[...this.currentPath],width:this.strokeWidth})}this.isDrawing=!1,this.currentPath=[],this.lastOperationType="path",this.redoStack=[],console.log("描画完了。allPaths数:",this.allPaths.length)}}setSnapToGrid(t){this.snapToGrid=t}createTextInput(t){console.log("createTextInput開始:",t,"ツール:",this.currentTool),this.removeTextInput();const e=this.canvas.getBoundingClientRect(),s=this.canvas.parentElement;console.log("container:",s,"rect:",e);const o="text-vertical"===this.currentTool;o?(this.textInput=document.createElement("div"),this.textInput.contentEditable=!0,this.textInput.setAttribute("role","textbox"),this.textInput.setAttribute("aria-multiline","true")):this.textInput=document.createElement("textarea"),this.textInput.className="text-input-overlay",this.textInput.style.position="absolute",this.textInput.style.cursor="text",o?(this.textInput.style.left=t.x+e.left-s.offsetLeft-3*this.fontSize+"px",this.textInput.style.top=t.y+e.top-s.offsetTop+"px"):(this.textInput.style.left=t.x+e.left-s.offsetLeft+"px",this.textInput.style.top=t.y+e.top-s.offsetTop+"px"),this.textInput.style.fontSize=`${this.fontSize}px`,this.textInput.style.fontFamily="Arial, sans-serif",this.textInput.style.color=this.strokeColor,this.textInput.style.background="rgba(255, 255, 255, 0.8)",this.textInput.style.border="2px solid #007AFF",this.textInput.style.borderRadius="4px",this.textInput.style.padding="4px",this.textInput.style.resize="none",this.textInput.style.zIndex="1000",o?(this.textInput.style.minWidth=3.5*this.fontSize+"px",this.textInput.style.minHeight=10*this.fontSize+"px",this.textInput.style.width=3.5*this.fontSize+"px",this.textInput.style.height=10*this.fontSize+"px"):(this.textInput.style.minWidth="50px",this.textInput.style.minHeight="20px"),this.textInput.style.display="block",this.textInput.style.visibility="visible",this.textInput.style.opacity="1",o?(this.textInput.classList.add("vertical"),this.textInput.classList.remove("horizontal"),this.textInput.style.setProperty("writing-mode","vertical-rl","important"),this.textInput.style.setProperty("-webkit-writing-mode","vertical-rl","important"),this.textInput.style.setProperty("-ms-writing-mode","tb-rl","important"),this.textInput.style.setProperty("text-orientation","upright","important"),this.textInput.style.setProperty("-webkit-text-orientation","upright","important"),this.textInput.style.setProperty("direction","ltr","important"),this.textInput.style.minWidth="20px",this.textInput.style.minHeight="50px",this.textInput.setAttribute("dir","ltr")):(this.textInput.classList.add("horizontal"),this.textInput.classList.remove("vertical"),this.textInput.style.setProperty("writing-mode","horizontal-tb","important"),this.textInput.style.setProperty("-webkit-writing-mode","horizontal-tb","important"),this.textInput.style.setProperty("-ms-writing-mode","lr-tb","important"),this.textInput.style.setProperty("text-orientation","mixed","important"),this.textInput.style.setProperty("-webkit-text-orientation","mixed","important"),this.textInput.style.setProperty("direction","ltr","important"),this.textInput.removeAttribute("dir")),this.textInput.placeholder=o?"縦書きテキスト":"横書きテキスト",this.textInput.addEventListener("blur",()=>this.finishTextInput()),this.textInput.addEventListener("keydown",t=>{if("Escape"===t.key)this.removeTextInput();else if("Enter"===t.key)if(o&&this.textInput.contentEditable)if(t.ctrlKey)t.preventDefault(),this.finishTextInput();else{t.preventDefault();const e=window.getSelection(),s=e.getRangeAt(0),o=document.createElement("br");s.deleteContents(),s.insertNode(o),s.setStartAfter(o),s.collapse(!0),e.removeAllRanges(),e.addRange(s)}else t.ctrlKey&&(t.preventDefault(),this.finishTextInput())}),s.appendChild(this.textInput),console.log("テキスト入力要素をDOMに追加しました:",this.textInput),console.log("要素のスタイル:",{position:this.textInput.style.position,left:this.textInput.style.left,top:this.textInput.style.top,zIndex:this.textInput.style.zIndex,display:this.textInput.style.display,visibility:this.textInput.style.visibility}),setTimeout(()=>{this.textInput.focus(),this.textInput.style.cursor="text",console.log("フォーカスを設定しました。縦書き:",o)},10)}finishTextInput(){if(console.log("=== finishTextInput が呼ばれました ==="),console.log("テキスト入力状態:",{textInput:this.textInput,parentNode:this.textInput?this.textInput.parentNode:null,allPathsCount:this.allPaths.length}),!this.textInput||!this.textInput.parentNode)return void console.log("テキスト入力が存在しないため、処理をスキップします");let t;if(void 0!==this.textInput.value)t=this.textInput.value.trim();else{let e=this.textInput.innerHTML;e=e.replace(/<br\s*\/?>/gi,"\n");const s=document.createElement("div");s.innerHTML=e,t=(s.textContent||s.innerText||"").trim()}const e=this.allPaths.find(t=>"textbox"===t.tool&&t.isSelected);if(e){if(e.text=t,console.log("=== テキストボックス更新 ==="),console.log("テキスト:",t),console.log("テキストボックス:",e),t)this.adjustTextBoxSize(e),e.isSelected=!1,this.selectedTextBox=null;else{const t=this.allPaths.indexOf(e);t>-1&&(this.allPaths.splice(t,1),console.log("空のテキストボックスを削除"),this.updateUndoRedoButtons()),this.selectedTextBox=null}this.redrawCanvas()}this.removeTextInput()}adjustTextBoxSize(t){if(this.ctx.font=`${t.fontSize}px ${t.fontFamily}`,t.isVertical){const e=t.text.split("\n");let s=0,o=e.length;for(let t of e)s=Math.max(s,t.length);t.width=Math.max(o*t.fontSize*1.2,30),t.height=Math.max(s*t.fontSize*1.2,50)}else{const e=t.text.split("\n");let s=0,o=0;for(let i of e){if(""===i){o++;continue}const e=this.ctx.measureText(i).width;s=Math.max(s,e);const n=t.width-20;e>n&&n>0?o+=Math.ceil(e/n):o++}t.width=Math.max(s+20,50),t.height=Math.max(o*t.fontSize*1.4,30)}}removeTextInput(){if(this.textInput){try{this.textInput.parentNode&&this.textInput.parentNode.removeChild(this.textInput)}catch(t){console.log("Text input already removed")}this.textInput=null}}removeCurrentTextBox(){console.log("=== removeCurrentTextBox 開始 ==="),console.log("削除前の状態:",{textInput:this.textInput,allPathsCount:this.allPaths.length,selectedTextBox:this.selectedTextBox}),this.removeTextInput();const t=this.allPaths.findIndex(t=>"textbox"===t.tool&&t.isSelected&&(!t.text||""===t.text.trim()));if(console.log("削除対象の空テキストボックスのインデックス:",t),-1!==t){const e=this.allPaths.splice(t,1)[0];console.log("削除された空のテキストボックス:",e),console.log("空のテキストボックスを削除しました"),this.updateUndoRedoButtons()}else{console.log("削除対象の空テキストボックスが見つかりませんでした");const t=this.allPaths.find(t=>"textbox"===t.tool&&t.isSelected&&t.text&&""!==t.text.trim());t&&(console.log("テキストが入力済みのテキストボックスは削除せず選択解除のみ行います:",t),t.isSelected=!1)}this.selectedTextBox=null,console.log("削除後の状態:",{allPathsCount:this.allPaths.length,selectedTextBox:this.selectedTextBox}),this.redrawCanvas(),console.log("=== removeCurrentTextBox 完了 ===")}updateCursor(){this.canvas.classList.remove("tool-pen","tool-line","tool-rectangle","tool-circle","tool-text-horizontal","tool-text-vertical","tool-select","tool-door","tool-stairs","tool-polyline-grid"),this.canvas.classList.add(`tool-${this.currentTool.replace("-","-")}`);let t="crosshair";"pen"===this.currentTool||"line"===this.currentTool||"rectangle"===this.currentTool||"circle"===this.currentTool||"door"===this.currentTool||"stairs"===this.currentTool?t="crosshair":"text-horizontal"===this.currentTool||"text-vertical"===this.currentTool?t="text":"select"===this.currentTool&&(t="default"),this.canvas.style.cursor=t}clear(){this.allPaths=[],this.redoStack=[],this.history&&(this.history=[]),this.segmentHistory&&(this.segmentHistory=[]),this.segmentRedoStack&&(this.segmentRedoStack=[]),this.eraserHistory&&(this.eraserHistory=[]),this.eraserRedoStack&&(this.eraserRedoStack=[]),this.lastOperationType=null,this.redrawCanvas()}startEraserOperation(t){if(this.isMultiTouch||this.multiTouchCooldown)return;this.isEraserPressed=!0,this.eraserOperationActive=!0,this.eraserOperationChanges=[];const e=this.getCoordinates(t);this.eraseAtPoint(e)}stopEraserOperation(){console.log("stopEraserOperation呼び出し:",{isEraserPressed:this.isEraserPressed,eraserOperationActive:this.eraserOperationActive,eraserOperationChangesLength:this.eraserOperationChanges.length}),this.isEraserPressed&&(this.isEraserPressed=!1,this.eraserOperationActive&&this.eraserOperationChanges.length>0?(console.log("finishEraserOperation を呼び出します"),this.finishEraserOperation()):(console.log("finishEraserOperation をスキップ:",{eraserOperationActive:this.eraserOperationActive,eraserOperationChangesLength:this.eraserOperationChanges.length}),this.eraserOperationActive=!1,this.eraserOperationChanges=[]))}eraseAtPoint(t){var e;const s=this.eraserSize,o=[],i=[];for(let a=0;a<this.allPaths.length;a++){const e=this.allPaths[a];if("pen"===e.tool)for(let i=0;i<e.path.length;i++){const n=e.path[i];if(Math.sqrt(Math.pow(t.x-n.x,2)+Math.pow(t.y-n.y,2))<=s){o.push(a);break}}else if("polyline-grid"===e.tool){const o=e.points||e.path;if(!o||o.length<2)continue;const n=[];for(let t=0;t<o.length-1;t++)n.push({start:o[t],end:o[t+1],index:t});const r=[];for(let e=0;e<n.length;e++){const o=n[e];this.isPointNearLineSegment(t,o.start,o.end,s)&&r.push(e)}const l=new Set(r),h=10;for(const t of r){if(t>0){const e=n[t-1],s=Math.sqrt(Math.pow(e.end.x-e.start.x,2)+Math.pow(e.end.y-e.start.y,2));s<h&&(l.add(t-1),console.log("短い前隣接線分も削除:",s+"px"))}if(t<n.length-1){const e=n[t+1],s=Math.sqrt(Math.pow(e.end.x-e.start.x,2)+Math.pow(e.end.y-e.start.y,2));s<h&&(l.add(t+1),console.log("短い後隣接線分も削除:",s+"px"))}}const c=Array.from(l);if(c.length>0){const t=[];let s=[];const o=5;for(let i=0;i<n.length;i++)if(c.includes(i)){if(s.length>=2){const i=this.calculatePolylineLength(s);i>=o?t.push({tool:"polyline-grid",color:e.color||e.strokeColor,points:[...s],width:e.width||e.strokeWidth}):console.log("短すぎるポリライン（点状）を削除:",i+"px")}s=[]}else 0===s.length&&s.push(n[i].start),s.push(n[i].end);if(s.length>=2){const i=this.calculatePolylineLength(s);i>=o?t.push({tool:"polyline-grid",color:e.color||e.strokeColor,points:[...s],width:e.width||e.strokeWidth}):console.log("短すぎる最終ポリライン（点状）を削除:",i+"px")}this.saveLineSegmentState(a,null,null,e,t.length),console.log("ポリライングリッド部分削除履歴記録:",{index:a,newPathsCount:t.length}),i.push({index:a,newPaths:t})}}else if("textbox"===e.tool)this.isPointInTextBox(t,e)&&o.push(a);else if("line"===e.tool){if("arrow"===e.lineStyle){const n=this.getArrowHeadRegion(e.startPoint,e.endPoint);if(this.isPointInArrowHead(t,n,s))console.log("矢印の先端部分を削除するため、矢印全体を削除します"),o.push(a);else{const o=this.getLineSegmentsHalfGrid(e),r=[];for(let e=0;e<o.length;e++){const i=o[e];!this.isSegmentInArrowHead(i,n)&&this.isPointNearLineSegment(t,i.start,i.end,s)&&r.push(e)}if(r.length>0){console.log("矢印の線部分のみを部分削除します");const t=this.getLineSegmentsHalfGrid(e),s=this.removeLineSegmentsHalfGrid(e,r);let o=[];s.forEach(t=>{if("line"===t.tool){const e=this.getLineSegmentsHalfGrid(t);o=o.concat(e)}}),this.saveLineSegmentState(a,t,o,e,s.length),s.forEach(t=>{t.lineStyle="arrow"}),i.push({index:a,newPaths:s})}}continue}if("dashed"===e.lineStyle||e.isDashed){const o=this.getLineSegmentsHalfGrid(e),n=[];for(let e=0;e<o.length;e++){const i=o[e];this.isPointNearLineSegment(t,i.start,i.end,s)&&n.push(e)}if(n.length>0){console.log("点線の部分削除を実行します");const t=this.getLineSegmentsHalfGrid(e),s=this.removeLineSegmentsHalfGrid(e,n);let o=[];s.forEach(t=>{if("line"===t.tool){const e=this.getLineSegmentsHalfGrid(t);o=o.concat(e)}}),this.saveLineSegmentState(a,t,o,e,s.length),s.forEach(t=>{t.lineStyle=e.lineStyle||"dashed",t.isDashed=!0}),i.push({index:a,newPaths:s})}continue}const n=this.getLineSegmentsHalfGrid(e),r=[];for(let e=0;e<n.length;e++){const o=n[e];this.isPointNearLineSegment(t,o.start,o.end,s)&&r.push(e)}if(r.length>0){const t=this.getLineSegmentsHalfGrid(e),s=this.removeLineSegmentsHalfGrid(e,r);let o=[];s.forEach(t=>{if("line"===t.tool){const e=this.getLineSegmentsHalfGrid(t);o=o.concat(e)}}),this.saveLineSegmentState(a,t,o,e,s.length),i.push({index:a,newPaths:s})}}else if("rectangle"===e.tool){const o=this.getRectangleSegmentsHalfGrid(e),n=[];for(let e=0;e<o.length;e++){const i=o[e];this.isPointNearLineSegment(t,i.start,i.end,s)&&n.push(e)}if(n.length>0){const t=this.getRectangleSegmentsHalfGrid(e),s=this.removeRectangleSegmentsHalfGrid(e,n);let o=[];s.forEach(t=>{if("line"===t.tool){const e=this.getLineSegmentsHalfGrid(t);o=o.concat(e)}}),this.saveLineSegmentState(a,t,o,e,s.length),i.push({index:a,newPaths:s})}}else"stairs"===e.tool?this.isPointNearShape(t,e,s)?(console.log("階段を削除します:",{coords:t,startPoint:e.startPoint,endPoint:e.endPoint,stairWidth:e.stairWidth}),o.push(a)):console.log("階段判定: ヒットせず",{coords:t,distance:this.distanceToLine(t,e.startPoint,e.endPoint),eraserSize:s}):"door"===e.tool?this.isPointNearShape(t,e,s)&&(console.log("扉を削除します"),o.push(a)):e.startPoint&&e.endPoint&&this.isPointNearShape(t,e,s)&&o.push(a)}const n=[...new Set(o)].sort((t,e)=>e-t);if(n.length>0||i.length>0){console.error("消しゴム操作: パス削除前に履歴を保存",{uniqueIndices:n,pathsToModifyLength:i.length,allPathsLength:this.allPaths.length});const t=[...n].sort((t,e)=>t-e);for(const e of t){const t=this.allPaths[e];t&&(this.saveLineSegmentState(e,null,null,t,0),console.log("完全削除履歴記録:",{index:e,pathTool:t.tool}))}console.log("部分削除対象:",i.length,"個"),console.log("消しゴム操作完了 - lastOperationType設定:",{lastOperationType:this.lastOperationType,pathsDeleted:n.length,pathsModified:i.length}),"eraser"===this.lastOperationType&&(this.redoStack=[],this.segmentRedoStack=[],this.eraserRedoStack=[])}for(const a of n)console.error("パスを削除:",{index:a,pathTool:null==(e=this.allPaths[a])?void 0:e.tool}),this.allPaths.splice(a,1);i.sort((t,e)=>e.index-t.index);for(const a of i){let t=a.index;for(const e of n)e<a.index&&t--;this.allPaths.splice(t,1),this.allPaths.splice(t,0,...a.newPaths)}(n.length>0||i.length>0)&&(this.lastOperationType="segment",this.updateUndoRedoButtons(),this.redrawCanvas(),console.log("消しゴム操作完了:",{deletedPaths:n.length,modifiedPaths:i.length,lastOperationType:this.lastOperationType}))}updateEraserPreview(t){const e=performance.now();if(this.lastMouseMoveTime&&e-this.lastMouseMoveTime<this.mouseMoveThrottleMs)return;this.lastMouseMoveTime=e,this.eraserPreviewTimeout&&clearTimeout(this.eraserPreviewTimeout);const s=this.getCoordinates(t);this.eraserPreviewCoords=s,this.showEraserPreview=!0,this.eraserPreviewTimeout=setTimeout(()=>{this.redrawCanvas()},this.redrawThrottleMs)}startTouchEraserPreview(t){const e=this.getCoordinates(t);this.eraserPreviewCoords=e,this.showEraserPreview=!0,this.isShowingTouchPreview=!0,this.redrawCanvas(),this.touchPreviewTimer=setTimeout(()=>{this.isShowingTouchPreview=!1,this.isDrawing=!0,this.startPoint=e,this.currentPath=[e],this.canvas.classList.add("drawing"),this.eraseAtPoint(e)},300)}cancelTouchEraserPreview(){this.touchPreviewTimer&&(clearTimeout(this.touchPreviewTimer),this.touchPreviewTimer=null),this.isShowingTouchPreview=!1,this.showEraserPreview=!1,this.redrawCanvas()}drawEraserPreview(){if(!this.eraserPreviewCoords)return;const t=this.eraserSize,e=this.eraserPreviewCoords;this.ctx.save(),this.isShowingTouchPreview?(this.ctx.strokeStyle="#FF3030",this.ctx.fillStyle="rgba(255, 48, 48, 0.4)",this.ctx.lineWidth=3,this.ctx.setLineDash([4,4])):(this.ctx.strokeStyle="#FF6B6B",this.ctx.fillStyle="rgba(255, 107, 107, 0.2)",this.ctx.lineWidth=2,this.ctx.setLineDash([5,5])),this.ctx.beginPath(),this.ctx.arc(e.x,e.y,t,0,2*Math.PI),this.ctx.fill(),this.ctx.stroke(),this.ctx.setLineDash([]),this.isShowingTouchPreview&&(this.ctx.strokeStyle="#FF3030",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.moveTo(e.x-6,e.y),this.ctx.lineTo(e.x+6,e.y),this.ctx.moveTo(e.x,e.y-6),this.ctx.lineTo(e.x,e.y+6),this.ctx.stroke()),this.highlightTargetElements(e,t),this.ctx.restore()}highlightTargetElements(t,e){const s=[],o=[];for(let i=0;i<this.allPaths.length;i++){const n=this.allPaths[i];let a=!1;if("pen"===n.tool){for(let s=0;s<n.path.length;s++){const o=n.path[s];if(Math.sqrt(Math.pow(t.x-o.x,2)+Math.pow(t.y-o.y,2))<=e){a=!0;break}}a&&s.push(n)}else if("textbox"===n.tool)this.isPointInTextBox(t,n)&&s.push(n);else if("line"===n.tool){const s=this.getLineSegments(n),i=[];for(let o=0;o<s.length;o++){const n=s[o];this.isPointNearLineSegment(t,n.start,n.end,e)&&i.push(n)}if(i.length>0){const t=this.groupConsecutiveSegments(i);o.push(...t)}}else n.startPoint&&n.endPoint&&this.isPointNearShape(t,n,e)&&s.push(n)}this.ctx.save(),this.ctx.strokeStyle="#FF6B6B",this.ctx.lineWidth=3,this.ctx.setLineDash([3,3]),s.forEach(t=>{if(this.ctx.beginPath(),"pen"===t.tool)t.path.length>0&&(this.ctx.moveTo(t.path[0].x,t.path[0].y),t.path.forEach(t=>{this.ctx.lineTo(t.x,t.y)}));else if("textbox"===t.tool)this.ctx.rect(t.x,t.y,t.width,t.height);else if(t.startPoint&&t.endPoint)switch(t.tool){case"line":this.ctx.moveTo(t.startPoint.x,t.startPoint.y),this.ctx.lineTo(t.endPoint.x,t.endPoint.y);break;case"rectangle":const e=t.endPoint.x-t.startPoint.x,s=t.endPoint.y-t.startPoint.y;this.ctx.rect(t.startPoint.x,t.startPoint.y,e,s);break;case"circle":const o=Math.sqrt(Math.pow(t.endPoint.x-t.startPoint.x,2)+Math.pow(t.endPoint.y-t.startPoint.y,2));this.ctx.arc(t.startPoint.x,t.startPoint.y,o,0,2*Math.PI)}this.ctx.stroke()}),this.ctx.strokeStyle="#FF3030",this.ctx.lineWidth=6,this.ctx.setLineDash([4,2]),o.forEach(t=>{this.ctx.beginPath(),this.ctx.moveTo(t.start.x,t.start.y),this.ctx.lineTo(t.end.x,t.end.y),this.ctx.stroke()}),this.ctx.setLineDash([]),this.ctx.restore()}groupConsecutiveSegments(t){if(0===t.length)return[];t.sort((t,e)=>t.index-e.index);const e=[];let s=[t[0]];for(let o=1;o<t.length;o++){const i=t[o],n=t[o-1];i.index===n.index+1?s.push(i):(s.length>0&&e.push({start:s[0].start,end:s[s.length-1].end}),s=[i])}return s.length>0&&e.push({start:s[0].start,end:s[s.length-1].end}),e}isPointNearShape(t,e,s){const{startPoint:o,endPoint:i}=e;switch(e.tool){case"line":return this.distanceToLine(t,o,i)<=s;case"rectangle":return this.isPointNearRectangle(t,o,i,s);case"circle":return this.isPointNearCircle(t,o,i,s);case"stairs":return this.isPointNearStairs(t,o,i,e.stairWidth||this.gridSize,s);case"door":return this.isPointNearDoor(t,o,i,e.doorType,s);default:return!1}}isPointNearStairs(t,e,s,o,i){if(this.distanceToLine(t,e,s)<=i)return!0;const n=s.x-e.x,a=s.y-e.y,r=Math.sqrt(n*n+a*a);if(0===r)return!1;const l=-(a/r),h=n/r,c=o/2,d=r/11;for(let x=1;x<=10;x++){const s=x*d/r;if(s>=1)break;const o=e.x+n*s,g=e.y+a*s,u={x:o+l*c,y:g+h*c},p={x:o-l*c,y:g-h*c};if(this.distanceToLine(t,u,p)<=i)return!0}return!1}isPointNearDoor(t,e,s,o,n){if("smallbox"===o){const o=this.gridSize/4,i=Math.min(e.x,s.x),a=Math.max(e.x,s.x)||e.x+o,r=Math.min(e.y,s.y),l=Math.max(e.y,s.y)||e.y+o;return t.x>=i-n&&t.x<=a+n&&t.y>=r-n&&t.y<=l+n}let a=n;if(a*=2,"double"===o&&(a*=1.5),this.distanceToLine(t,e,s)<=a)return!0;const r=s.x-e.x,l=s.y-e.y,h=Math.sqrt(r*r+l*l);if(0===h)return!1;const c=-l/h,d=r/h,x=e.x+40*c/2,g=e.y+40*d/2,u=e.x-40*c/2,p=e.y-40*d/2,y=Math.sqrt(i(t.x-x,2)+i(t.y-g,2)),m=Math.sqrt(i(t.x-u,2)+i(t.y-p,2));return y<=n||m<=n}distanceToLine(t,e,s){const o=t.x-e.x,i=t.y-e.y,n=s.x-e.x,a=s.y-e.y,r=o*n+i*a,l=n*n+a*a;if(0===l)return Math.sqrt(o*o+i*i);let h,c,d=r/l;d<0?(h=e.x,c=e.y):d>1?(h=s.x,c=s.y):(h=e.x+d*n,c=e.y+d*a);const x=t.x-h,g=t.y-c;return Math.sqrt(x*x+g*g)}isPointNearLineSegmentImproved(t,e,s,o){const i=this.distanceToLine(t,e,s),n=s.x-e.x,a=s.y-e.y;let r=o;const l=180*Math.abs(Math.atan2(a,n))/Math.PI;return l<10||l>80&&l<100||l>170||(r*=1.4),i<=r}isPointNearRectangle(t,e,s,o){const i=Math.min(e.x,s.x),n=Math.max(e.x,s.x),a=Math.min(e.y,s.y),r=Math.max(e.y,s.y),l=[this.distanceToLine(t,{x:i,y:a},{x:n,y:a}),this.distanceToLine(t,{x:n,y:a},{x:n,y:r}),this.distanceToLine(t,{x:n,y:r},{x:i,y:r}),this.distanceToLine(t,{x:i,y:r},{x:i,y:a})];return Math.min(...l)<=o}isPointNearCircle(t,e,s,o){const i=(e.x+s.x)/2,n=(e.y+s.y)/2,a=Math.abs(s.x-e.x)/2,r=Math.sqrt(Math.pow(t.x-i,2)+Math.pow(t.y-n,2));return Math.abs(r-a)<=o}getLineSegments(t){const{startPoint:e,endPoint:s}=t,o=[],i=s.x-e.x,n=s.y-e.y,a=Math.sqrt(i*i+n*n),r=4*this.strokeWidth/3,l=Math.max(1,Math.ceil(a/r));for(let h=0;h<l;h++){const t=h/l,s=(h+1)/l,a={x:e.x+i*t,y:e.y+n*t},r={x:e.x+i*s,y:e.y+n*s};o.push({start:a,end:r,index:h})}return o}isPointNearLineSegment(t,e,s,o){return this.isPointNearLineSegmentImproved(t,e,s,o)}removeLineSegments(t,e){const s=this.getLineSegments(t),o=[],i=new Set(e);let n=[];for(let a=0;a<s.length;a++)if(i.has(a)){if(n.length>0){const e=this.createLineFromSegments(n,t);e&&o.push(e),n=[]}}else n.push(s[a]);if(n.length>0){const e=this.createLineFromSegments(n,t);e&&o.push(e)}return o}createLineFromSegments(t,e){if(0===t.length)return null;const s=t[0],o=t[t.length-1];return{tool:"line",startPoint:s.start,endPoint:o.end,strokeWidth:e.strokeWidth,strokeColor:e.strokeColor}}zoomAt(t,e,s){console.log("zoomAt called:",{x:t,y:e,zoom:s,currentScale:this.scale});const o=Math.max(this.minScale,Math.min(this.maxScale,this.scale*s));if(o!==this.scale){const s=window.devicePixelRatio||1;t*=s,e*=s;const i=o/this.scale;this.translateX=t-(t-this.translateX)*i,this.translateY=e-(e-this.translateY)*i,this.scale=o,console.log("Zoom applied. New scale:",this.scale,"translate:",this.translateX,this.translateY),this.redrawCanvas()}}getPinchDistance(t){const e=t[0].clientX-t[1].clientX,s=t[0].clientY-t[1].clientY;return Math.sqrt(e*e+s*s)}getPinchCenter(t){const e=this.canvas.getBoundingClientRect(),s=window.devicePixelRatio||1;return{x:((t[0].clientX+t[1].clientX)/2-e.left)*s,y:((t[0].clientY+t[1].clientY)/2-e.top)*s}}resetZoom(){this.scale=1,this.translateX=0,this.translateY=0,this.redrawCanvas()}drawGrid(){if(!this.snapToGrid)return;const t=this.ctx,e=-this.translateX/this.scale,s=-this.translateY/this.scale,o=(this.canvas.width-this.translateX)/this.scale,i=(this.canvas.height-this.translateY)/this.scale;t.save();const n=this.gridSize/2,a=Math.floor(e/n)*n,r=Math.floor(s/n)*n,l=Math.ceil(o/n)*n,h=Math.ceil(i/n)*n;t.strokeStyle="#cccccc",t.lineWidth=.5/this.scale,t.beginPath();for(let f=a;f<=l;f+=n)t.moveTo(f,s),t.lineTo(f,i);for(let f=r;f<=h;f+=n)t.moveTo(e,f),t.lineTo(o,f);t.stroke();const c=Math.floor(e/this.gridSize)*this.gridSize,d=Math.floor(s/this.gridSize)*this.gridSize,x=Math.ceil(o/this.gridSize)*this.gridSize,g=Math.ceil(i/this.gridSize)*this.gridSize;t.strokeStyle="#d0d0d0",t.lineWidth=1/this.scale,t.beginPath();for(let f=c;f<=x;f+=this.gridSize)t.moveTo(f,s),t.lineTo(f,i);for(let f=d;f<=g;f+=this.gridSize)t.moveTo(e,f),t.lineTo(o,f);t.stroke();const u=this.gridSize/4,p=Math.floor(e/u)*u,y=Math.floor(s/u)*u,m=Math.ceil(o/u)*u,v=Math.ceil(i/u)*u;t.fillStyle="#cccccc";for(let f=p;f<=m;f+=u)for(let e=y;e<=v;e+=u){if(!(f%n===0)&&!(e%n===0)){const s=Math.max(1.5/this.scale,.8);t.beginPath(),t.arc(f,e,s,0,2*Math.PI),t.fill()}}t.strokeStyle="#999999",t.lineWidth=3/this.scale,t.setLineDash([]),t.beginPath();0>=e&&0<=o&&(t.moveTo(0,s),t.lineTo(0,i)),0>=s&&0<=i&&(t.moveTo(e,0),t.lineTo(o,0)),t.stroke(),t.restore()}saveLineSegmentState(t,e,s,o=null,i=0){if(console.log("セグメント状態を保存:",{pathIndex:t,originalSegmentsCount:null==e?void 0:e.length,newSegmentsCount:null==s?void 0:s.length,newPathsCount:i}),this.eraserOperationActive)return this.eraserOperationChanges.push({pathIndex:t,originalSegments:e?[...e]:null,newSegments:s?[...s]:null,originalPath:o?JSON.parse(JSON.stringify(o)):null,newPathsCount:i,timestamp:Date.now()}),void console.log("消しゴム操作中 - 変更を蓄積:",this.eraserOperationChanges.length);const n={pathIndex:t,originalSegments:e?[...e]:null,newSegments:s?[...s]:null,originalPath:o?JSON.parse(JSON.stringify(o)):null,newPathsCount:i,timestamp:Date.now()};this.segmentHistory.push(n),this.lastOperationType="segment",this.segmentRedoStack=[],console.log("セグメント履歴に保存完了:",{segmentHistoryLength:this.segmentHistory.length,savedChange:n})}finishEraserOperation(){if(0===this.eraserOperationChanges.length)return void(this.eraserOperationActive=!1);console.log("消しゴム操作完了 - まとめて履歴に保存:",this.eraserOperationChanges.length);const t={pathIndex:-1,originalSegments:null,newSegments:null,originalPath:null,newPathsCount:0,eraserOperationChanges:[...this.eraserOperationChanges],timestamp:Date.now()};this.segmentHistory.push(t),this.lastOperationType="segment",this.segmentRedoStack=[],console.log("消しゴム操作の統合履歴保存完了:",{segmentHistoryLength:this.segmentHistory.length,lastOperationType:this.lastOperationType,eraserChangesCount:this.eraserOperationChanges.length}),this.eraserOperationActive=!1,this.eraserOperationChanges=[],console.log("消しゴム操作の統合履歴保存完了")}restoreLineSegmentState(t){if(console.log("セグメント状態を復元:",t),t.eraserOperationChanges){console.log("統合された消しゴム操作を復元:",t.eraserOperationChanges.length);for(let e=t.eraserOperationChanges.length-1;e>=0;e--){const s=t.eraserOperationChanges[e];s.originalPath&&(this.allPaths.splice(s.pathIndex,s.newPathsCount),this.allPaths.splice(s.pathIndex,0,s.originalPath))}return console.log("統合された消しゴム操作の復元完了"),!0}if(-1===t.pathIndex)return console.log("消しゴム操作データ（無効な操作）をスキップ"),!1;if(!t||"number"!=typeof t.pathIndex)return console.warn("無効なセグメント変更データ:",t),!1;if(t.pathIndex>=this.allPaths.length)return console.warn("復元対象のパスインデックスが範囲外:",t.pathIndex,"allPathsLength:",this.allPaths.length),!1;if(t.originalPath){console.log("元のパス情報から復元:",{pathIndex:t.pathIndex,newPathsCount:t.newPathsCount||1});const e=t.newPathsCount||1;return this.allPaths.splice(t.pathIndex,e),this.allPaths.splice(t.pathIndex,0,t.originalPath),console.log("パス復元完了:",{restoredPath:t.originalPath.tool,newAllPathsLength:this.allPaths.length}),!0}if(t.originalSegments&&t.originalSegments.length>0){console.log("セグメントから再構築（フォールバック）:",{pathIndex:t.pathIndex,originalSegmentsCount:t.originalSegments.length});const e=t.newPathsCount||1;this.allPaths.splice(t.pathIndex,e);const s=this.reconstructPathsFromSegments(t.originalSegments);return this.allPaths.splice(t.pathIndex,0,...s),console.log("パス再構築完了:",{reconstructedPathsCount:s.length,newAllPathsLength:this.allPaths.length}),!0}return console.warn("復元するデータがありません"),!1}reconstructPathsFromSegments(t){if(!t||0===t.length)return[];console.log("セグメントからパス再構築開始:",{segmentsCount:t.length});const e={},s=[];t.forEach(t=>{t.side?(e[t.side]||(e[t.side]=[]),e[t.side].push(t)):s.push(t)});const o=[];if(Object.keys(e).forEach(t=>{const s=e[t];if(0===s.length)return;const i=this.combineSegmentsToLines(s);o.push(...i)}),s.length>0){const t=this.combineSegmentsToLines(s);o.push(...t)}return console.log("パス再構築完了:",{reconstructedPathsCount:o.length}),o}combineSegmentsToLines(t){if(0===t.length)return[];t.sort((t,e)=>Math.sqrt(t.start.x*t.start.x+t.start.y*t.start.y)-Math.sqrt(e.start.x*e.start.x+e.start.y*e.start.y));const e=[];let s=null;for(const o of t)if(s){Math.sqrt(Math.pow(s.endPoint.x-o.start.x,2)+Math.pow(s.endPoint.y-o.start.y,2))<5?s.endPoint=a({},o.end):(e.push(s),s={tool:"line",startPoint:a({},o.start),endPoint:a({},o.end),strokeColor:o.strokeColor||"#000000",strokeWidth:o.strokeWidth||2})}else s={tool:"line",startPoint:a({},o.start),endPoint:a({},o.end),strokeColor:o.strokeColor||"#000000",strokeWidth:o.strokeWidth||2};return s&&e.push(s),e}undo(){var t;console.log("Undo実行前の状態:",{allPathsLength:this.allPaths.length,redoStackLength:this.redoStack.length,segmentHistoryLength:this.segmentHistory.length,segmentRedoStackLength:this.segmentRedoStack.length,lastOperationType:this.lastOperationType});let e=!1;if("eraser"===this.lastOperationType&&this.eraserHistory.length>0){console.log("消しゴム操作をundo");const s=this.eraserHistory.pop();if(console.error("消しゴム操作をundo中:",s),"fullDelete"===s.operationType)if(this.eraserRedoStack.push({operationType:"fullDelete",deletedPath:a({},s.deletedPath),deleteIndex:s.deleteIndex,allPathsSnapshot:s.allPathsSnapshot?s.allPathsSnapshot.map(t=>a({},t)):null,deletedIndices:s.deletedIndices?[...s.deletedIndices]:null,timestamp:Date.now()}),s.allPathsSnapshot&&s.deletedIndices)console.error("全体スナップショットを使用した正確な復元を実行"),this.allPaths=s.allPathsSnapshot.map(t=>a({},t)),console.error("正確な復元完了:",{restoredPathsCount:this.allPaths.length,restoredPath:s.deletedPath.tool,originalIndex:s.deleteIndex});else{console.error("フォールバック: 従来方式での復元");let t=s.deleteIndex;if(s.deletedIndices&&s.deletedIndices.length>1){const e=s.deletedIndices.filter(t=>t>s.deleteIndex).length;t=s.deleteIndex-(s.deletedIndices.length-e-1)}t<0&&(t=0),t>this.allPaths.length&&(t=this.allPaths.length),this.allPaths.splice(t,0,s.deletedPath),console.error("フォールバック復元完了:",{originalIndex:s.deleteIndex,adjustedIndex:t,pathTool:s.deletedPath.tool})}else"partialDelete"===s.operationType&&(this.eraserRedoStack.push({operationType:"partialDelete",originalPath:a({},s.originalPath),modifiedPaths:s.modifiedPaths.map(t=>a({},t)),pathIndex:s.pathIndex,allPathsSnapshot:s.allPathsSnapshot?s.allPathsSnapshot.map(t=>a({},t)):null,timestamp:Date.now()}),s.allPathsSnapshot?(console.error("全体スナップショットを使用した部分削除の正確な復元"),this.allPaths=s.allPathsSnapshot.map(t=>a({},t)),console.error("部分削除の正確な復元完了:",{restoredPathsCount:this.allPaths.length,restoredPath:s.originalPath.tool,pathIndex:s.pathIndex})):(console.error("フォールバック: 従来方式での部分削除復元"),s.pathIndex<this.allPaths.length?(this.allPaths[s.pathIndex],this.allPaths.splice(s.pathIndex,1),this.allPaths.splice(s.pathIndex,0,a({},s.originalPath)),console.error("フォールバック部分削除復元:",{pathIndex:s.pathIndex,pathTool:s.originalPath.tool,pathLength:null==(t=s.originalPath.path)?void 0:t.length})):console.error("部分削除パス復元エラー: インデックスが範囲外",{pathIndex:s.pathIndex,allPathsLength:this.allPaths.length})));this.redoStack=[],this.segmentRedoStack=[],this.lastOperationType=this.eraserHistory.length>0?"eraser":this.segmentHistory.length>0?"segment":this.allPaths.length>0?"path":null,e=!0}else if("segment"===this.lastOperationType&&this.segmentHistory.length>0){console.log("セグメント変更をundo（1つずつ復元）");const t=this.segmentHistory.pop(),s={pathIndex:t.pathIndex,originalSegments:t.newSegments?[...t.newSegments]:null,newSegments:t.originalSegments?[...t.originalSegments]:null,timestamp:Date.now()};this.segmentRedoStack.push(s),this.restoreLineSegmentState(t)&&(e=!0,this.segmentHistory.length>0?(this.lastOperationType="segment",console.log("セグメント変更のundo完了 - 残りセグメント履歴:",this.segmentHistory.length)):(this.lastOperationType=this.allPaths.length>0?"path":null,console.log("全セグメント履歴復元完了 - 次回は通常のパス削除順序")))}else if(!e&&this.allPaths.length>0){console.log("パスをundo（メイン処理またはフォールバック）");const t=this.allPaths.pop();this.redoStack.push(t),this.lastOperationType=this.allPaths.length>0?"path":null,e=!0}else console.log("undo可能な操作がありません");e?(this.updateUndoRedoButtons(),this.redrawCanvas()):console.log("何もundoしませんでした")}redo(){console.log("Redo実行前の状態:",{redoStackLength:this.redoStack.length,segmentRedoStackLength:this.segmentRedoStack.length,eraserRedoStackLength:this.eraserRedoStack.length,lastOperationType:this.lastOperationType});let t=!1;if("eraser"===this.lastOperationType&&this.eraserRedoStack.length>0){console.log("消しゴム操作をredo（最後の操作が消しゴムの場合）");const e=this.eraserRedoStack.pop();if("fullDelete"===e.operationType){console.error("消しゴム操作: 一つのオブジェクトを再削除"),this.eraserHistory.push({type:"eraserOperation",operationType:"fullDelete",deletedPath:a({},e.deletedPath),deleteIndex:e.deleteIndex,allPathsSnapshot:e.allPathsSnapshot?e.allPathsSnapshot.map(t=>a({},t)):null,deletedIndices:e.deletedIndices?[...e.deletedIndices]:null,timestamp:Date.now()});const s=e.deletedPath;let o=0;for(let t=this.allPaths.length-1;t>=0;t--){const i=this.allPaths[t];if(this.pathsAreEqual(i,s)){this.allPaths.splice(t,1),o++,console.error("一つずつ再削除完了:",{deletedIndex:t,originalIndex:e.deleteIndex,pathTool:s.tool});break}}0===o?(console.error("再削除対象が見つからないため、消しゴムredoをスキップ:",s.tool),t=this.tryNextRedo()):t=!0}else if("partialDelete"===e.operationType){console.error("消しゴム操作: 一つの部分削除を再適用"),this.eraserHistory.push({type:"eraserOperation",operationType:"partialDelete",originalPath:a({},e.originalPath),modifiedPaths:e.modifiedPaths.map(t=>a({},t)),pathIndex:e.pathIndex,allPathsSnapshot:e.allPathsSnapshot?e.allPathsSnapshot.map(t=>a({},t)):null,timestamp:Date.now()});const s=e.originalPath;let o=0;for(let t=0;t<this.allPaths.length;t++){const i=this.allPaths[t];if(this.pathsAreEqual(i,s)){this.allPaths.splice(t,1,...e.modifiedPaths),o++,console.error("一つずつ部分削除再適用完了:",{modifiedIndex:t,originalTool:s.tool,newPathsCount:e.modifiedPaths.length});break}}0===o?(console.error("部分削除再適用対象が見つからないため、消しゴムredoをスキップ:",s.tool),t=this.tryNextRedo()):t=!0}t&&console.log("消しゴム操作のredo完了（一つずつ処理）")}else t=this.tryNextRedo();t?(this.updateUndoRedoButtons(),this.redrawCanvas()):console.log("redo可能な操作がありません")}tryNextRedo(){if(this.segmentRedoStack.length>0){console.log("セグメント変更をredo");const t=this.segmentRedoStack.pop();if(-1===t.pathIndex)return console.log("消しゴム操作データをスキップして次の操作を試行"),this.tryNextRedo();const e={pathIndex:t.pathIndex,originalSegments:t.newSegments?[...t.newSegments]:null,newSegments:t.originalSegments?[...t.originalSegments]:null,timestamp:Date.now()};if(this.segmentHistory.push(e),this.restoreLineSegmentState(t))return this.lastOperationType="segment",console.log("セグメント変更のredo完了"),!0}else{if(this.redoStack.length>0){console.log("通常パスをredo（一つずつ復元）");const t=this.redoStack.pop();return this.allPaths.push(t),this.lastOperationType="path",!0}if(this.eraserRedoStack.length>0){console.log("残存する消しゴム操作をredo（fallback）");const t=this.eraserRedoStack.pop();return console.warn("消しゴムredo（fallback）をスキップ - 対象が存在しない可能性:",t.operationType),this.tryNextRedo()}}return!1}pathsAreEqual(t,e){if(!t||!e)return!1;if(t.tool!==e.tool||t.strokeColor!==e.strokeColor||t.strokeWidth!==e.strokeWidth)return!1;switch(t.tool){case"pen":return JSON.stringify(t.path)===JSON.stringify(e.path);case"line":case"rectangle":case"circle":case"door":case"stairs":return t.startPoint&&e.startPoint&&t.endPoint&&e.endPoint&&t.startPoint.x===e.startPoint.x&&t.startPoint.y===e.startPoint.y&&t.endPoint.x===e.endPoint.x&&t.endPoint.y===e.endPoint.y;case"textbox":return t.x===e.x&&t.y===e.y&&t.width===e.width&&t.height===e.height&&t.text===e.text;default:return JSON.stringify(t)===JSON.stringify(e)}}replaceLastStroke(t){this.allPaths.length>0&&(this.allPaths[this.allPaths.length-1]=t,this.redrawCanvas())}resize(){this.canvas.getBoundingClientRect(),this.setupHighDPI(),this.redrawCanvas()}optimizePaths(){if(this.allPaths.length<2)return;const t=this.allPaths.length,e=[];let s=null;this.allPaths.forEach(t=>{"pen"===t.tool&&s&&s.strokeColor===t.strokeColor&&s.strokeWidth===t.strokeWidth?s.path.push(...t.path):(s&&e.push(s),s=a({},t))}),s&&e.push(s),this.allPaths=e;const o=this.allPaths.length,i=t-o;i>0&&console.log(`🚀 自動最適化実行: ${t} → ${o} パス (${i}個統合)`)}on(t,e){this.eventListeners[t]||(this.eventListeners[t]=[]),this.eventListeners[t].push(e)}emit(t,e){this.eventListeners[t]&&this.eventListeners[t].forEach(t=>t(e))}getLineSegmentsHalfGrid(t){const e=[],s=this.gridSize/2,o=t.startPoint,i=t.endPoint,n=i.x-o.x,a=i.y-o.y,r=Math.sqrt(n*n+a*a);if(0===r)return e;const l=180*Math.abs(Math.atan2(a,n))/Math.PI;let h=s;l>=35&&l<=55&&(h=s*Math.sqrt(2));const c=n/r,d=a/r,x=Math.max(1,Math.ceil(r/h)),g=r/x;for(let u=0;u<x;u++){const t=u*g,s=Math.min((u+1)*g,r),i={x:o.x+c*t,y:o.y+d*t},n={x:o.x+c*s,y:o.y+d*s};e.push({start:i,end:n,index:u,length:s-t,distance:t})}return e}getRectangleSegmentsHalfGrid(t){const e=[],s=this.gridSize/2,o=t.startPoint,i=t.endPoint,n={x:Math.min(o.x,i.x),y:Math.min(o.y,i.y)},a={x:Math.max(o.x,i.x),y:Math.min(o.y,i.y)},r={x:Math.min(o.x,i.x),y:Math.max(o.y,i.y)},l={x:Math.max(o.x,i.x),y:Math.max(o.y,i.y)};return[{start:n,end:a,side:"top"},{start:a,end:l,side:"right"},{start:l,end:r,side:"bottom"},{start:r,end:n,side:"left"}].forEach(t=>{const o=t.end.x-t.start.x,i=t.end.y-t.start.y,n=Math.sqrt(o*o+i*i);if(0===n)return;const a=o/n,r=i/n;for(let l=0;l<n;l+=s){const o={x:t.start.x+a*l,y:t.start.y+r*l},i={x:t.start.x+a*Math.min(l+s,n),y:t.start.y+r*Math.min(l+s,n)};e.push({start:o,end:i,side:t.side,originalEdge:t})}}),e}removeLineSegmentsHalfGrid(t,e){const s=this.getLineSegmentsHalfGrid(t),o=new Set(e),i=[];let n=[];for(let a=0;a<s.length;a++)o.has(a)?n.length>0&&(i.push([...n]),n=[]):n.push(s[a]);n.length>0&&i.push(n);const r=[];for(const l of i){if(0===l.length)continue;const e=l[0],s=l[l.length-1],o={tool:"line",startPoint:a({},e.start),endPoint:a({},s.end),strokeColor:t.strokeColor,strokeWidth:t.strokeWidth};Math.sqrt(Math.pow(o.endPoint.x-o.startPoint.x,2)+Math.pow(o.endPoint.y-o.startPoint.y,2))>1&&r.push(o)}return r}removeRectangleSegmentsHalfGrid(t,e){const s=this.getRectangleSegmentsHalfGrid(t).filter((t,s)=>!e.includes(s)),o={top:[],right:[],bottom:[],left:[]};s.forEach(t=>{o[t.side].push(t)});const i=[];return Object.keys(o).forEach(e=>{const s=o[e];if(0===s.length)return;let n=null;for(const o of s)if(n){Math.sqrt(Math.pow(n.endPoint.x-o.start.x,2)+Math.pow(n.endPoint.y-o.start.y,2))<this.gridSize/4?n.endPoint=a({},o.end):(i.push(n),n={tool:"line",startPoint:a({},o.start),endPoint:a({},o.end),strokeColor:t.strokeColor,strokeWidth:t.strokeWidth})}else n={tool:"line",startPoint:a({},o.start),endPoint:a({},o.end),strokeColor:t.strokeColor,strokeWidth:t.strokeWidth};n&&i.push(n)}),i}setDoorType(t){this.doorType=t,console.log(`扉の種類を変更: ${t}`)}setDoorWidth(t){const e=this.gridSize/4;this.doorWidth=Math.round(t/e)*e,console.log(`扉の幅を変更: ${this.doorWidth}px (0.25マス単位調整済み)`)}getDoorTypes(){return[{value:"smallbox",label:"開口部"},{value:"single",label:"片開き戸"},{value:"double",label:"両開き戸"}]}setLineStyle(t){this.lineStyle=t,console.log(`線スタイルを変更: ${t}`)}setLineDashed(t){this.lineStyle=t?"dashed":"solid",console.log(`線スタイルを変更: ${this.lineStyle}`)}setLineArrow(t){this.lineStyle=t?"arrow":"solid",console.log(`線スタイルを変更: ${this.lineStyle}`)}get isDashed(){return"dashed"===this.lineStyle}get hasArrow(){return"arrow"===this.lineStyle}setStairSize(t){const e=this.stairWidth;switch(t){case"small":this.stairWidth=.5*this.gridSize;break;case"large":this.stairWidth=1.5*this.gridSize;break;default:this.stairWidth=1*this.gridSize}console.log("階段サイズ変更詳細:",{size:t,gridSize:this.gridSize,previousWidth:e,newWidth:this.stairWidth,calculation:`${this.gridSize} * ${"small"===t?.5:"large"===t?1.5:1} = ${this.stairWidth}`,gridUnits:this.stairWidth/this.gridSize+"マス"})}setStairWidth(t){const e=this.gridSize/4;this.stairWidth=Math.round(t/e)*e,console.log(`階段の横線長さを変更: ${this.stairWidth}px (0.25マス単位調整済み)`)}getStairWidth(){return this.stairWidth}drawArrowHead(t,e,s,o,i,n=10){const a=o-e,r=i-s,l=Math.atan2(r,a),h=Math.max(n,3*t.lineWidth),c=Math.PI/6,d=o-h*Math.cos(l-c),x=i-h*Math.sin(l-c),g=o-h*Math.cos(l+c),u=i-h*Math.sin(l+c);t.save(),t.setLineDash([]),t.beginPath(),t.moveTo(o,i),t.lineTo(d,x),t.moveTo(o,i),t.lineTo(g,u),t.stroke(),t.restore()}getArrowHeadRegion(t,e,s=10){const o=e.x-t.x,i=e.y-t.y,n=Math.sqrt(o*o+i*i);if(0===n)return null;const a=Math.max(s,.1*n),r=a/n,l=e.x-o*r,h=e.y-i*r;return{tip:{x:e.x,y:e.y},base:{x:l,y:h},length:a}}isPointInArrowHead(t,e,s=0){if(!e)return!1;return this.distanceToLineSegment(t,e.base,e.tip)<=e.length/2+s}isSegmentInArrowHead(t,e){if(!e)return!1;const s=this.isPointInArrowHead(t.start,e,5),o=this.isPointInArrowHead(t.end,e,5);return s||o}distanceToLineSegment(t,e,s){const o=t.x-e.x,i=t.y-e.y,n=s.x-e.x,a=s.y-e.y,r=n*n+a*a;let l,h,c=-1;0!==r&&(c=(o*n+i*a)/r),c<0?(l=e.x,h=e.y):c>1?(l=s.x,h=s.y):(l=e.x+c*n,h=e.y+c*a);const d=t.x-l,x=t.y-h;return Math.sqrt(d*d+x*x)}getDrawingBounds(){if(0===this.allPaths.length)return null;let t=1/0,e=1/0,s=-1/0,o=-1/0;return this.allPaths.forEach(i=>{"pen"===i.tool?i.path.forEach(i=>{t=Math.min(t,i.x),e=Math.min(e,i.y),s=Math.max(s,i.x),o=Math.max(o,i.y)}):"textbox"===i.tool?(t=Math.min(t,i.x),e=Math.min(e,i.y),s=Math.max(s,i.x+i.width),o=Math.max(o,i.y+i.height)):i.startPoint&&i.endPoint&&(t=Math.min(t,i.startPoint.x,i.endPoint.x),e=Math.min(e,i.startPoint.y,i.endPoint.y),s=Math.max(s,i.startPoint.x,i.endPoint.x),o=Math.max(o,i.startPoint.y,i.endPoint.y))}),{minX:t,minY:e,maxX:s,maxY:o,width:s-t,height:o-e}}exportToImage(t="png",e=.95){return r(this,null,function*(){try{console.log("🖼️ 画像エクスポート開始（PDF完全準拠）:",t);const s=210,o=297,i=15,n=20,a=(s-2*i)/(o-2*i-n),r=22,l=Math.round(r*a),h=l*this.gridSize,c=r*this.gridSize,d=-h/2,x=-c/2;console.log("キャプチャ範囲（PDF準拠）:",{"マス数":{width:l,height:r},"ピクセル":{width:h,height:c},"アスペクト比":(h/c).toFixed(3),"PDF最適比":a.toFixed(3)});const g=300/25.4,u=Math.round(s*g),p=Math.round(o*g),y=Math.round(i*g),m=Math.round(n*g),v=document.createElement("canvas"),f=v.getContext("2d",{alpha:!1,willReadFrequently:!0});v.width=u,v.height=p,f.fillStyle="#ffffff",f.fillRect(0,0,u,p),yield this.drawImageHeader(f,u,y,m,g);const P=document.createElement("canvas"),w=P.getContext("2d",{alpha:!1,willReadFrequently:!0}),S=4096,T=Math.min(h,S),k=Math.min(c,S);P.width=T,P.height=k,w.fillStyle="white",w.fillRect(0,0,T,k),w.setTransform(1,0,0,1,0,0),w.imageSmoothingEnabled=!0,w.imageSmoothingQuality="high",this.drawGridOnContext(w,T,k),this.redrawPathsOnContext(w,d,x,T,k);const I=P.toDataURL("image/png",.95),M=u-2*y,C=p-2*y-m-0,b=M/h,E=C/c,L=Math.min(b,E),B=h*L,D=c*L,z=y+(M-B)/2,W=y+m+(C-D)/2;console.log("配置情報（PDF準拠）:",{"キャプチャサイズ":{width:h,height:c},"利用可能エリア":{width:M,height:C},"スケール":{scaleX:b,scaleY:E,"使用":L},"最終サイズ":{width:B,height:D},"配置位置":{x:z,y:W}});const R=new Image;yield new Promise((t,e)=>{R.onload=()=>{f.drawImage(R,z,W,B,D),t()},R.onerror=e,R.src=I}),yield this.drawImageLogo(f,y,m,g,u,p),f.strokeStyle="#e26b0a",f.lineWidth=1*g;const O=y,A=y,F=u-2*y,H=m+D;f.strokeRect(O,A,F,H),console.log("オレンジ色枠線を画像に追加:",{color:"#e26b0a",lineWidth:1*g,frame:{x:O,y:A,width:F,height:H}});const $="jpg"===t?"image/jpeg":"image/png";return navigator.share&&navigator.canShare?yield this.shareImageViaAPI(v,$,e):this.downloadImage(v,$,e,t)}catch(s){return console.error("画像エクスポートエラー:",s),!1}})}drawImageHeader(t,e,s,o,i){return r(this,null,function*(){t.fillStyle="#0066cc",t.fillRect(s,s,e-2*s,o);const n=document.createElement("canvas"),a=n.getContext("2d"),r="間取り図";a.font='bold 18px "Noto Sans JP", "Hiragino Sans", "Yu Gothic", "Meiryo", sans-serif';const l=a.measureText(r).width;n.width=3*(l+20),n.height=90,a.scale(3,3),a.font='bold 18px "Noto Sans JP", "Hiragino Sans", "Yu Gothic", "Meiryo", sans-serif',a.fillStyle="#fccc9e",a.textAlign="left",a.textBaseline="top",a.imageSmoothingEnabled=!0,a.imageSmoothingQuality="high",a.clearRect(0,0,n.width/3,n.height/3),a.fillText(r,10,6),yield new Promise(t=>setTimeout(t,50));const h=n.toDataURL("image/png",1),c=.35*(l+20)*i,d=10.5*i,x=s+2*i,g=s+1*i,u=new Image;yield new Promise(e=>{u.onload=()=>{t.drawImage(u,x,g,c,d),e()},u.src=h});const p=12*i,y=s+o;t.strokeStyle="#99ccff",t.lineWidth=p,t.beginPath(),t.moveTo(s,y),t.lineTo(e-s,y),t.stroke(),console.log("PDFヘッダー完全再現完了:",{titleSize:{width:c,height:d},titlePosition:{x:x,y:g},lineThickness:p,linePosition:y})})}drawImageLogo(t,e,s,o,i,n){return r(this,null,function*(){try{const e=new Image;yield new Promise((t,s)=>{e.onload=t,e.onerror=s,e.src="/logo.png"});const s=15,i=s*o,n=e.width/e.height,a=i*n,r=210,l=297,h=10,c=5,d=r-h-s*n-c,x=l-h-s-c,g=d*o,u=x*o;t.drawImage(e,g,u,a,i),console.log("ロゴ画像を画像に追加しました（右下端配置）:",{logoSize:{width:a,height:i},logoPosition:{x:g,y:u},"配置詳細":{a4WidthMm:r,a4HeightMm:l,marginMm:h,logoMarginMm:c,logoWidthMm:s*n,logoHeightMm:s,mmToPx:o,"計算式":{logoXMm:`${r} - ${h} - ${s*n} - ${c} = ${d}`,logoYMm:`${l} - ${h} - ${s} - ${c} = ${x}`,logoX:`${d} * ${o} = ${g}`,logoY:`${x} * ${o} = ${u}`}}})}catch(e){console.warn("ロゴ画像の読み込みに失敗:",e.message)}})}shareImageViaAPI(t,e,s){return r(this,null,function*(){try{return console.log("🔄 Web Share API試行開始"),new Promise(o=>{t.toBlob(i=>r(this,null,function*(){if(!i)return console.error("画像データの生成に失敗"),void o(this.downloadImage(t,e,s,e.split("/")[1]));if(console.log("📱 ブラウザ情報:",{userAgent:navigator.userAgent,hasShare:!!navigator.share,hasCanShare:!!navigator.canShare}),navigator.share&&(/iPad/i.test(navigator.userAgent)||/iPhone/i.test(navigator.userAgent)))try{const t={files:[new File([i],`floor-plan-${Date.now()}.${e.split("/")[1]}`,{type:e,lastModified:Date.now()})],title:"間取り図",text:"作成した間取り図です"};if(console.log("📤 ネイティブ共有を試行:",t),!navigator.canShare||navigator.canShare(t))return yield navigator.share(t),console.log("✅ ネイティブ共有成功！"),void o(!0);console.warn("⚠️ canShare()がfalseを返しました")}catch(n){if(console.warn("❌ ネイティブ共有エラー:",{name:n.name,message:n.message}),"AbortError"===n.name)return console.log("ℹ️ ユーザーが共有をキャンセル"),void o(!1)}console.log("🔄 フォールバック実行"),o(this.downloadImage(t,e,s,e.split("/")[1]))}),e,s)})}catch(o){return console.error("❌ Web Share API全体エラー:",o),this.downloadImage(t,e,s,e.split("/")[1])}})}downloadImage(t,e,s,o){try{const i=t.toDataURL(e,s);if(/iPad|iPhone|iPod/i.test(navigator.userAgent))return this.showImageForSaving(i),!0;if("ontouchstart"in window)return this.triggerMobileDownload(i,o),!0;{const t=document.createElement("a");return t.download=`floor-plan-${(new Date).toISOString().slice(0,10)}.${o}`,t.href=i,document.body.appendChild(t),t.click(),document.body.removeChild(t),console.log("✅ 画像ダウンロード完了（デスクトップ）"),!0}}catch(i){return console.error("画像ダウンロードエラー:",i),!1}}showImageForSaving(t){const e=document.createElement("div");e.style.cssText="\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100vw;\n      height: 100vh;\n      background: rgba(0, 0, 0, 0.9);\n      z-index: 10000;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      padding: 20px;\n      box-sizing: border-box;\n    ";const s=document.createElement("div");s.style.cssText="\n      color: white;\n      font-size: 18px;\n      text-align: center;\n      margin-bottom: 20px;\n      line-height: 1.5;\n    ",s.textContent="画像を長押しして「画像を保存」を選択してください";const o=document.createElement("img");o.src=t,o.style.cssText="\n      max-width: 90%;\n      max-height: 70%;\n      border: 2px solid white;\n      border-radius: 8px;\n    ";const i=document.createElement("button");i.textContent="×",i.style.cssText="\n      position: absolute;\n      top: 20px;\n      right: 20px;\n      background: white;\n      border: none;\n      border-radius: 50%;\n      width: 40px;\n      height: 40px;\n      font-size: 24px;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    ",i.onclick=()=>{document.body.removeChild(e)},e.onclick=t=>{t.target===e&&document.body.removeChild(e)},e.appendChild(s),e.appendChild(o),e.appendChild(i),document.body.appendChild(e),console.log("✅ iPad用画像表示完了（長押しで保存）")}triggerMobileDownload(t,e){const s=document.createElement("a");s.href=t,s.download=`floor-plan-${(new Date).toISOString().slice(0,10)}.${e}`,s.style.display="none",document.body.appendChild(s);const o=new MouseEvent("click",{view:window,bubbles:!0,cancelable:!0});s.dispatchEvent(o),document.body.removeChild(s),console.log("✅ モバイル用ダウンロード実行")}exportToPDF(){return r(this,null,function*(){try{let d;console.log("PDF出力開始 - デバイス情報:",{userAgent:navigator.userAgent,platform:navigator.platform,isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)});try{d=(yield l(()=>import("./pdf-lib-COQB5Ng-.js").then(t=>t.j),[])).jsPDF,console.log("jsPDF動的インポート成功")}catch(t){if(console.warn("jsPDF動的インポート失敗、グローバル参照を試行:",t),window.jspdf&&window.jspdf.jsPDF)d=window.jspdf.jsPDF,console.log("jsPDFグローバル参照成功");else{if(!window.jsPDF)throw new Error("jsPDFライブラリが見つかりません");d=window.jsPDF,console.log("jsPDF直接参照成功")}}const x=new d({orientation:"portrait",unit:"mm",format:"a4"});console.log("PDF作成成功");const g=210,u=297,p=15,y=20,m=0;x.setFillColor(255,255,255),x.rect(0,0,g,u,"F"),yield this.addPDFHeader(x,g,p,y);const v=(g-2*p)/(u-2*p-y),f=22,P=Math.round(f*v),w=P*this.gridSize,S=f*this.gridSize;console.log("PDF キャプチャ範囲（最適化）:",{"マス数":{width:P,height:f},"ピクセル":{width:w,height:S},"アスペクト比":(w/S).toFixed(3),"PDF最適比":v.toFixed(3)});const T=-w/2,k=-S/2,I=document.createElement("canvas"),M=I.getContext("2d",{alpha:!1,willReadFrequently:!0}),C=4096,b=Math.min(w,C),E=Math.min(S,C);I.width=b,I.height=E,console.log("一時キャンバス作成:",{requestedSize:{width:w,height:S},actualSize:{width:b,height:E},context:M?"OK":"ERROR",contextAttributes:M.getContextAttributes()});try{M.fillStyle="white",M.fillRect(0,0,b,E),M.setTransform(1,0,0,1,0,0),M.imageSmoothingEnabled=!0,M.imageSmoothingQuality="high"}catch(e){throw console.error("キャンバス初期化エラー:",e),new Error("キャンバスの初期化に失敗しました")}try{this.drawGridOnContext(M,b,E),console.log("グリッド描画完了")}catch(s){console.warn("グリッド描画エラー:",s)}try{this.redrawPathsOnContext(M,T,k,b,E),console.log("パス描画完了")}catch(o){console.warn("パス描画エラー:",o)}let L;console.log("PDF用描画データ:",{pathCount:this.allPaths.length,captureArea:{startX:T,startY:k,width:w,height:S},canvasInfo:{canvasWidth:this.canvas.width,canvasHeight:this.canvas.height,translateX:this.translateX,translateY:this.translateY,scale:this.scale},samplePaths:this.allPaths.slice(0,3).map(t=>({type:t.type,tool:t.tool,start:t.startPoint,end:t.endPoint}))});try{if(!I)throw new Error("一時キャンバスがnullです");if(0===I.width||0===I.height)throw new Error(`一時キャンバスサイズが無効です: ${I.width}x${I.height}`);if(!M)throw new Error("一時キャンバスコンテキストが無効です");yield new Promise((t,e)=>{try{const e=M.getImageData(0,0,Math.min(10,I.width),Math.min(10,I.height));if(!e||!e.data)throw new Error("ImageDataの取得に失敗しました");console.log("ImageData取得テスト成功:",e.data.length),setTimeout(t,200)}catch(s){e(new Error("ImageData取得テストに失敗: "+s.message))}});const t=.95;try{if(L=I.toDataURL("image/png",t),!L||L.length<100)throw new Error("PNG生成結果が不正です");console.log("PNG生成成功 (方法1)")}catch(i){console.warn("PNG生成失敗 (方法1):",i);try{if(L=I.toDataURL("image/webp",t),!L||L.length<100)throw new Error("WebP生成結果が不正です");console.log("WebP生成成功 (方法2)")}catch(n){console.warn("WebP生成失敗 (方法2):",n);try{if(L=I.toDataURL("image/jpeg",t),!L||L.length<100)throw new Error("JPEG生成結果が不正です");console.log("JPEG生成成功 (方法3)")}catch(a){throw new Error(`全ての画像形式で生成失敗: PNG(${i.message}), WebP(${n.message}), JPEG(${a.message})`)}}}if(!L.startsWith("data:image/"))throw new Error("生成されたDataURLが無効です");console.log("画像生成最終成功:",{format:L.substring(5,L.indexOf(";")),size:L.length,canvasSize:{width:I.width,height:I.height}})}catch(r){throw console.error("画像生成完全失敗:",r),new Error("画像生成に失敗しました: "+r.message)}const B=w,D=S,z=g-2*p,W=u-2*p-y-m,R=z/B,O=W/D,A=Math.min(R,O);console.log("PDF スケーリング情報:",{"キャプチャサイズ":{width:B,height:D},"利用可能サイズ":{width:z,height:W},"スケール":{x:R,y:O,"選択":A},"最終サイズ":{width:B*A,height:D*A}});const F=B*A,H=D*A,$=p+(z-F)/2,N=p+y+(W-H)/2;console.log("PDF配置情報:",{"キャプチャサイズ":{width:B,height:D},"利用可能エリア":{width:z,height:W},"スケール":{scaleX:R,scaleY:O,"使用":A},"最終サイズ":{width:F,height:H},"配置位置":{x:$,y:N},"余白":{"左右":(z-F)/2,"上下":(W-H)/2}});let q="PNG";L.startsWith("data:image/jpeg")?q="JPEG":L.startsWith("data:image/webp")&&(q="WEBP"),console.log("PDF画像追加:",{format:q,size:{width:F,height:H}}),x.addImage(L,q,$,N,F,H),x.setDrawColor(226,107,10),x.setLineWidth(1);const j=p,G=p,Y=g-2*p,U=y+H;x.rect(j,G,Y,U),yield this.addPDFLogo(x,g,u,p,y,F,H);const X=new Date,J=`間取り図_${X.getFullYear()}${String(X.getMonth()+1).padStart(2,"0")}${String(X.getDate()).padStart(2,"0")}_${String(X.getHours()).padStart(2,"0")}${String(X.getMinutes()).padStart(2,"0")}.pdf`;try{if(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)){console.log("モバイル/タブレットデバイス検出");const t=x.output("blob");if(window.saveAs)window.saveAs(t,J);else if(navigator.share&&navigator.canShare&&navigator.canShare({files:[new File([t],J,{type:"application/pdf"})]})){const e=new File([t],J,{type:"application/pdf"});yield navigator.share({title:"間取り図PDF",files:[e]})}else{const e=URL.createObjectURL(t),s=document.createElement("a");s.href=e,s.download=J,s.style.display="none",document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(e)}}else x.save(J);console.log("PDF出力完了:",J),/iPad|iPhone|iPod/.test(navigator.userAgent)&&alert("PDFが作成されました。ダウンロードフォルダまたは共有メニューを確認してください。")}catch(h){console.error("PDF保存エラー:",h);try{x.save(J)}catch(c){throw new Error(`PDF保存に失敗しました: ${h.message}`)}}return!0}catch(d){return console.error("PDF出力エラー:",d),alert("PDF出力中にエラーが発生しました: "+d.message),!1}})}addPDFHeader(t,e,s,o){return r(this,null,function*(){t.setFillColor(0,102,204),t.rect(s,s,e-2*s,o,"F");const i=document.createElement("canvas"),n=i.getContext("2d"),a="間取り図";n.font='bold 18px "Noto Sans JP", "Hiragino Sans", "Yu Gothic", "Meiryo", sans-serif';const r=n.measureText(a).width;let l;i.width=3*(r+20),i.height=90,n.scale(3,3),n.font='bold 18px "Noto Sans JP", "Hiragino Sans", "Yu Gothic", "Meiryo", sans-serif',n.fillStyle="#fccc9e",n.textAlign="left",n.textBaseline="top",n.textRenderingOptimization="optimizeQuality",n.imageSmoothingEnabled=!0,n.imageSmoothingQuality="high",n.clearRect(0,0,i.width/3,i.height/3),n.fillText(a,10,6);try{if(!i||0===i.width||0===i.height)throw new Error("テキストキャンバスが無効です");if(yield new Promise(t=>setTimeout(t,50)),l=i.toDataURL("image/png",1),!l||!l.startsWith("data:image/png;base64,"))throw new Error("テキストPNG生成に失敗しました")}catch(d){console.error("テキストPNG生成エラー:",d);try{l=i.toDataURL("image/jpeg",.95)}catch(x){return console.error("テキストJPEG生成も失敗:",x),void console.warn("テキスト画像の追加をスキップします")}}const h=.35*(r+20),c=l.startsWith("data:image/png")?"PNG":"JPEG";t.addImage(l,c,s+2,s+1,h,10.5),t.setDrawColor(153,204,255),t.setLineWidth(12),t.line(s,s+o,e-s,s+o)})}addPDFFooter(t,e,s,o,i){const n=s-o-i;t.setFillColor(248,248,248),t.rect(o,n,e-2*o,i,"F"),t.setDrawColor(200,200,200),t.setLineWidth(.5),t.rect(o,n,e-2*o,i),t.setFontSize(10),t.setTextColor(100,100,100),t.setFont(void 0,"normal");const a="- 1 -",r=t.getTextWidth(a);t.text(a,(e-r)/2,n+8),t.setFontSize(8),t.setTextColor(120,120,120),t.text("平面図描画アプリ",o+5,n+8),t.setFontSize(8);const l="スケール: 自動調整",h=t.getTextWidth(l);t.text(l,e-o-h-5,n+8)}addPDFLogo(t,e,s,o,i,n,a){return r(this,null,function*(){try{const s=new Image;s.crossOrigin="anonymous";const o=()=>new Promise((t,e)=>{s.onload=()=>t(s),s.onerror=()=>e(new Error("ロゴ画像の読み込みに失敗しました")),s.src="/logo.png",setTimeout(()=>{e(new Error("ロゴ画像の読み込みがタイムアウトしました"))},5e3)});try{yield o();const e=15,i=e*(s.width/s.height),n=210,a=297,r=10,l=5,h=n-r-i-l,c=a-r-e-l,d=document.createElement("canvas"),x=d.getContext("2d");d.width=s.width,d.height=s.height,x.drawImage(s,0,0);const g=d.toDataURL("image/png");t.addImage(g,"PNG",h,c,i,e),console.log("ロゴ画像をPDFに追加しました（右下端配置）:",{logoSize:{width:i,height:e},logoPosition:{x:h,y:c},"配置詳細":{a4WidthMm:n,a4HeightMm:a,marginMm:r,logoMarginMm:l,"計算式":{logoX:`${n} - ${r} - ${i} - ${l} = ${h}`,logoY:`${a} - ${r} - ${e} - ${l} = ${c}`}}})}catch(e){console.warn("ロゴ画像の読み込みに失敗:",e.message)}}catch(s){console.error("ロゴ追加でエラーが発生:",s)}})}drawGridOnContext(t,e,s){if(!this.snapToGrid)return;t.save();const o=160;console.log("PDF グリッド描画:",{canvasSize:{width:e,height:s},gridSize:o,aspectRatio:e/s}),t.fillStyle="#cccccc";for(let a=40;a<e;a+=40)for(let e=40;e<s;e+=40)t.beginPath(),t.arc(a,e,1,0,2*Math.PI),t.fill();t.strokeStyle="#cccccc",t.lineWidth=.5,t.setLineDash([]);for(let a=80;a<e;a+=80)t.beginPath(),t.moveTo(a,0),t.lineTo(a,s),t.stroke();for(let a=80;a<s;a+=80)t.beginPath(),t.moveTo(0,a),t.lineTo(e,a),t.stroke();t.strokeStyle="#d0d0d0",t.lineWidth=1;for(let a=o;a<e;a+=o)t.beginPath(),t.moveTo(a,0),t.lineTo(a,s),t.stroke();for(let a=o;a<s;a+=o)t.beginPath(),t.moveTo(0,a),t.lineTo(e,a),t.stroke();const i=Math.floor(e/2/o)*o,n=Math.floor(s/2/o)*o;t.strokeStyle="#999999",t.lineWidth=3,i>0&&i<e&&(t.beginPath(),t.moveTo(i,0),t.lineTo(i,s),t.stroke()),n>0&&n<s&&(t.beginPath(),t.moveTo(0,n),t.lineTo(e,n),t.stroke()),t.restore()}redrawPathsOnContext(t,e,s,o,i){t.save(),t.beginPath(),t.rect(0,0,o,i),t.clip(),console.log(`PDF描画: ${this.allPaths.length}個のパスを処理中`),console.log(`キャプチャ範囲: x=${e}, y=${s}, w=${o}, h=${i}`);for(let n=0;n<this.allPaths.length;n++){const o=this.allPaths[n];console.log(`=== パス ${n} 詳細情報 ===`),console.log("完全なpathData:",JSON.stringify(o,null,2)),console.log("=================="),this.drawPathOnContext(t,o,e,s)}t.restore()}isPathInRange(t,e,s,o,i){if(!t)return!1;const n=e+o,a=s+i;return"freehand"===t.type&&t.points?t.points.some(t=>t.x>=e&&t.x<=n&&t.y>=s&&t.y<=a):!(!t.startPoint||!t.endPoint)&&(t.startPoint.x>=e&&t.startPoint.x<=n&&t.startPoint.y>=s&&t.startPoint.y<=a||t.endPoint.x>=e&&t.endPoint.x<=n&&t.endPoint.y>=s&&t.endPoint.y<=a)}drawPathOnContext(t,e,s,o){if(t.save(),t.strokeStyle=e.strokeColor||e.color||"#000000",t.lineWidth=e.strokeWidth||e.lineWidth||2,t.lineCap="round",t.lineJoin="round","pen"===e.tool&&e.path){if(console.log("ペンツール描画:",e.path.length,"点"),t.beginPath(),e.path.length>0){t.moveTo(e.path[0].x-s,e.path[0].y-o);for(let i=1;i<e.path.length;i++)t.lineTo(e.path[i].x-s,e.path[i].y-o)}t.stroke()}else if("line"===e.tool&&e.startPoint&&e.endPoint){const i=e.startPoint.x-s,n=e.startPoint.y-o,a=e.endPoint.x-s,r=e.endPoint.y-o,l=e.lineStyle||(e.isDashed?"dashed":e.hasArrow?"arrow":"solid");if(console.log(`直線描画: 線種=${l}, 元座標(${e.startPoint.x}, ${e.startPoint.y}) → PDF座標(${i}, ${n})`),"dashed"===l||e.isDashed){t.save();const e=20,s=15;t.setLineDash([e,s]),t.beginPath(),t.moveTo(i,n),t.lineTo(a,r),t.stroke(),t.setLineDash([]),t.restore(),console.log("点線描画完了（キャンバス版準拠）")}else"arrow"===l||e.hasArrow?(t.beginPath(),t.moveTo(i,n),t.lineTo(a,r),t.stroke(),this.drawArrowHeadOnContext(t,i,n,a,r),console.log("矢印描画完了（キャンバス版準拠）")):(t.beginPath(),t.moveTo(i,n),t.lineTo(a,r),t.stroke(),console.log("実線描画完了"))}else if("rectangle"===e.tool&&e.startPoint&&e.endPoint)console.log("四角形描画"),t.beginPath(),t.rect(e.startPoint.x-s,e.startPoint.y-o,e.endPoint.x-e.startPoint.x,e.endPoint.y-e.startPoint.y),t.stroke();else if("circle"===e.tool&&e.startPoint&&e.endPoint){console.log("円描画");const i=(e.startPoint.x+e.endPoint.x)/2-s,n=(e.startPoint.y+e.endPoint.y)/2-o,a=Math.sqrt(Math.pow(e.endPoint.x-e.startPoint.x,2)+Math.pow(e.endPoint.y-e.startPoint.y,2))/2;t.beginPath(),t.arc(i,n,a,0,2*Math.PI),t.stroke()}else if("door"===e.tool&&e.startPoint&&e.endPoint){console.log("🚪 扉描画開始:",{doorType:e.doorType,start:e.startPoint,end:e.endPoint,"調整後start":{x:e.startPoint.x-s,y:e.startPoint.y-o},"調整後end":{x:e.endPoint.x-s,y:e.endPoint.y-o},pathDataKeys:Object.keys(e),fullPathData:e}),e.doorType||(console.warn('⚠️ doorTypeが未定義です。デフォルト値"single"を使用します'),e.doorType="single"),t.save();const i={x:e.startPoint.x-s,y:e.startPoint.y-o},n={x:e.endPoint.x-s,y:e.endPoint.y-o};this.drawDoorOnContext(t,i,n,e),t.restore(),console.log("扉描画完了")}else if("stairs"===e.tool&&e.startPoint&&e.endPoint){console.log("階段描画"),t.save();const i={x:e.startPoint.x-s,y:e.startPoint.y-o},n={x:e.endPoint.x-s,y:e.endPoint.y-o};this.drawStairsOnContext(t,i,n,e),t.restore()}else if("textbox"===e.tool&&e.x&&e.y){console.log("テキストボックス描画:",e),t.save();const i=e.x-s,n=e.y-o;this.drawTextBoxOnContext(t,i,n,e),t.restore()}else if("line"===e.type&&e.startPoint&&e.endPoint)t.beginPath(),t.moveTo(e.startPoint.x-s,e.startPoint.y-o),t.lineTo(e.endPoint.x-s,e.endPoint.y-o),t.stroke();else if("rectangle"===e.type&&e.startPoint&&e.endPoint)t.beginPath(),t.rect(e.startPoint.x-s,e.startPoint.y-o,e.endPoint.x-e.startPoint.x,e.endPoint.y-e.startPoint.y),t.stroke();else if("circle"===e.type&&e.startPoint&&e.endPoint){const i=(e.startPoint.x+e.endPoint.x)/2-s,n=(e.startPoint.y+e.endPoint.y)/2-o,a=Math.sqrt(Math.pow(e.endPoint.x-e.startPoint.x,2)+Math.pow(e.endPoint.y-e.startPoint.y,2))/2;t.beginPath(),t.arc(i,n,a,0,2*Math.PI),t.stroke()}else if("freehand"===e.type&&e.points){if(t.beginPath(),e.points.length>0){t.moveTo(e.points[0].x-s,e.points[0].y-o);for(let i=1;i<e.points.length;i++)t.lineTo(e.points[i].x-s,e.points[i].y-o)}t.stroke()}t.restore()}drawDoorOnContext(t,e,s,o){console.log("🚪 扉描画メソッド呼び出し:",{start:e,end:s,doorType:o.doorType,pathDataKeys:Object.keys(o),strokeWidth:o.strokeWidth,strokeColor:o.strokeColor}),t.lineWidth=o.strokeWidth||2,t.strokeStyle=o.strokeColor||"#000000";const i=o.doorType||"single";console.log("🚪 扉タイプ確定:",i);const n=s.x-e.x,a=s.y-e.y;console.log("🚪 方向ベクトル:",{dx:n,dy:a});const r=80;let l,h,c;Math.abs(n)>Math.abs(a)?n>0?(c="horizontal-right",l={x:e.x,y:e.y},h={x:e.x+r,y:e.y}):(c="horizontal-left",l={x:e.x,y:e.y},h={x:e.x-r,y:e.y}):a>0?(c="vertical-down",l={x:e.x,y:e.y},h={x:e.x,y:e.y+r}):(c="vertical-up",l={x:e.x,y:e.y},h={x:e.x,y:e.y-r}),console.log("決定された方向:",c),console.log("扉の座標:",{doorStart:l,doorEnd:h});const d=c.startsWith("horizontal")?0:1,x=c.startsWith("vertical")?0:1;switch(console.log("描画処理開始:",i),i){case"single":case"single-right":this.drawSingleDoorOnContext(t,l,h,d,x,r,"right");break;case"double":this.drawDoubleDoorOnContext(t,l,h,d,x,r);break;case"smallbox":this.drawSmallBoxOnContext(t,l,h);break;case"single-left":this.drawSingleDoorOnContext(t,l,h,d,x,r,"left");break;default:console.log("未知の扉タイプ:",i),this.drawSingleDoorOnContext(t,l,h,d,x,r)}console.log("扉描画メソッド完了")}drawSingleDoorOnContext(t,e,s,o,i,n,a){console.log("🚪➡️ 片開き扉描画開始:",{start:e,end:s,perpDx:o,perpDy:i,width:n,direction:a});const r={x:Math.floor(e.x),y:Math.floor(e.y)},l={x:Math.floor(s.x),y:Math.floor(s.y)};t.save(),t.lineWidth=6,t.strokeStyle=this.getBackgroundColor(),t.beginPath(),t.moveTo(r.x,r.y),t.lineTo(l.x,l.y),t.stroke(),t.lineWidth=6,t.strokeStyle=this.getBackgroundColor(),t.beginPath(),t.moveTo(r.x,r.y),t.lineTo(l.x,l.y),t.stroke(),t.restore();const h="left"===a?l:r,c=n,d=Math.atan2(l.y-r.y,l.x-r.x);let x;x="left"===a?d+Math.PI/2:d-Math.PI/2,t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath(),t.arc(h.x,h.y,c,Math.min(d,x),Math.max(d,x)),t.stroke(),t.restore();const g=Math.floor(h.x+Math.cos(x)*c),u=Math.floor(h.y+Math.sin(x)*c);t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath(),t.moveTo(h.x,h.y),t.lineTo(g,u),t.stroke(),t.restore(),console.log("🚪➡️ 片開き扉描画完了")}drawDoubleDoorOnContext(t,e,s,o,i,n){console.log("🚪↔️ 両開き扉描画開始:",{start:e,end:s,perpDx:o,perpDy:i,width:n});const a={x:Math.floor(e.x),y:Math.floor(e.y)},r={x:Math.floor(s.x),y:Math.floor(s.y)};t.save(),t.lineWidth=6,t.strokeStyle=this.getBackgroundColor(),t.beginPath(),t.moveTo(a.x,a.y),t.lineTo(r.x,r.y),t.stroke(),t.restore();const l=Math.floor((a.x+r.x)/2),h=Math.floor((a.y+r.y)/2),c=n/2;t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath();t.moveTo(l+4*o,h+4*i),t.lineTo(l-4*o,h-4*i),t.stroke(),t.restore();const d=Math.atan2(r.y-a.y,r.x-a.x),x=c;t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath();const g=d-Math.PI/2;t.arc(a.x,a.y,x,Math.min(d,g),Math.max(d,g)),t.stroke(),t.restore(),t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath();const u=Math.floor(a.x+Math.cos(g)*x),p=Math.floor(a.y+Math.sin(g)*x);t.moveTo(a.x,a.y),t.lineTo(u,p),t.stroke(),t.restore(),t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath();const y=d+Math.PI,m=y+Math.PI/2;t.arc(r.x,r.y,x,Math.min(y,m),Math.max(y,m)),t.stroke(),t.restore(),t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath();const v=Math.floor(r.x+Math.cos(m)*x),f=Math.floor(r.y+Math.sin(m)*x);t.moveTo(r.x,r.y),t.lineTo(v,f),t.stroke(),t.restore(),console.log("🚪↔️ 両開き扉描画完了")}drawSmallBoxOnContext(t,e,s){console.log("📦 PDF用開口部描画開始:",{start:e,end:s});const o=this.gridSize/4,i=Math.floor(e.x),n=Math.floor(e.y);t.save(),t.fillStyle="rgba(200, 200, 200, 0.8)",t.fillRect(i,n,o,o),t.lineWidth=1,t.strokeStyle="#666666",t.strokeRect(i,n,o,o),t.restore(),console.log("📦 PDF用小箱描画完了:",{boxX:i,boxY:n,boxSize:o})}drawStairsOnContext(t,e,s,o){t.lineWidth=o.strokeWidth||2,t.strokeStyle=o.strokeColor||"#000000";const i=o.stairSteps||10,n=o.stairWidth||this.gridSize,a=s.x-e.x,r=s.y-e.y,l=Math.sqrt(a*a+r*r);if(0===l)return;const h=a/l,c=r/l,d=-c,x=h,g=n/2;t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(s.x,s.y),t.stroke();const u=Math.PI/6;t.beginPath(),t.moveTo(s.x,s.y),t.lineTo(s.x-15*Math.cos(Math.atan2(r,a)-u),s.y-15*Math.sin(Math.atan2(r,a)-u)),t.moveTo(s.x,s.y),t.lineTo(s.x-15*Math.cos(Math.atan2(r,a)+u),s.y-15*Math.sin(Math.atan2(r,a)+u)),t.stroke();const p=l/(i+1);for(let y=1;y<=i;y++){const s=y*p,o=e.x+h*s,i=e.y+c*s;t.beginPath(),t.moveTo(o+d*g,i+x*g),t.lineTo(o-d*g,i-x*g),t.stroke()}}drawTextBoxOnContext(t,e,s,o){console.log("PDF用テキストボックス描画:",{x:e,y:s,pathData:o});let i=o.width||100,n=o.height||40;const a=o.text||"",r=o.fontSize||14,l=o.fontFamily||"Arial, sans-serif",h=o.isVertical||!1,c=Math.max(4,.2*r),d=1.3*r;if(t.font=`${r}px ${l}`,a&&a.trim())if(h){const t=a.split("\n");let e=0,s=t.length;for(let i of t)e=Math.max(e,i.length);const o=e*r+2*c,l=s*r*1.2+2*c;n<o&&(n=o),i<l&&(i=l)}else{const e=a.split("\n");let s=[],o=0;for(let n of e){if(""===n){s.push("");continue}const e=n.split("");let a="";for(let n of e){const e=a+n;t.measureText(e).width>i-2*c&&""!==a?(s.push(a),o=Math.max(o,t.measureText(a).width),a=n):a=e}a&&(s.push(a),o=Math.max(o,t.measureText(a).width))}const r=s.length*d+2*c;n<r&&(n=r),i<o+2*c&&(i=o+2*c)}if(t.strokeStyle=o.strokeColor||"#CCCCCC",t.lineWidth=1,t.strokeRect(e,s,i,n),console.log("PDF用テキストボックス最終サイズ:",{x:e,y:s,width:i,height:n,"元サイズ":{width:o.width,height:o.height}}),a)if(t.fillStyle=o.textColor||o.strokeColor||"#000000",t.font=`${r}px ${l}`,h)this.drawVerticalTextPDF(t,a,e,s,i,n,r,c);else{t.textAlign="left",t.textBaseline="middle";const o=a.split("\n");let l=[];for(let e of o){if(""===e){l.push("");continue}const s=e.split("");let o="";for(let e of s){const s=o+e;t.measureText(s).width>i-2*c&&""!==o?(l.push(o),o=e):o=s}o&&l.push(o)}console.log("PDF横書きテキスト処理:",{"元テキスト":a,"入力行数":o.length,"処理後行数":l.length,"行内容":l});const h=l.length*d,x=s+(n-h)/2+r/2;l.forEach((o,i)=>{const a=e+c,l=x+i*d;console.log(`PDF横書き行${i}: "${o}" at (${a}, ${l})`),l-r/2>=s&&l+r/2<=s+n?t.fillText(o,a,l):console.log(`行${i}はボックス外のため描画スキップ`)})}}drawVerticalTextPDF(t,e,s,o,i,n,a,r=5){t.textAlign="center",t.textBaseline="middle",console.log("PDF縦書きテキスト描画開始（完全中央配置）:",{text:e,position:{x:s,y:o,width:i,height:n},fontSize:a,padding:r});const l=e.split("\n"),h=l.length,c=1.2*a,d=h*c,x=Math.max(...l.map(t=>t.length)),g=x*a,u=s+i/2,p=o+n/2,y=u+(d-c)/2,m=p-g/2;console.log("PDF縦書き完全中央配置計算:",{totalColumns:h,maxLineLength:x,totalTextWidth:d,totalTextHeight:g,centerX:u,centerY:p,startX:y,startY:m}),l.forEach((e,r)=>{const l=e.split(""),h=y-r*c;console.log(`PDF縦書き列${r}: "${e}" at columnX=${h}`),l.forEach((e,r)=>{const l=m+r*a+a/2;l-a/2>=o&&l+a/2<=o+n&&h-a/2>=s&&h+a/2<=s+i?(t.fillText(e,h,l),console.log(`PDF縦書き文字: "${e}" at (${h}, ${l})`)):console.log(`PDF縦書き文字 "${e}" はボックス外のため描画スキップ`)})}),console.log("PDF縦書きテキスト描画完了")}drawArrowHeadOnContext(t,e,s,o,i,n=10){const a=o-e,r=i-s,l=Math.atan2(r,a),h=Math.max(n,3*t.lineWidth),c=Math.PI/6,d=o-h*Math.cos(l-c),x=i-h*Math.sin(l-c),g=o-h*Math.cos(l+c),u=i-h*Math.sin(l+c);t.save(),t.setLineDash([]),t.beginPath(),t.moveTo(o,i),t.lineTo(d,x),t.moveTo(o,i),t.lineTo(g,u),t.stroke(),t.restore()}getProjectData(){return{version:"1.0",timestamp:(new Date).toISOString(),settings:{gridSize:this.gridSize,scale:this.scale,offsetX:this.offsetX,offsetY:this.offsetY,snapToGrid:this.snapToGrid},paths:this.allPaths.map(t=>{const e=a({},t);return delete e.isSelected,delete e.isPreview,delete e.tempData,e}),statistics:{totalPaths:this.allPaths.length,pathsByTool:this.getPathStatistics()}}}getPathStatistics(){const t={};return this.allPaths.forEach(e=>{const s=e.tool||"unknown";t[s]=(t[s]||0)+1}),t}loadFromData(t){if(t)try{this.allPaths=[],this.history=[],this.redoStack=[],this.segmentHistory=[],this.segmentRedoStack=[],t.paths&&Array.isArray(t.paths)&&(this.allPaths=[...t.paths]),t.settings&&(t.settings.gridSize&&this.setGridSize(t.settings.gridSize),void 0!==t.settings.scale&&this.setScale(t.settings.scale),void 0===t.settings.offsetX&&void 0===t.settings.offsetY||this.setOffset(t.settings.offsetX||0,t.settings.offsetY||0),void 0!==t.settings.snapToGrid&&this.setSnapToGrid(t.settings.snapToGrid)),this.redrawCanvas(),console.log(`プロジェクトデータを読み込みました: ${this.allPaths.length}個のパス`)}catch(e){throw console.error("プロジェクトデータの読み込みに失敗:",e),e}}clearSelection(){try{this.allPaths.forEach(t=>{t.isSelected&&(t.isSelected=!1)}),this.clearTextBoxSelection(),this.selectedPaths=[],this.isDragging=!1,this.isResizing=!1,console.log("選択状態をクリアしました")}catch(t){console.error("選択状態のクリア中にエラー:",t)}}getDefaultStrokeColor(){return"dark"===document.body.getAttribute("data-theme")?"#ffffff":"#000000"}getShapeColor(){return this.getDefaultStrokeColor()}getBackgroundColor(){return"dark"===document.body.getAttribute("data-theme")?"#000000":"#ffffff"}updateStrokeColorForTheme(){if(console.log("updateStrokeColorForTheme が呼び出されました"),console.log("現在のallPaths数:",this.allPaths.length),"#000000"===this.strokeColor||"#ffffff"===this.strokeColor){this.strokeColor=this.getDefaultStrokeColor(),console.log("ダークモード切り替えに応じて線色を更新:",this.strokeColor);const t=document.getElementById("stroke-color");t&&(t.value=this.strokeColor)}const t="dark"===document.body.getAttribute("data-theme"),e=t?"#000000":"#ffffff",s=t?"#ffffff":"#000000";console.log(`ダークモード: ${t}, ${e} → ${s} に変更予定`);let o=!1;this.allPaths.forEach((t,i)=>{console.log(`パス${i}: tool=${t.tool}, 現在色=${t.strokeColor}`),t.strokeColor===e&&(t.strokeColor=s,o=!0,console.log(`パス${i}の色を ${e} → ${s} に更新しました`))}),o?(console.log(`ダークモード切り替えで既存図形の色を ${e} → ${s} に更新`),this.redrawCanvas()):console.log("更新対象の図形がありませんでした")}calculatePolylineLength(t){if(!t||t.length<2)return 0;let e=0;for(let s=0;s<t.length-1;s++){const o=t[s+1].x-t[s].x,i=t[s+1].y-t[s].y;e+=Math.sqrt(o*o+i*i)}return e}updateUndoRedoButtons(){const t=document.getElementById("undo-btn"),e=document.getElementById("redo-btn"),s=this.allPaths.length>0||this.segmentHistory.length>0||this.eraserHistory.length>0,o=this.redoStack.length>0||this.segmentRedoStack.length>0||this.eraserRedoStack.length>0;t&&(t.disabled=!s,t.style.opacity=s?"1":"0.5"),e&&(e.disabled=!o,e.style.opacity=o?"1":"0.5"),console.log("Undo/Redoボタン状態更新:",{canUndo:s,canRedo:o})}clearAllHistory(){this.allPaths=[],this.redoStack=[],this.segmentHistory=[],this.segmentRedoStack=[],this.eraserHistory=[],this.eraserRedoStack=[],this.lastOperationType=null,this.operationHistory&&(this.operationHistory=[]),this.scale=1,this.translateX=this.canvas.width/2,this.translateY=this.canvas.height/2,this.ctx.setTransform(1,0,0,1,0,0),this.isDrawing=!1,this.currentPath=[],this.polylinePoints=[],this.isPolylineActive=!1,this.selectedTextBox=null,this.isResizing=!1,this.resizeHandle=null,this.showShapePreview=!1,this.showEraserPreview=!1,this.eraserPreviewCoords=null,this.previewEndPoint=null,this.updateUndoRedoButtons(),console.log("全履歴・状態クリア完了")}}class d{constructor(){this.currentTool="pen",this.tools={pen:{name:"ペン",cursor:"crosshair",mode:"freehand"},eraser:{name:"消しゴム",cursor:"crosshair",mode:"eraser"},line:{name:"直線",cursor:"crosshair",mode:"shape"},rectangle:{name:"四角形",cursor:"crosshair",mode:"shape"},door:{name:"扉",cursor:"crosshair",mode:"shape"},stairs:{name:"階段",cursor:"crosshair",mode:"shape"},circle:{name:"円",cursor:"crosshair",mode:"shape"},"text-horizontal":{name:"横書きテキスト",cursor:"text",mode:"text"},"text-vertical":{name:"縦書きテキスト",cursor:"text",mode:"text"}}}setTool(t){return!!this.tools[t]&&(this.currentTool=t,this.updateCursor(),!0)}getCurrentTool(){return this.currentTool}getToolInfo(t=null){const e=t||this.currentTool;return this.tools[e]}updateCursor(){const t=document.getElementById("drawing-canvas"),e=this.getToolInfo();t&&e&&(t.style.cursor=e.cursor)}isShapeTool(){const t=this.getToolInfo();return t&&"shape"===t.mode}isFreehandTool(){const t=this.getToolInfo();return t&&"freehand"===t.mode}}class x{constructor(){this.tolerance={line:25,circle:20,rectangle:25}}recognize(t){if(!t||t.length<3)return null;const e=this.recognizeLine(t);if(e&&e.confidence>.5)return e;const s=[this.recognizeCircle(t),this.recognizeRectangle(t)].filter(t=>null!==t).sort((t,e)=>e.confidence-t.confidence);return s.length>0&&s[0].confidence>.7?s[0]:null}recognizeLine(t){if(t.length<2)return null;let e=t[0],s=t[t.length-1];if(Math.sqrt(Math.pow(s.x-e.x,2)+Math.pow(s.y-e.y,2))<20)return null;const o=Math.abs(s.x-e.x),i=Math.abs(s.y-e.y),n=180*Math.atan2(i,o)/Math.PI;n<15||n>165?s={x:s.x,y:e.y}:n>75&&n<105&&(s={x:e.x,y:s.y});let a=0,r=0;for(let h=1;h<t.length-1;h++){const o=this.pointToLineDistance(t[h],e,s);a+=o,r=Math.max(r,o)}const l=a/(t.length-2);if(r<this.tolerance.line&&l<this.tolerance.line/1.5){return{type:"line",tool:"line",startPoint:e,endPoint:s,path:[e,s],strokeWidth:2,strokeColor:"#000000",confidence:Math.max(.5,1-l/this.tolerance.line)}}return null}recognizeCircle(t){if(t.length<10)return null;const e=this.getBounds(t),s=(e.minX+e.maxX)/2,o=(e.minY+e.maxY)/2,i=t.map(t=>Math.sqrt(Math.pow(t.x-s,2)+Math.pow(t.y-o,2))),n=i.reduce((t,e)=>t+e,0)/i.length,a=i.reduce((t,e)=>t+Math.pow(e-n,2),0)/i.length,r=Math.sqrt(a);if(r<this.tolerance.circle){if(Math.sqrt(Math.pow(t[0].x-t[t.length-1].x,2)+Math.pow(t[0].y-t[t.length-1].y,2))<.3*n)return{type:"circle",tool:"circle",startPoint:{x:s,y:o},endPoint:{x:s+n,y:o},path:t,strokeWidth:2,strokeColor:"#000000",confidence:1-r/this.tolerance.circle}}return null}recognizeRectangle(t){if(t.length<8)return null;const e=this.detectCorners(t);if(4===e.length){const s=this.getBounds(e);if(this.checkRectangularity(e))return{type:"rectangle",tool:"rectangle",startPoint:{x:s.minX,y:s.minY},endPoint:{x:s.maxX,y:s.maxY},path:t,strokeWidth:2,strokeColor:"#000000",confidence:.8}}return null}pointToLineDistance(t,e,s){const o=t.x-e.x,i=t.y-e.y,n=s.x-e.x,a=s.y-e.y,r=o*n+i*a,l=n*n+a*a;if(0===l)return Math.sqrt(o*o+i*i);let h=r/l;h=Math.max(0,Math.min(1,h));const c=e.x+h*n,d=e.y+h*a;return Math.sqrt(Math.pow(t.x-c,2)+Math.pow(t.y-d,2))}getBounds(t){let e=1/0,s=1/0,o=-1/0,i=-1/0;return t.forEach(t=>{e=Math.min(e,t.x),s=Math.min(s,t.y),o=Math.max(o,t.x),i=Math.max(i,t.y)}),{minX:e,minY:s,maxX:o,maxY:i}}detectCorners(t){const e=[],s=Math.PI/4;for(let o=1;o<t.length-1;o++){const i=t[o-1],n=t[o],a=t[o+1],r=Math.atan2(n.y-i.y,n.x-i.x),l=Math.atan2(a.y-n.y,a.x-n.x);let h=Math.abs(l-r);h>Math.PI&&(h=2*Math.PI-h),h>s&&e.push(n)}return e}checkRectangularity(t){if(4!==t.length)return!1;const e=[];for(let n=0;n<4;n++){const s=(n+1)%4;e.push({x:t[s].x-t[n].x,y:t[s].y-t[n].y})}const s=this.areVectorsParallel(e[0],e[2]),o=this.areVectorsParallel(e[1],e[3]),i=this.areVectorsPerpendicular(e[0],e[1]);return s&&o&&i}areVectorsParallel(t,e,s=.2){return Math.abs(t.x*e.y-t.y*e.x)<s*Math.sqrt(t.x*t.x+t.y*t.y)*Math.sqrt(e.x*e.x+e.y*e.y)}areVectorsPerpendicular(t,e,s=.2){return Math.abs(t.x*e.x+t.y*e.y)<s*Math.sqrt(t.x*t.x+t.y*t.y)*Math.sqrt(e.x*e.x+e.y*e.y)}}class g{constructor(){this.startScreen=document.getElementById("start-screen"),this.appElement=document.getElementById("app"),this.initializeEventListeners(),this.loadLastSession()}initializeEventListeners(){const t=document.getElementById("new-project-btn");t&&t.addEventListener("click",()=>{this.startNewProject()});const e=document.getElementById("continue-project-btn");e&&e.addEventListener("click",()=>{this.continueProject()});const s=document.getElementById("manual-link");s&&s.addEventListener("click",t=>{t.preventDefault(),this.showManual()}),document.addEventListener("keydown",t=>{this.startScreen&&!this.startScreen.classList.contains("hidden")&&("Enter"===t.key||" "===t.key?(t.preventDefault(),this.startNewProject()):"o"!==t.key&&"O"!==t.key||(t.preventDefault(),this.continueProject()))})}startNewProject(){console.log("新規プロジェクト開始"),this.clearExistingData(),this.hideStartScreen(),window.dispatchEvent(new CustomEvent("startNewProject"))}continueProject(){console.log("プロジェクト継続");const t=document.createElement("input");t.type="file",t.accept=".json,.png,.jpg,.jpeg",t.onchange=t=>{const e=t.target.files[0];e&&this.loadProjectFile(e)},t.click()}loadProjectFile(t){const e=new FileReader;"application/json"===t.type||t.name.endsWith(".json")?(e.onload=t=>{try{const e=JSON.parse(t.target.result);this.restoreProject(e)}catch(e){console.error("プロジェクトファイルの読み込みに失敗:",e),this.showError("プロジェクトファイルの形式が正しくありません。")}},e.readAsText(t)):(e.onload=t=>{this.loadImageAsBackground(t.target.result)},e.readAsDataURL(t))}restoreProject(t){console.log("プロジェクト復元:",t),this.hideStartScreen(),window.dispatchEvent(new CustomEvent("restoreProject",{detail:t}))}loadImageAsBackground(t){console.log("背景画像として読み込み"),this.hideStartScreen(),window.dispatchEvent(new CustomEvent("loadBackgroundImage",{detail:{imageUrl:t}}))}hideStartScreen(){this.startScreen&&this.startScreen.classList.add("hidden"),this.appElement&&(this.appElement.style.display="flex"),setTimeout(()=>{this.startScreen&&(this.startScreen.style.display="none")},300)}showStartScreen(){this.startScreen&&(this.startScreen.style.display="flex",this.startScreen.classList.remove("hidden")),this.appElement&&(this.appElement.style.display="none")}clearExistingData(){localStorage.removeItem("floorplan-autosave"),localStorage.removeItem("floorplan-paths"),localStorage.removeItem("floorplan-settings")}loadLastSession(){const t=localStorage.getItem("floorplan-autosave"),e=document.getElementById("continue-project-btn");if(e)if(t)try{const s=JSON.parse(t);if(s.paths&&s.paths.length>0){const t=e.querySelector(".option-content h3"),s=e.querySelector(".option-content p");t&&(t.textContent="前回の続きから"),s&&(s.textContent="前回の作業を復元して続きを作成"),e.classList.add("has-data")}}catch(s){console.log("前回のセッションデータが無効:",s)}else{const t=e.querySelector(".option-content p");t&&(t.textContent="ファイルを読み込んで続きを作成")}else console.warn("continue-project-btn要素が見つかりません")}showManual(){window.open("./manual.html","_blank")}showError(t){const e=document.createElement("div");e.className="error-message",e.textContent=t,e.style.cssText="\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: #ff4757;\n      color: white;\n      padding: 16px 24px;\n      border-radius: 8px;\n      z-index: 2000;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    ",document.body.appendChild(e),setTimeout(()=>{e.parentNode&&document.body.removeChild(e)},3e3)}}document.addEventListener("DOMContentLoaded",()=>{window.startScreen=new g});class u{constructor(){this.canvas=null,this.toolManager=null,this.shapeRecognizer=null,this.startScreen=null,this.isInitialized=!1,this.listenersSetup=!1,this.eventListenersSetup=!1,this.isDarkMode=this.loadDarkModePreference(),this.initDarkMode(),this.init()}init(){this.listenersSetup||(this.setupStartScreenListeners(),this.listenersSetup=!0),document.addEventListener("DOMContentLoaded",()=>{const t=document.getElementById("app");t&&(t.style.display="none")})}setupStartScreenListeners(){window.addEventListener("startNewProject",()=>{this.isInitialized?(this.resetCanvasState(),this.toolManager&&(this.toolManager.setTool("pen"),this.canvas.setTool("pen"),this.updateToolUI("pen"))):this.initializeDrawingApp()}),window.addEventListener("restoreProject",t=>{this.initializeDrawingApp(),this.restoreProjectData(t.detail)}),window.addEventListener("loadBackgroundImage",t=>{this.initializeDrawingApp(),this.loadBackgroundImage(t.detail.imageUrl)})}initializeDrawingApp(){if(this.isInitialized)return;const t=document.querySelector("#drawing-canvas").parentElement,e=document.querySelector("#drawing-canvas");e&&(console.error("既存のcanvas要素を削除します"),e.remove());const s=document.createElement("canvas");s.id="drawing-canvas",s.style.cssText=e?e.style.cssText:"cursor: crosshair; touch-action: none;",t.appendChild(s),console.error("新しいcanvas要素を作成しました"),this.canvas=new c("#drawing-canvas"),this.canvas.updateStrokeColorForTheme(),window.drawingCanvas=this.canvas,console.error("グローバル参照更新:",{newInstance:this.canvas}),this.toolManager=new d,this.shapeRecognizer=new x,this.toolManager.setTool("pen"),this.canvas.setTool("pen"),this.updateToolUI("pen"),this.setupEventListeners(),this.resizeCanvas(),window.addEventListener("resize",()=>this.resizeCanvas()),this.isInitialized=!0}setupEventListeners(){this.eventListenersSetup||(document.addEventListener("DOMContentLoaded",()=>{this.initializeToolButtons()}),"complete"!==document.readyState&&"interactive"!==document.readyState||this.initializeToolButtons(),this.eventListenersSetup=!0)}initializeToolButtons(){const t=document.getElementById("home-btn");t&&t.addEventListener("click",()=>{this.showConfirmDialog("ホームに戻る確認","保存せずにホームに戻ると、現在の作業内容は失われます。本当にホームに戻りますか？",()=>{this.resetToHome()},()=>{console.log("ホームへの移動をキャンセルしました")})});const e=document.getElementById("pen-tool");e?e.addEventListener("click",()=>{this.handleToolSwitch(),this.toolManager.setTool("pen"),this.canvas.setTool("pen"),this.updateToolButtons("pen-tool"),this.updateToolUI("pen")}):console.error("pen-tool button not found");const s=document.getElementById("eraser-tool");s?s.addEventListener("click",()=>{this.handleToolSwitch(),this.toolManager.setTool("eraser"),this.canvas.setTool("eraser"),this.updateToolButtons("eraser-tool"),this.updateToolUI("eraser")}):console.error("eraser-tool button not found");const o=document.getElementById("line-tool");o?o.addEventListener("click",()=>{this.handleToolSwitch(),this.toolManager.setTool("line"),this.canvas.setTool("line"),this.updateToolButtons("line-tool"),this.updateToolUI("line")}):console.error("line-tool button not found");const i=document.getElementById("polyline-grid-tool");i?i.addEventListener("click",()=>{this.handleToolSwitch(),this.toolManager.setTool("polyline-grid"),this.canvas.setTool("polyline-grid"),this.updateToolButtons("polyline-grid-tool"),this.updateToolUI("polyline-grid")}):console.error("polyline-grid-tool button not found");const n=document.getElementById("rect-tool");n?n.addEventListener("click",()=>{this.handleToolSwitch(),this.toolManager.setTool("rectangle"),this.canvas.setTool("rectangle"),this.updateToolButtons("rect-tool"),this.updateToolUI("rectangle")}):console.error("rect-tool button not found");const a=document.getElementById("door-tool");a?a.addEventListener("click",()=>{this.handleToolSwitch(),this.toolManager.setTool("door"),this.canvas.setTool("door"),this.canvas.setDoorType("smallbox");const t=document.getElementById("door-type");t&&(t.value="smallbox"),this.updateToolButtons("door-tool"),this.updateToolUI("door")}):console.error("door-tool button not found");const l=document.getElementById("stairs-tool");l?l.addEventListener("click",()=>{this.handleToolSwitch(),this.toolManager.setTool("stairs"),this.canvas.setTool("stairs"),this.updateToolButtons("stairs-tool"),this.updateToolUI("stairs"),this.canvas.setStairSize("medium")}):console.error("stairs-tool button not found");const h=document.getElementById("text-h-tool");h?(h.addEventListener("mousedown",t=>{this.canvas.textInput&&this.canvas.textInput.parentNode&&t.preventDefault()}),h.addEventListener("click",()=>{this.toolManager.setTool("text-horizontal"),this.canvas.setTool("text-horizontal"),this.updateToolButtons("text-h-tool"),this.updateToolUI("text-horizontal");if(this.canvas.textInput&&this.canvas.textInput.parentNode){const t=this.canvas.allPaths.find(t=>"textbox"===t.tool&&t.isSelected);if(!t||!t.isVertical)return void(t&&t.isVertical);this.canvas.removeCurrentTextBox()}this.canvas.clearTextBoxSelection();document.getElementById("drawing-canvas").getBoundingClientRect();const t=document.getElementById("drawing-canvas").getBoundingClientRect(),e=(t.width/2-this.canvas.translateX)/this.canvas.scale,s=(t.height/2-this.canvas.translateY)/this.canvas.scale,o=this.canvas.fontSize,i=12*o,n=2*o;this.canvas.createTextBoxAuto(e,s,i,n,!1)})):console.error("text-h-tool button not found");const c=document.getElementById("text-v-tool");c?(c.addEventListener("mousedown",t=>{this.canvas.textInput&&this.canvas.textInput.parentNode&&t.preventDefault()}),c.addEventListener("click",()=>{this.toolManager.setTool("text-vertical"),this.canvas.setTool("text-vertical"),this.updateToolButtons("text-v-tool"),this.updateToolUI("text-vertical");if(this.canvas.textInput&&this.canvas.textInput.parentNode){const t=this.canvas.allPaths.find(t=>"textbox"===t.tool&&t.isSelected);if(!t||t.isVertical)return void(t&&t.isVertical);this.canvas.removeCurrentTextBox()}this.canvas.clearTextBoxSelection();const t=document.getElementById("drawing-canvas").getBoundingClientRect(),e=(t.width/2-this.canvas.translateX)/this.canvas.scale,s=(t.height/2-this.canvas.translateY)/this.canvas.scale,o=this.canvas.fontSize,i=2*o,n=6*o;this.canvas.createTextBoxAuto(e,s,i,n,!0)})):console.error("text-v-tool button not found");const d=document.getElementById("clear-btn");d?d.addEventListener("click",()=>{this.canvas&&"function"==typeof this.canvas.clear&&this.showConfirmDialog("全消去の確認","描画内容をすべて消去します。この操作は元に戻せません。\n本当に実行しますか？",()=>{this.canvas.clear()},()=>{})}):console.error("clear-btn button not found");const x=document.getElementById("undo-btn");x?x.addEventListener("click",()=>{this.canvas&&"function"==typeof this.canvas.undo&&this.canvas.undo()}):console.error("undo-btn button not found");const g=document.getElementById("redo-btn");g?g.addEventListener("click",()=>{this.canvas&&"function"==typeof this.canvas.redo&&this.canvas.redo()}):console.error("redo-btn button not found"),document.addEventListener("keydown",t=>{t.ctrlKey&&"z"===t.key&&!t.shiftKey?(t.preventDefault(),this.canvas&&"function"==typeof this.canvas.undo&&this.canvas.undo()):t.ctrlKey&&"y"===t.key&&(t.preventDefault(),this.canvas&&"function"==typeof this.canvas.redo&&this.canvas.redo())}),this.setupPresetTextFeature();const u=document.getElementById("export-btn"),p=document.getElementById("export-menu"),y=document.getElementById("export-project-option"),m=document.getElementById("export-pdf-option"),v=document.getElementById("export-image-option"),f=document.getElementById("dark-mode-btn");console.log("エクスポート要素の確認:",{exportBtn:!!u,exportMenu:!!p,exportProjectOption:!!y,exportPdfOption:!!m,exportImageOption:!!v,darkModeBtn:!!f}),f&&(console.log("ダークモード機能を初期化します"),this.updateDarkModeButton(),f.addEventListener("click",()=>{console.log("ダークモード切り替えがクリックされました"),this.toggleDarkMode()})),u&&p&&y&&m&&v?(console.log("エクスポート機能を初期化します"),u.addEventListener("click",t=>{console.log("エクスポートボタンがクリックされました"),t.stopPropagation();const e="none"!==p.style.display;p.style.display=e?"none":"block",u.classList.toggle("active",!e)}),y.addEventListener("click",()=>r(this,null,function*(){console.log("プロジェクトデータ保存がクリックされました"),p.style.display="none",u.classList.remove("active"),this.handleToolSwitch(),yield this.exportProject()})),m.addEventListener("click",()=>r(this,null,function*(){console.log("PDF出力がクリックされました"),p.style.display="none",u.classList.remove("active"),this.handleToolSwitch(),yield this.canvas.exportToPDF()})),v.addEventListener("click",()=>r(this,null,function*(){console.log("画像出力がクリックされました"),p.style.display="none",u.classList.remove("active"),this.handleToolSwitch(),yield this.canvas.exportToImage("png",.95)})),document.addEventListener("click",()=>{p.style.display="none",u.classList.remove("active")}),p.addEventListener("click",t=>{t.stopPropagation()})):console.error("エクスポート関連の要素が見つかりません:",{exportBtn:!!u,exportMenu:!!p,exportProjectOption:!!y,exportPdfOption:!!m,exportImageOption:!!v}),this.initOfflineSupport();const P=document.getElementById("pen-width"),w=document.getElementById("pen-preview");document.getElementById("pen-width-control"),P&&w&&(this.updatePenPreview(P.value),P.addEventListener("input",t=>{const e=parseInt(t.target.value);this.canvas.setPenWidth(e),this.updatePenPreview(e)}));const S=document.getElementById("eraser-size"),T=document.getElementById("eraser-preview");document.getElementById("eraser-size-control"),S&&T&&(this.updateEraserPreview(S.value),S.addEventListener("input",t=>{const e=parseInt(t.target.value);this.canvas.setEraserSize(e),this.updateEraserPreview(e)}));const k=document.getElementById("door-type");k&&k.addEventListener("change",t=>{this.canvas.setDoorType(t.target.value)});const I=["small","medium","large"];I.forEach(t=>{const e=document.getElementById(`stair-size-${t}`);e&&e.addEventListener("click",()=>{I.forEach(t=>{const e=document.getElementById(`stair-size-${t}`);e&&e.classList.remove("active")}),e.classList.add("active"),this.canvas.setStairSize(t),this.updateStairsPreview(t)})});document.getElementById("stairs-preview")&&(this.canvas.setStairSize("medium"),this.updateStairsPreview("medium"));const M=document.getElementById("line-style-toggle");M?M.addEventListener("click",()=>{let t,e="solid";switch(M.classList.contains("dashed")?e="dashed":M.classList.contains("arrow")&&(e="arrow"),e){case"solid":t="dashed";break;case"dashed":t="arrow";break;default:t="solid"}switch(this.canvas.setLineStyle(t),M.classList.remove("solid","dashed","arrow"),t){case"dashed":M.classList.add("dashed"),M.textContent="┅",M.title="点線モード（クリックで矢印に変更）";break;case"arrow":M.classList.add("arrow"),M.textContent="→",M.title="矢印モード（クリックで実線に変更）";break;default:M.classList.add("solid"),M.textContent="─",M.title="実線モード（クリックで点線に変更）"}console.log("変更後:",{afterClick:M.classList.toString(),canvasLineStyle:this.canvas.lineStyle})}):console.error("line-style-toggle button not found");const C=document.getElementById("stroke-color");C?(C.addEventListener("input",t=>{this.canvas.setStrokeColor(t.target.value),w&&(w.style.background=t.target.value)}),C.addEventListener("change",t=>{const e=this.canvas.allPaths.filter(t=>"textbox"===t.tool&&t.isSelected);if(e.some(t=>t.text&&""!==t.text.trim()))return e.forEach(e=>{e.text&&""!==e.text.trim()&&(e.strokeColor=t.target.value)}),this.canvas.setStrokeColor(t.target.value),w&&(w.style.background=t.target.value),void this.canvas.redrawCanvas();const s=this.canvas.textInput&&this.canvas.textInput.parentNode,o=document.querySelector(".text-input-overlay");(s||o)&&(this.canvas.finishTextInput(),this.canvas.removeTextInput()),this.canvas.clearTextBoxSelection(),this.handleToolSwitch(),this.canvas.setStrokeColor(t.target.value),w&&(w.style.background=t.target.value),this.canvas.redrawCanvas()}),C.addEventListener("click",t=>{const e=this.canvas.allPaths.filter(t=>"textbox"===t.tool&&t.isSelected),s=document.querySelector(".text-input-overlay");console.log("DOM内のテキスト入力エリア:",s);const o=e.some(t=>t.text&&""!==t.text.trim()),i=this.canvas.textInput&&this.canvas.textInput.parentNode,n=document.querySelector(".text-input-overlay"),a=e.length>0;o||(i||n||a)&&(i&&(this.canvas.finishTextInput(),this.canvas.removeTextInput()),n&&n.remove(),a&&e.forEach(t=>{t.text&&""!==t.text.trim()||this.canvas.removeCurrentTextBox()}),this.handleToolSwitch(),this.canvas.redrawCanvas())}),C.value=this.canvas.strokeColor,console.log("stroke-color要素のイベントリスナー設定完了")):console.error("stroke-color input not found");const b=document.getElementById("font-size");console.log("font-size要素の検索結果:",b),b?(console.log("font-size要素が見つかりました。イベントリスナーを設定中..."),b.addEventListener("input",t=>{console.log("❗ フォントサイズ inputイベント発生",t.target.value)}),b.addEventListener("change",t=>{console.log("❗ フォントサイズ changeイベント発生",t.target.value),console.log("現在のテキスト入力状態:",{textInput:this.canvas.textInput,parentNode:this.canvas.textInput?this.canvas.textInput.parentNode:null,existsInDOM:!!this.canvas.textInput&&document.contains(this.canvas.textInput)});const e=this.canvas.allPaths.filter(t=>"textbox"===t.tool&&t.isSelected);if(e.some(t=>t.text&&""!==t.text.trim()))return console.log("テキストが入力済みのため、文字サイズを変更して編集を継続します"),e.forEach(e=>{if(e.text&&""!==e.text.trim()&&(e.fontSize=parseInt(t.target.value),console.log("テキストボックスの文字サイズを変更:",t.target.value),!e.isVertical)){const t=this.canvas.ctx.font;this.canvas.ctx.font=`${e.fontSize}px ${e.fontFamily||"Arial"}`;const s=e.text.split("\n");let o=0;for(let e of s)if(""!==e.trim()){const t=this.canvas.ctx.measureText(e).width;o=Math.max(o,t)}const i=o+2*Math.max(4,.2*e.fontSize);i>e.width&&(e.width=i,console.log("テキストボックスの幅を自動調整:",{oldWidth:e.width,newWidth:i,maxLineWidth:o,fontSize:e.fontSize})),this.canvas.ctx.font=t}}),this.canvas.setFontSize(parseInt(t.target.value)),void this.canvas.redrawCanvas();const s=this.canvas.textInput&&this.canvas.textInput.parentNode,o=document.querySelector(".text-input-overlay");(s||o)&&(console.log("文字サイズ変更: 空のテキスト入力を終了します"),this.canvas.finishTextInput(),this.canvas.removeTextInput()),this.canvas.clearTextBoxSelection(),this.handleToolSwitch(),this.canvas.setFontSize(parseInt(t.target.value)),this.canvas.redrawCanvas()}),b.addEventListener("click",t=>{console.log("❗ フォントサイズ clickイベント発生"),console.log("クリック時のテキスト入力状態:",{textInput:this.canvas.textInput,parentNode:this.canvas.textInput?this.canvas.textInput.parentNode:null,existsInDOM:!!this.canvas.textInput&&document.contains(this.canvas.textInput)});const e=this.canvas.allPaths.filter(t=>"textbox"===t.tool&&t.isSelected);console.log("選択状態のテキストボックス:",e);const s=document.querySelector(".text-input-overlay");console.log("DOM内のテキスト入力エリア:",s);const o=e.some(t=>t.text&&""!==t.text.trim()),i=this.canvas.textInput&&this.canvas.textInput.parentNode,n=document.querySelector(".text-input-overlay"),a=e.length>0;o?console.log("テキストが入力済みのため、文字サイズ変更を許可します"):(i||n||a)&&(console.log("フォントサイズクリック: 空のテキストボックス関連を終了します"),i&&(this.canvas.finishTextInput(),this.canvas.removeTextInput()),n&&n.remove(),a&&e.forEach(t=>{t.text&&""!==t.text.trim()||this.canvas.removeCurrentTextBox()}),this.handleToolSwitch(),this.canvas.redrawCanvas())}),b.addEventListener("focus",t=>{console.log("❗ フォントサイズ focusイベント発生")}),console.log("font-size要素のイベントリスナー設定完了"),this.canvas.on("textBoxSelected",t=>{b.value=t.fontSize;const e=document.getElementById("stroke-color");e&&t.strokeColor!==e.value&&(console.log("テキストボックス選択でカラーピッカーを同期:",{before:e.value,after:t.strokeColor}),e.value=t.strokeColor,this.canvas.setStrokeColor(t.strokeColor))}),this.canvas.on("textBoxDeselected",()=>{b.value=this.canvas.fontSize;const t=document.getElementById("stroke-color");t&&this.canvas.strokeColor!==t.value&&(console.log("テキストボックス選択解除でカラーピッカーを同期:",{before:t.value,after:this.canvas.strokeColor}),t.value=this.canvas.strokeColor)})):console.error("font-size input not found"),this.canvas.on("drawingComplete",t=>{}),console.log("=== initializeToolButtons 完了 ===")}handleToolSwitch(){const t=this.canvas.textInput&&this.canvas.textInput.parentNode,e=this.canvas.allPaths.some(t=>"textbox"===t.tool&&t.isSelected&&(!t.text||""===t.text.trim())),s=this.canvas.allPaths.some(t=>"textbox"===t.tool&&t.isSelected&&t.text&&""!==t.text.trim());console.log("=== handleToolSwitch 呼び出し ==="),console.log("テキスト入力状態:",{textInput:this.canvas.textInput,parentNode:this.canvas.textInput?this.canvas.textInput.parentNode:null,isActuallyEditing:t,hasEditingEmptyTextBox:e,hasSelectedTextBoxWithText:s,allPathsCount:this.canvas.allPaths.length}),t||e?(console.log("テキスト編集中または空の選択状態テキストボックスがあるため削除します"),this.canvas.removeCurrentTextBox()):s?(console.log("テキストが入力済みのテキストボックスの選択を解除します"),this.canvas.clearTextBoxSelection(),this.canvas.redrawCanvas()):console.log("テキストボックスがないか、既に選択解除されているため、何もしません");const o=document.getElementById("stroke-color");o&&this.canvas.strokeColor!==o.value&&(console.log("カラーピッカーの値を同期:",{before:o.value,after:this.canvas.strokeColor}),o.value=this.canvas.strokeColor),this.canvas.showEraserPreview&&(this.canvas.showEraserPreview=!1,this.canvas.eraserPreviewCoords=null,this.canvas.redrawCanvas())}updateToolButtons(t){document.querySelectorAll(".tool-btn").forEach(t=>{t.id.includes("-tool")&&t.classList.remove("active")}),document.getElementById(t).classList.add("active")}resizeCanvas(){this.canvas.resize()}updatePenPreview(t){const e=document.getElementById("pen-preview");if(e){const s=Math.min(Math.max(2*t,4),16);e.style.width=s+"px",e.style.height=s+"px"}}updateEraserPreview(t){const e=document.getElementById("eraser-preview");if(e){const s=Math.min(Math.max(t/2+8,8),28);e.style.width=s+"px",e.style.height=s+"px"}}updateStairsPreview(t){const e=document.getElementById("stairs-preview");if(e){let s;switch(t){case"small":s={width:"10px",height:"8px",label:"0.5マス"};break;case"large":s={width:"24px",height:"8px",label:"1.5マス"};break;default:s={width:"16px",height:"8px",label:"1マス"}}e.style.width=s.width,e.style.height=s.height,e.style.background="#000",e.style.borderRadius="1px",e.title=`階段記号サイズ: ${s.label}`}}updateToolUI(t){const e=document.getElementById("pen-width-control"),s=document.getElementById("eraser-size-control"),o=document.getElementById("door-control"),i=document.getElementById("stairs-control"),n=document.getElementById("line-control");e&&(e.style.display="pen"===t?"flex":"none"),s&&(s.style.display="eraser"===t?"flex":"none"),o&&(o.style.display="door"===t?"flex":"none"),i&&(i.style.display="stairs"===t?"flex":"none"),n&&(n.style.display="line"===t?"flex":"none")}initOfflineSupport(){window.addEventListener("online",()=>{this.showNetworkStatus("オンラインに復帰しました","success"),console.log("Network: Online")}),window.addEventListener("offline",()=>{this.showNetworkStatus("オフラインモードです。アプリは引き続き利用できます","info"),console.log("Network: Offline")}),navigator.onLine||this.showNetworkStatus("オフラインモードです","info"),this.initPWAInstallPrompt()}showNetworkStatus(t,e="info"){const s=document.querySelector(".network-notification");s&&s.remove();const o=document.createElement("div");o.className=`network-notification ${e}`,o.textContent=t,o.style.cssText=`\n      position: fixed;\n      top: 70px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: ${"success"===e?"#4CAF50":"error"===e?"#f44336":"#2196F3"};\n      color: white;\n      padding: 12px 20px;\n      border-radius: 6px;\n      z-index: 10000;\n      font-size: 14px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n      transition: opacity 0.3s ease;\n    `,document.body.appendChild(o),setTimeout(()=>{o&&o.parentNode&&(o.style.opacity="0",setTimeout(()=>{o.parentNode&&o.parentNode.removeChild(o)},300))},3e3)}initPWAInstallPrompt(){let t;window.addEventListener("beforeinstallprompt",e=>{e.preventDefault(),t=e,this.isIPad()?this.showIPadInstallGuide():this.showInstallButton(t)}),window.addEventListener("appinstalled",()=>{console.log("PWA was installed"),this.showNetworkStatus("アプリがホーム画面に追加されました！","success"),t=null})}isIPad(){return/iPad|iPhone|iPod/.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1}showIPadInstallGuide(){if(window.navigator.standalone)return;if(localStorage.getItem("installGuideShown"))return;const t=document.createElement("div");t.style.cssText="\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0,0,0,0.7);\n      z-index: 20000;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n    ";const e=document.createElement("div");e.style.cssText="\n      background: white;\n      border-radius: 12px;\n      padding: 24px;\n      max-width: 400px;\n      margin: 20px;\n      text-align: center;\n    ",e.innerHTML='\n      <h3 style="margin: 0 0 16px 0; color: #333;">ホーム画面に追加</h3>\n      <p style="margin: 0 0 20px 0; color: #666; line-height: 1.5;">\n        この平面図アプリをiPadのホーム画面に追加して、<br>\n        ネイティブアプリのように使用できます。\n      </p>\n      <div style="margin: 20px 0; padding: 16px; background: #f8f9fa; border-radius: 8px;">\n        <p style="margin: 0; font-size: 14px; color: #555;">\n          1. Safari の <strong>共有ボタン</strong> 📤 をタップ<br>\n          2. <strong>「ホーム画面に追加」</strong> を選択<br>\n          3. <strong>「追加」</strong> をタップ\n        </p>\n      </div>\n      <button id="closeInstallGuide" style="\n        background: #007AFF;\n        color: white;\n        border: none;\n        border-radius: 8px;\n        padding: 12px 24px;\n        font-size: 16px;\n        cursor: pointer;\n      ">わかりました</button>\n    ',t.appendChild(e),document.body.appendChild(t),document.getElementById("closeInstallGuide").addEventListener("click",()=>{document.body.removeChild(t),localStorage.setItem("installGuideShown","true")}),t.addEventListener("click",e=>{e.target===t&&(document.body.removeChild(t),localStorage.setItem("installGuideShown","true"))})}toggleGrid(){const t=document.getElementById("drawing-canvas"),e=document.getElementById("grid-toggle");t.classList.contains("no-grid")?(t.classList.remove("no-grid"),e.classList.add("active"),this.canvas.setSnapToGrid(!0)):(t.classList.add("no-grid"),e.classList.remove("active"),this.canvas.setSnapToGrid(!1))}showExportFeedback(t,e,s="success"){const o=t.innerHTML,i=t.style.backgroundColor;t.innerHTML=e,t.style.backgroundColor="error"===s?"#ff6b6b":"#4CAF50",t.style.transform="scale(0.95)",setTimeout(()=>{t.innerHTML=o,t.style.backgroundColor=i,t.style.transform=""},2e3)}restoreProjectData(t){if(this.canvas&&t)try{t.paths&&Array.isArray(t.paths)&&(this.canvas.loadFromData(t),console.log("プロジェクトデータを復元しました:",t.paths.length+"個のパス")),t.settings&&(t.settings.gridSize&&this.canvas.setGridSize(t.settings.gridSize),t.settings.scale&&this.canvas.setScale(t.settings.scale),void 0===t.settings.offsetX&&void 0===t.settings.offsetY||this.canvas.setOffset(t.settings.offsetX||0,t.settings.offsetY||0)),this.canvas.redrawCanvas(),this.isInitialized=!0}catch(e){console.error("プロジェクトデータの復元に失敗:",e)}}loadBackgroundImage(t){if(this.canvas)try{this.canvas.setBackgroundImage(t),console.log("背景画像を読み込みました"),this.isInitialized=!0}catch(e){console.error("背景画像の読み込みに失敗:",e)}}exportProject(){return r(this,null,function*(){if(!this.canvas)return console.error("キャンバスが初期化されていません"),!1;try{const t=this.canvas.getProjectData(),e=`floorplan-project-${(new Date).toISOString().slice(0,19).replace(/[T:]/g,"-").replace(/-/g,"")}.json`,s=new Blob([JSON.stringify(t,null,2)],{type:"application/json"}),o=URL.createObjectURL(s),i=document.createElement("a");return i.href=o,i.download=e,i.style.display="none",document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(o),console.log(`プロジェクトを保存しました: ${e}`),!0}catch(t){return console.error("プロジェクトの保存に失敗:",t),!1}})}returnToStartScreen(){var t,e;console.error("returnToStartScreen呼び出し開始");const s=this.canvas&&this.canvas.allPaths&&this.canvas.allPaths.length>0;console.error("作業データチェック:",{hasUnsavedChanges:s,allPathsLength:(null==(e=null==(t=this.canvas)?void 0:t.allPaths)?void 0:e.length)||0}),s?(console.error("作業データあり - 確認ダイアログ表示"),this.showConfirmDialog("作業データの確認","作業中のデータがあります。初期画面に戻りますか？\n\n※ 保存せずに戻ると、現在の作業は失われます。",()=>{console.error("確認ダイアログ - OK選択"),this.executeReturnToStartScreen()},()=>{console.error("確認ダイアログ - キャンセル選択"),console.log("初期画面への移動をキャンセルしました")})):(console.error("作業データなし - 直接実行"),this.executeReturnToStartScreen())}executeReturnToStartScreen(){console.error("executeReturnToStartScreen: 開始"),console.error("executeReturnToStartScreen: resetApplicationState呼び出し前"),this.resetApplicationState(),console.error("executeReturnToStartScreen: resetApplicationState呼び出し後");const t=document.getElementById("app");t&&(t.style.display="none");const e=document.getElementById("start-screen");e&&(e.style.display="flex",e.classList.remove("hidden")),window.startScreen&&"function"==typeof window.startScreen.loadLastSession&&window.startScreen.loadLastSession(),console.error("executeReturnToStartScreen: 完了")}showConfirmDialog(t,e,s,o){const i=document.querySelector(".custom-confirm-dialog");i&&i.remove();const n=document.createElement("div");n.className="custom-confirm-dialog",n.innerHTML=`\n      <div class="confirm-dialog-backdrop">\n        <div class="confirm-dialog-content">\n          <div class="confirm-dialog-header">\n            <h3>${t}</h3>\n          </div>\n          <div class="confirm-dialog-body">\n            <p>${e.replace(/\n/g,"<br>")}</p>\n          </div>\n          <div class="confirm-dialog-actions">\n            <button class="confirm-btn-cancel">キャンセル</button>\n            <button class="confirm-btn-ok">OK</button>\n          </div>\n        </div>\n      </div>\n    `,n.style.cssText="\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 10000;\n    ",document.body.appendChild(n);const a=n.querySelector(".confirm-btn-cancel"),r=n.querySelector(".confirm-btn-ok"),l=n.querySelector(".confirm-dialog-backdrop"),h=()=>{document.body.removeChild(n)};a.addEventListener("click",()=>{h(),o&&o()}),r.addEventListener("click",()=>{h(),s&&s()}),l.addEventListener("click",t=>{t.target===l&&(h(),o&&o())});const c=t=>{"Escape"===t.key&&(h(),document.removeEventListener("keydown",c),o&&o())};document.addEventListener("keydown",c)}resetCanvasState(){this.canvas&&(console.error("resetCanvasState: 開始"),this.handleToolSwitch(),this.canvas.ctx.clearRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height),console.error("クリア前の状態:",{allPathsLength:this.canvas.allPaths.length,historyLength:this.canvas.history?this.canvas.history.length:"undefined",currentTool:this.canvas.currentTool}),this.canvas.allPaths=[],this.canvas.history=[],this.canvas.redoStack=[],this.canvas.segmentHistory=[],this.canvas.segmentRedoStack=[],this.canvas.eraserHistory=[],this.canvas.eraserRedoStack=[],this.canvas.lastOperationType=null,this.canvas.showShapePreview=!1,this.canvas.startPoint=null,this.canvas.previewEndPoint=null,this.canvas.scale=1,this.canvas.translateX=this.canvas.canvas.width/2,this.canvas.translateY=this.canvas.canvas.height/2,this.canvas.ctx.setTransform(1,0,0,1,0,0),this.canvas.selectedTextBox&&(this.canvas.selectedTextBox=null),this.canvas.isDraggingTextBox&&(this.canvas.isDraggingTextBox=!1),this.canvas.isDrawing=!1,this.canvas.currentPath=[],this.canvas.isMultiTouch=!1,this.canvas.multiTouchCooldown=!1,this.canvas.isPinching=!1,this.canvas.lastMultiTouchTime=0,this.canvas.isShowingTouchPreview=!1,console.error("ツールリセット前:",{currentTool:this.canvas.currentTool}),this.canvas.setTool("pen"),this.toolManager.setTool("pen"),this.updateToolUI("pen"),console.error("ツールリセット後:",{currentTool:this.canvas.currentTool}),console.error("クリア後の状態:",{allPathsLength:this.canvas.allPaths.length,historyLength:this.canvas.history?this.canvas.history.length:"undefined",currentTool:this.canvas.currentTool}),this.canvas.redrawCanvas(),this.canvas.clearSelection(),this.canvas.backgroundImage&&(this.canvas.backgroundImage=null),this.canvas.textInput&&this.canvas.removeTextInput(),"function"==typeof this.canvas.updateUndoRedoButtons&&(console.error("resetCanvasState: updateUndoRedoButtons呼び出し前"),this.canvas.updateUndoRedoButtons(),console.error("resetCanvasState: updateUndoRedoButtons呼び出し後")),console.error("resetCanvasState: 完了"))}resetApplicationState(){try{console.error("resetApplicationState: 開始"),this.canvas&&(this.handleToolSwitch(),console.error("resetApplicationState - クリア前のツール:",{currentTool:this.canvas.currentTool}),this.canvas.ctx.clearRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height),this.canvas.allPaths=[],this.canvas.history=[],this.canvas.redoStack=[],this.canvas.segmentHistory=[],this.canvas.segmentRedoStack=[],this.canvas.selectedTextBox&&(this.canvas.selectedTextBox=null),this.canvas.isDraggingTextBox&&(this.canvas.isDraggingTextBox=!1),this.canvas.isDrawing=!1,this.canvas.currentPath=[],this.canvas.setTool("pen"),this.toolManager.setTool("pen"),this.updateToolUI("pen"),console.error("resetApplicationState - ツールリセット後:",{currentTool:this.canvas.currentTool}),this.canvas.redrawCanvas(),this.canvas.clearSelection(),this.canvas.backgroundImage&&(this.canvas.backgroundImage=null),this.canvas.textInput&&this.canvas.removeTextInput()),this.clearAutosaveData(),this.isInitialized=!1,this.toolManager&&this.toolManager.setTool("pen"),this.resetUIState(),console.error("resetApplicationState: 完了")}catch(t){console.error("アプリケーション状態のリセット中にエラー:",t)}}resetUIState(){document.querySelectorAll(".tool-btn").forEach(t=>{t.classList.remove("active")});const t=document.getElementById("pen-tool");t&&t.classList.add("active");const e=document.getElementById("export-menu");e&&(e.style.display="none");const s=document.getElementById("export-btn");s&&s.classList.remove("active"),document.querySelectorAll(".pen-width-group, .eraser-size-group, .door-control-group, .stairs-control-group, .line-control-group").forEach(t=>{t.style.display="none"}),console.log("UI状態をリセットしました")}clearAutosaveData(){try{localStorage.removeItem("floorplan-autosave"),localStorage.removeItem("floorplan-paths"),localStorage.removeItem("floorplan-settings"),localStorage.removeItem("floorplan-canvas-state"),console.log("自動保存データをクリアしました")}catch(t){console.error("自動保存データのクリア中にエラー:",t)}}showStartScreen(){console.log("スタートスクリーンに戻ります");const t=document.getElementById("app");t&&(t.style.display="none");const e=document.getElementById("start-screen");e&&(e.style.display="flex")}initDarkMode(){this.applyDarkMode()}loadDarkModePreference(){return"true"===localStorage.getItem("darkMode")}saveDarkModePreference(){localStorage.setItem("darkMode",this.isDarkMode.toString())}toggleDarkMode(){this.isDarkMode=!this.isDarkMode,this.applyDarkMode(),this.saveDarkModePreference(),this.updateDarkModeButton(),this.canvas&&this.canvas.updateStrokeColorForTheme()}applyDarkMode(){const t=document.body;this.isDarkMode?t.setAttribute("data-theme","dark"):t.removeAttribute("data-theme")}updateDarkModeButton(){const t=document.getElementById("dark-mode-btn"),e=document.getElementById("dark-mode-icon");if(console.log("updateDarkModeButton:",{isDarkMode:this.isDarkMode,darkModeBtn:!!t,darkModeIcon:!!e}),t&&e){const s=this.isDarkMode?"/hemenzu/sun.png":"/hemenzu/moom.png";console.log("画像パス変更:",e.src,"→",s),e.src=s,e.alt=this.isDarkMode?"ライトモード":"ダークモード",t.title=this.isDarkMode?"ライトモード切り替え":"ダークモード切り替え",e.onerror=function(){console.error("画像読み込みエラー:",s)},e.onload=function(){console.log("画像読み込み成功:",s)}}else console.error("ダークモードボタン要素が見つかりません")}setupPresetTextFeature(){const t=document.getElementById("preset-text-select"),e=document.getElementById("preset-text-place");t&&e?(e.disabled=!0,t.addEventListener("change",()=>{const s=t.value;e.disabled=!s,s&&console.log("定型文選択:",s)}),e.addEventListener("click",()=>{const s=t.value;s&&(console.log("定型文配置:",s),this.placePresetText(s),t.value="",e.disabled=!0)})):console.error("定型文要素が見つかりません")}placePresetText(t){if(!this.canvas)return;const e=this.canvas.canvas.getBoundingClientRect(),s={tool:"textbox",text:t,x:(e.width/2-this.canvas.translateX)/this.canvas.scale,y:(e.height/2-this.canvas.translateY)/this.canvas.scale,width:48*t.length+40,height:60,fontSize:48,strokeColor:this.canvas.strokeColor,isVertical:!1,isSelected:!1,isPreset:!0};this.canvas.allPaths.push(s),this.canvas.lastOperationType="path",this.canvas.redoStack=[],this.canvas.redrawCanvas(),console.log("定型文テキストボックス作成完了:",t)}resetToHome(){console.log("ホームに戻る - リロードなし初期化開始"),this.canvas&&("function"==typeof this.canvas.clearAllHistory?this.canvas.clearAllHistory():(this.canvas.allPaths=[],this.canvas.redoStack=[],this.canvas.segmentHistory=[],this.canvas.eraserHistory=[],this.canvas.history=[],this.canvas.segmentRedoStack=[],this.canvas.eraserRedoStack=[],this.canvas.lastOperationType=null,this.canvas.operationHistory=[],this.canvas.scale=1,this.canvas.translateX=this.canvas.canvas.width/2,this.canvas.translateY=this.canvas.canvas.height/2,this.canvas.ctx.setTransform(1,0,0,1,0,0)),this.canvas.selectedTextBox=null,this.canvas.isResizing=!1,this.canvas.resizeHandle=null,this.canvas.isDrawing=!1,this.canvas.currentPath=[],this.canvas.polylinePoints=[],this.canvas.isPolylineActive=!1,this.canvas.currentTool="pen",this.canvas.strokeWidth=2,this.canvas.strokeColor="#000000",this.canvas.fontSize=48,this.canvas.redrawCanvas()),this.resetUI(),this.showStartScreen(),console.log("ホームに戻る - 初期化完了")}resetUI(){document.querySelectorAll(".tool-btn").forEach(t=>{t.classList.remove("active")});const t=document.getElementById("pen-tool");t&&t.classList.add("active");const e=document.getElementById("pen-width"),s=document.getElementById("eraser-size"),o=document.getElementById("stroke-color"),i=document.getElementById("font-size");e&&(e.value=2),s&&(s.value=30),o&&(o.value="#000000"),i&&(i.value="48");const n=document.getElementById("preset-text-select");n&&(n.value="");const a=document.getElementById("undo-btn"),r=document.getElementById("redo-btn");a&&(a.disabled=!0,a.style.opacity="0.5"),r&&(r.disabled=!0,r.style.opacity="0.5"),console.log("UI初期化完了 - undo/redoボタン無効化")}}document.addEventListener("DOMContentLoaded",()=>{new u});
