var t=Object.defineProperty,e=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,o=(e,s,i)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[s]=i,n=(t,n)=>{for(var a in n||(n={}))s.call(n,a)&&o(t,a,n[a]);if(e)for(var a of e(n))i.call(n,a)&&o(t,a,n[a]);return t},a=(t,e,s)=>new Promise((i,o)=>{var n=t=>{try{r(s.next(t))}catch(e){o(e)}},a=t=>{try{r(s.throw(t))}catch(e){o(e)}},r=t=>t.done?i(t.value):Promise.resolve(t.value).then(n,a);r((s=s.apply(t,e)).next())});import{_ as r}from"./pdf-lib-CJovE0jj.js";!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver(t=>{for(const s of t)if("childList"===s.type)for(const t of s.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)}).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();const h=50;class l{constructor(t){this.canvas=document.querySelector(t),this.ctx=this.canvas.getContext("2d",{willReadFrequently:!0}),this.isDrawing=!1,this.currentPath=[],this.allPaths=[],this.redoStack=[],this.openingsHistory=[],this.openingsRedoStack=[],this.lastOperationType=null,this.strokeWidth=2,this.penWidth=2,this.eraserSize=30,this.strokeColor="#000000",this.currentTool="pen",this.lineStyle="solid",this.doorType="opening",this.doorWidth=75,this.gridSize=160,this.stairSteps=10,this.stairWidth=1*this.gridSize,console.log(`初期化: gridSize=${this.gridSize}px, 初期stairWidth=${this.stairWidth}px`),this.startPoint=null,this.previewEndPoint=null,this.showShapePreview=!1,this.eventListeners={},this.snapToGrid=!0,this.isShiftPressed=!1,this.textInput=null,this.fontSize=48,this.selectedTextBox=null,this.isResizing=!1,this.resizeHandle=null,this.handleSize=8,this.isDraggingTextBox=!1,this.dragOffset={x:0,y:0},this.lastClickTime=0,this.showEraserPreview=!1,this.eraserPreviewCoords=null,this.openings=[],this.selectedOpening=null,this.isDraggingOpening=!1,this.openingDragOffset={x:0,y:0},this.showOpeningPreview=!1,this.openingPreviewCoords=null,this.touchPreviewTimer=null,this.isShowingTouchPreview=!1,this.isMultiTouch=!1,this.multiTouchCooldown=!1,this.lastMultiTouchTime=0,this.scale=1,this.minScale=.1,this.maxScale=5,this.translateX=0,this.translateY=0,this.lastPinchDistance=0,this.isPinching=!1,this.pinchCenter={x:0,y:0},this.lastPanPoint=null,this.initCanvas(),this.setupEventListeners()}initCanvas(){this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.strokeStyle=this.strokeColor,this.ctx.fillStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth,this.ctx.imageSmoothingEnabled=!1,this.setupHighDPI(),this.updateCursor(),this.redrawCanvas(),this.saveOpeningsState()}setupHighDPI(){const t=window.devicePixelRatio||1,e=this.canvas.getBoundingClientRect();this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height),this.canvas.width=e.width*t,this.canvas.height=e.height*t,this.ctx=this.canvas.getContext("2d",{willReadFrequently:!0}),this.ctx.scale(t,t),0===this.translateX&&0===this.translateY&&(this.translateX=this.canvas.width/2,this.translateY=this.canvas.height/2),this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.strokeStyle=this.strokeColor,this.ctx.fillStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth,this.canvas.style.width=e.width+"px",this.canvas.style.height=e.height+"px",this.redrawCanvas()}setupEventListeners(){this.canvas.addEventListener("mousedown",t=>{this.startDrawing(t)}),this.canvas.addEventListener("mousemove",t=>{if("text-horizontal"===this.currentTool||"text-vertical"===this.currentTool)return this.updateCursorForPosition(t),void this.draw(t);this.isDrawing||this.isDraggingTextBox||this.isResizing||this.updateCursorForPosition(t),"eraser"===this.currentTool?this.updateEraserPreview(t):this.showEraserPreview=!1,this.draw(t)}),this.canvas.addEventListener("mouseup",t=>this.stopDrawing(t)),this.canvas.addEventListener("mouseleave",()=>{this.showEraserPreview=!1,this.redrawCanvas()}),this.canvas.addEventListener("wheel",t=>{t.preventDefault();const e=this.canvas.getBoundingClientRect(),s=t.clientX-e.left,i=t.clientY-e.top,o=t.deltaY<0?1:-1,n=Math.exp(.1*o);this.zoomAt(s,i,n)}),this.canvas.addEventListener("touchstart",t=>{t.preventDefault(),2===t.touches.length?(this.isPinching=!0,this.isMultiTouch=!0,this.lastMultiTouchTime=Date.now(),this.lastPinchDistance=this.getPinchDistance(t.touches),this.pinchCenter=this.getPinchCenter(t.touches),this.lastPanPoint=this.getPinchCenter(t.touches),console.log("ピンチジェスチャー開始")):1!==t.touches.length||this.isPinching||this.multiTouchCooldown||this.startDrawing(t.touches[0])}),this.canvas.addEventListener("touchmove",t=>{if(t.preventDefault(),2===t.touches.length&&this.isPinching){const e=this.getPinchDistance(t.touches),s=this.getPinchCenter(t.touches);if(this.lastPinchDistance>0){const t=e/this.lastPinchDistance;this.zoomAt(s.x,s.y,t)}if(this.lastPanPoint){const t=s.x-this.lastPanPoint.x,e=s.y-this.lastPanPoint.y;this.translateX+=t,this.translateY+=e,this.redrawCanvas()}this.lastPinchDistance=e,this.pinchCenter=s,this.lastPanPoint=s}else 1!==t.touches.length||this.isPinching||this.multiTouchCooldown||(this.isDrawing||this.isDraggingTextBox||this.isResizing||this.updateCursorForPosition(t.touches[0]),"eraser"===this.currentTool?this.updateEraserPreview(t.touches[0]):this.showEraserPreview=!1,this.draw(t.touches[0]))}),this.canvas.addEventListener("touchend",t=>{t.preventDefault(),t.touches.length<2&&(this.isPinching=!1,this.lastPinchDistance=0,this.lastPanPoint=null,0===t.touches.length&&this.isMultiTouch&&(console.log("全タッチ終了 - シンプルクールダウン開始"),this.multiTouchCooldown=!0,this.isMultiTouch=!1,this.lastMultiTouchTime=Date.now(),setTimeout(()=>{this.multiTouchCooldown=!1,console.log("クールダウン終了 - 描画再開可能")},200))),0!==t.touches.length||this.multiTouchCooldown||(this.stopDrawing(t.changedTouches[0]),"eraser"===this.currentTool&&(this.showEraserPreview=!1,this.eraserPreviewCoords=null,this.cancelTouchEraserPreview(),this.redrawCanvas()))}),this.canvas.addEventListener("touchcancel",()=>{this.cancelTouchEraserPreview(),this.showEraserPreview=!1,this.isPinching=!1,this.redrawCanvas()}),this.isShiftPressed=!1,document.addEventListener("keydown",t=>{if("Shift"===t.key){this.isShiftPressed=!0,this.updateCursor(),this.canvas.classList.add("shift-mode");const t=document.getElementById("shift-indicator");t&&t.classList.add("active")}}),document.addEventListener("keyup",t=>{if("Shift"===t.key){this.isShiftPressed=!1,this.updateCursor(),this.canvas.classList.remove("shift-mode");const t=document.getElementById("shift-indicator");t&&t.classList.remove("active")}}),this.canvas.addEventListener("contextmenu",t=>t.preventDefault())}getCoordinates(t){const e=this.canvas.getBoundingClientRect();let s=t.clientX-e.left,i=t.clientY-e.top;const o=window.devicePixelRatio||1;if(s*=o,i*=o,s=(s-this.translateX)/this.scale,i=(i-this.translateY)/this.scale,this.snapToGrid)if("pen"!==this.currentTool&&"text-horizontal"!==this.currentTool&&"text-vertical"!==this.currentTool&&"eraser"!==this.currentTool)if("door"===this.currentTool||"stairs"===this.currentTool){const t=this.gridSize/4;s=Math.round(s/t)*t,i=Math.round(i/t)*t}else if("line"!==this.currentTool||"dashed"!==this.lineStyle&&"arrow"!==this.lineStyle)if("line"===this.currentTool&&"solid"===this.lineStyle||"rectangle"===this.currentTool){const t=this.gridSize/2;s=Math.round(s/t)*t,i=Math.round(i/t)*t}else s=Math.round(s/this.gridSize)*this.gridSize,i=Math.round(i/this.gridSize)*this.gridSize;else{const t=this.gridSize/4;s=Math.round(s/t)*t,i=Math.round(i/t)*t}else this.isShiftPressed&&"pen"===this.currentTool&&(s=Math.round(s/this.gridSize)*this.gridSize,i=Math.round(i/this.gridSize)*this.gridSize);return{x:s,y:i}}startDrawing(t){if(console.log("startDrawing called with tool:",this.currentTool),this.ctx.strokeStyle=this.strokeColor,this.ctx.fillStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth,this.ctx.lineCap="round",this.ctx.lineJoin="round",t.touches&&t.touches.length>1)return this.isMultiTouch=!0,this.lastMultiTouchTime=Date.now(),void console.log("マルチタッチ検出 - 描画無効化");if(this.multiTouchCooldown)return void console.log("クールダウン中のため描画をスキップ");if(this.isMultiTouch)return void console.log("マルチタッチ中のため描画をスキップ");if("eraser"===this.currentTool&&t.type&&t.type.includes("touch"))return void this.startTouchEraserPreview(t);this.textInput&&this.textInput.parentNode&&(console.log("既存のテキスト入力を完了します"),this.finishTextInput());const e=this.getCoordinates(t);if(this.selectedTextBox){const t=this.getResizeHandle(e,this.selectedTextBox);if(t)return console.log("選択中テキストボックスのリサイズハンドルをクリック:",t),this.isResizing=!0,this.resizeHandle=t,this.dragOffset={x:e.x,y:e.y},void this.redrawCanvas()}for(let o=this.allPaths.length-1;o>=0;o--){const t=this.allPaths[o];if("textbox"===t.tool&&t!==this.selectedTextBox){const s=this.getResizeHandle(e,t);if(s)return console.log("他のテキストボックスのリサイズハンドルをクリック:",s),this.allPaths.forEach(t=>{"textbox"===t.tool&&(t.isSelected=!1)}),this.setSelectedTextBox(t),this.isResizing=!0,this.resizeHandle=s,this.dragOffset={x:e.x,y:e.y},void this.redrawCanvas()}}const s=this.getTextBoxAt(e);if(s){if(console.log("テキストボックスをクリックしました（ツール:",this.currentTool,")"),this.allPaths.forEach(t=>{"textbox"===t.tool&&(t.isSelected=!1)}),this.setSelectedTextBox(s),this.lastClickTime&&Date.now()-this.lastClickTime<500)return console.log("ダブルクリック検出、編集モード開始"),this.editTextBox(s),void(this.lastClickTime=0);if(this.isPointInMoveArea(e,s))return console.log("移動エリアをクリック、移動準備開始"),this.isDraggingTextBox=!0,this.dragOffset={x:e.x-s.x,y:e.y-s.y},this.lastClickTime=Date.now(),void this.redrawCanvas();const t=this.getResizeHandle(e,s);return t?(console.log("エリア外でリサイズハンドル検出:",t),this.isResizing=!0,this.resizeHandle=t,this.dragOffset={x:e.x,y:e.y},this.lastClickTime=Date.now(),void this.redrawCanvas()):(console.log("デフォルト移動準備"),this.isDraggingTextBox=!0,this.dragOffset={x:e.x-s.x,y:e.y-s.y},this.lastClickTime=Date.now(),void this.redrawCanvas())}const i=this.getOpeningAt(e);if(console.log("開口部クリックチェック:",{coords:e,openingsCount:this.openings.length,clickedOpening:i,currentTool:this.currentTool}),i)return console.log("開口部をクリックしました"),this.saveOpeningsState(),this.openings.forEach(t=>{t.isSelected=!1}),i.isSelected=!0,this.selectedOpening=i,this.isDraggingOpening=!0,this.openingDragOffset={x:e.x-i.x,y:e.y-i.y},void this.redrawCanvas();if(this.selectedTextBox&&(this.clearTextBoxSelection(),this.redrawCanvas()),this.selectedOpening&&(this.openings.forEach(t=>{t.isSelected=!1}),this.selectedOpening=null,this.redrawCanvas()),this.isDrawing=!0,this.startPoint=e,this.currentPath=[e],this.canvas.classList.add("drawing"),"door"===this.currentTool&&"opening"===this.doorType&&(this.showOpeningPreview=!0,this.openingPreviewCoords=e,this.redrawCanvas()),"pen"===this.currentTool)this.ctx.setTransform(this.scale,0,0,this.scale,this.translateX,this.translateY),console.log("Pen drawing start - setting color:",this.strokeColor),this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.beginPath(),this.ctx.moveTo(e.x,e.y);else if("eraser"===this.currentTool)this.eraseAtPoint(e);else if("text-horizontal"===this.currentTool||"text-vertical"===this.currentTool)return}draw(t){if(this.isMultiTouch||this.multiTouchCooldown)return;if(t.touches&&t.touches.length>1)return;const e=this.getCoordinates(t);if(this.isShowingTouchPreview&&"eraser"===this.currentTool)return this.eraserPreviewCoords=e,void this.redrawCanvas();if(this.isResizing&&this.selectedTextBox&&this.resizeHandle)return this.resizeTextBox(this.selectedTextBox,this.resizeHandle,e),void this.redrawCanvas();if(this.isDraggingOpening&&this.selectedOpening)return this.selectedOpening.x=e.x-this.openingDragOffset.x,this.selectedOpening.y=e.y-this.openingDragOffset.y,void this.redrawCanvas();if(this.showOpeningPreview&&"door"===this.currentTool&&"opening"===this.doorType)return this.openingPreviewCoords=e,void this.redrawCanvas();if(this.isDraggingTextBox&&this.selectedTextBox){const e=this.canvas.getBoundingClientRect();let s=t.clientX-e.left,i=t.clientY-e.top;const o=window.devicePixelRatio||1;return s*=o,i*=o,s=(s-this.translateX)/this.scale,i=(i-this.translateY)/this.scale,this.selectedTextBox.x=s-this.dragOffset.x,this.selectedTextBox.y=i-this.dragOffset.y,void this.redrawCanvas()}if(this.isDrawing)if(this.currentPath.push(e),"pen"===this.currentTool)this.ctx.setTransform(this.scale,0,0,this.scale,this.translateX,this.translateY),console.log("Pen drawing - applying color:",this.strokeColor),this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.lineTo(e.x,e.y),this.ctx.stroke();else if("eraser"===this.currentTool)this.eraseAtPoint(e);else{let t=e;if("line"===this.currentTool&&this.isShiftPressed){t=Math.abs(e.x-this.startPoint.x)>Math.abs(e.y-this.startPoint.y)?{x:e.x,y:this.startPoint.y}:{x:this.startPoint.x,y:e.y}}this.previewEndPoint=t,this.showShapePreview="text-horizontal"!==this.currentTool&&"text-vertical"!==this.currentTool,this.redrawCanvas()}}stopDrawing(t){if(this.isMultiTouch||this.multiTouchCooldown)return void console.log("マルチタッチ中またはクールダウン中のため停止処理をスキップ");if(this.isShowingTouchPreview)return void this.cancelTouchEraserPreview();if(this.isResizing)return this.isResizing=!1,void(this.resizeHandle=null);if(this.isDraggingTextBox)return void(this.isDraggingTextBox=!1);if(this.isDraggingOpening)return void(this.isDraggingOpening=!1);if(!this.isDrawing)return;this.isDrawing=!1,this.canvas.classList.remove("drawing"),this.showOpeningPreview=!1,this.openingPreviewCoords=null;let e=this.getCoordinates(t);if("line"===this.currentTool&&this.isShiftPressed){e=Math.abs(e.x-this.startPoint.x)>Math.abs(e.y-this.startPoint.y)?{x:e.x,y:this.startPoint.y}:{x:this.startPoint.x,y:e.y}}if("text-horizontal"===this.currentTool||"text-vertical"===this.currentTool);else if("door"===this.currentTool&&"opening"===this.doorType)this.createOpening(e);else{const t="line"===this.currentTool||"rectangle"===this.currentTool||"door"===this.currentTool?this.strokeWidth+6:this.strokeWidth,s={tool:this.currentTool,path:this.currentPath,strokeWidth:t,strokeColor:this.strokeColor,startPoint:this.startPoint,endPoint:e};"line"===this.currentTool&&(s.lineStyle=this.lineStyle,s.isDashed=this.isDashed,s.hasArrow=this.hasArrow),"door"===this.currentTool&&(s.doorType=this.doorType),"stairs"===this.currentTool&&(s.stairSteps=this.stairSteps,s.stairWidth=this.stairWidth),this.allPaths.push(s),this.redoStack=[],this.lastOperationType="path",console.log("パス追加:",{tool:s.tool,pathCount:this.allPaths.length,lastOperationType:this.lastOperationType}),"pen"===this.currentTool&&this.emit("drawingComplete",this.currentPath)}"eraser"===this.currentTool&&(this.showEraserPreview=!1,this.eraserPreviewCoords=null),this.showShapePreview=!1,this.previewEndPoint=null,this.currentPath=[],this.allPaths.length>h&&this.optimizePaths()}drawShape(t,e){if(this.ctx.setTransform(this.scale,0,0,this.scale,this.translateX,this.translateY),this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth+6,"line"===this.currentTool&&"dashed"===this.lineStyle){const t=20,e=15;console.log("プレビューで点線を設定します:",{dashLength:t,gapLength:e,strokeWidth:this.strokeWidth}),this.ctx.setLineDash([t,e])}else this.ctx.setLineDash([]);switch(this.ctx.beginPath(),this.currentTool){case"line":this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y);break;case"rectangle":const s=e.x-t.x,i=e.y-t.y;this.ctx.rect(t.x,t.y,s,i);break;case"door":return this.drawDoor(t,e),void this.ctx.restore();case"stairs":return this.drawStairs(t,e),void this.ctx.restore()}this.ctx.stroke(),"line"===this.currentTool&&"arrow"===this.lineStyle&&(console.log("プレビューで矢印を描画します:",{lineStyle:this.lineStyle}),this.drawArrowHead(this.ctx,t.x,t.y,e.x,e.y))}drawDoor(t,e){const s=e.x-t.x,i=e.y-t.y,o=.5*this.gridSize;let n,a,r;Math.abs(s)>Math.abs(i)?s>0?(r="horizontal-right",n={x:t.x,y:t.y},a={x:t.x+o,y:t.y}):(r="horizontal-left",n={x:t.x,y:t.y},a={x:t.x-o,y:t.y}):i>0?(r="vertical-down",n={x:t.x,y:t.y},a={x:t.x,y:t.y+o}):(r="vertical-up",n={x:t.x,y:t.y},a={x:t.x,y:t.y-o});const h=r.startsWith("horizontal")?0:1,l=r.startsWith("vertical")?0:1;switch(this.doorType){case"single":case"single-right":this.drawSingleDoor(n,a,h,l,o,"right");break;case"double":this.drawDoubleDoor(n,a,h,l,o);break;case"opening":this.drawOpening(n,a,h,l,o);break;case"single-left":this.drawSingleDoor(n,a,h,l,o,"left")}}drawSingleDoor(t,e,s,i,o,n){const a={x:Math.floor(t.x)+.5,y:Math.floor(t.y)+.5},r={x:Math.floor(e.x)+.5,y:Math.floor(e.y)+.5};this.ctx.save(),this.ctx.lineWidth=6,this.ctx.strokeStyle="#ffffff",this.ctx.beginPath(),this.ctx.moveTo(a.x,a.y),this.ctx.lineTo(r.x,r.y),this.ctx.stroke(),this.ctx.lineWidth=6,this.ctx.strokeStyle="#ffffff",this.ctx.beginPath(),this.ctx.moveTo(a.x,a.y),this.ctx.lineTo(r.x,r.y),this.ctx.stroke(),this.ctx.restore();const h="left"===n?r:a,l=o,c=Math.atan2(r.y-a.y,r.x-a.x);let d;d="left"===n?c+Math.PI/2:c-Math.PI/2,this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle="#000000",this.ctx.beginPath(),this.ctx.arc(h.x,h.y,l,Math.min(c,d),Math.max(c,d)),this.ctx.stroke(),this.ctx.restore();const x=Math.floor(h.x+Math.cos(d)*l)+.5,g=Math.floor(h.y+Math.sin(d)*l)+.5;this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle="#000000",this.ctx.beginPath(),this.ctx.moveTo(h.x,h.y),this.ctx.lineTo(x,g),this.ctx.stroke(),this.ctx.restore()}drawDoubleDoor(t,e,s,i,o){const n={x:Math.floor(t.x)+.5,y:Math.floor(t.y)+.5},a={x:Math.floor(e.x)+.5,y:Math.floor(e.y)+.5};this.ctx.save(),this.ctx.lineWidth=6,this.ctx.strokeStyle="#ffffff",this.ctx.beginPath(),this.ctx.moveTo(n.x,n.y),this.ctx.lineTo(a.x,a.y),this.ctx.stroke(),this.ctx.restore();const r=Math.floor((n.x+a.x)/2)+.5,h=Math.floor((n.y+a.y)/2)+.5,l=o/2;this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle="#000000",this.ctx.beginPath();this.ctx.moveTo(r+4*s,h+4*i),this.ctx.lineTo(r-4*s,h-4*i),this.ctx.stroke(),this.ctx.restore();const c=Math.atan2(a.y-n.y,a.x-n.x),d=l;this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle="#000000",this.ctx.beginPath();const x=c-Math.PI/2;this.ctx.arc(n.x,n.y,d,Math.min(c,x),Math.max(c,x)),this.ctx.stroke(),this.ctx.restore(),this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle="#000000",this.ctx.beginPath();const g=Math.floor(n.x+Math.cos(x)*d)+.5,u=Math.floor(n.y+Math.sin(x)*d)+.5;this.ctx.moveTo(n.x,n.y),this.ctx.lineTo(g,u),this.ctx.stroke(),this.ctx.restore(),this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle="#000000",this.ctx.beginPath();const p=c+Math.PI,y=p+Math.PI/2;this.ctx.arc(a.x,a.y,d,Math.min(p,y),Math.max(p,y)),this.ctx.stroke(),this.ctx.restore(),this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle="#000000",this.ctx.beginPath();const f=Math.floor(a.x+Math.cos(y)*d)+.5,m=Math.floor(a.y+Math.sin(y)*d)+.5;this.ctx.moveTo(a.x,a.y),this.ctx.lineTo(f,m),this.ctx.stroke(),this.ctx.restore()}drawOpening(t,e,s,i,o){}drawStairs(t,e){console.log(`階段描画開始: start(${t.x}, ${t.y}), end(${e.x}, ${e.y}), stairWidth: ${this.stairWidth}px`),this.ctx.save(),this.ctx.lineWidth=2,this.ctx.strokeStyle="#000000";const s=e.x-t.x,i=e.y-t.y,o=Math.sqrt(s*s+i*i);if(0===o)return void this.ctx.restore();const n=-(i/o),a=s/o,r=this.stairWidth,h=r/2;console.log("階段描画詳細:",{length:`${o.toFixed(1)}px`,stairWidth:`${r}px`,gridUnits:`${(r/this.gridSize).toFixed(2)}マス`,halfWidth:`${h}px`,gridSize:`${this.gridSize}px`,currentSize:r===.5*this.gridSize?"small":r===1*this.gridSize?"medium":r===1.5*this.gridSize?"large":"unknown"}),this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y),this.ctx.stroke();const l=Math.PI/6,c=e.x-20*Math.cos(Math.atan2(i,s)-l),d=e.y-20*Math.sin(Math.atan2(i,s)-l),x=e.x-20*Math.cos(Math.atan2(i,s)+l),g=e.y-20*Math.sin(Math.atan2(i,s)+l);this.ctx.beginPath(),this.ctx.moveTo(e.x,e.y),this.ctx.lineTo(c,d),this.ctx.moveTo(e.x,e.y),this.ctx.lineTo(x,g),this.ctx.stroke();const u=o/(this.stairSteps+1);for(let p=1;p<=this.stairSteps;p++){const e=p*u/o;if(e>=1)break;const r=t.x+s*e,l=t.y+i*e,c=r+n*h,d=l+a*h,x=r-n*h,g=l-a*h;this.ctx.beginPath(),this.ctx.moveTo(c,d),this.ctx.lineTo(x,g),this.ctx.stroke()}this.ctx.fillStyle="#ffffff",this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.arc(t.x,t.y,4,0,2*Math.PI),this.ctx.fill(),this.ctx.stroke(),this.ctx.restore()}drawSingleOpening(t){if(this.ctx.save(),this.ctx.lineWidth=1,this.ctx.strokeStyle="#000000",this.ctx.fillStyle="rgba(240, 240, 240, 0.9)",this.ctx.beginPath(),this.ctx.rect(t.x+.5,t.y+.5,t.width,t.height),this.ctx.fill(),this.ctx.stroke(),t.isSelected){this.ctx.lineWidth=3,this.ctx.strokeStyle="#0080ff",this.ctx.setLineDash([8,4]),this.ctx.strokeRect(t.x-2,t.y-2,t.width+4,t.height+4),this.ctx.setLineDash([]),this.ctx.lineWidth=2,this.ctx.strokeStyle="#0080ff";const e=t.x+t.width/2,s=t.y+t.height/2,i=8;this.ctx.beginPath(),this.ctx.moveTo(e-i,s),this.ctx.lineTo(e+i,s),this.ctx.moveTo(e,s-i),this.ctx.lineTo(e,s+i),this.ctx.stroke()}this.ctx.restore()}getOpeningAt(t){for(let e=this.openings.length-1;e>=0;e--){const s=this.openings[e];if(t.x>=s.x&&t.x<=s.x+s.width&&t.y>=s.y&&t.y<=s.y+s.height)return s}return null}createOpening(t){this.saveOpeningsState();const e={x:Math.floor(t.x)-25,y:Math.floor(t.y)-25,width:50,height:50,isSelected:!0};this.openings.forEach(t=>{t.isSelected=!1}),this.openings.push(e),this.selectedOpening=e,this.lastOperationType="opening",console.log("開口部作成完了: lastOperationType = opening"),this.redrawCanvas()}drawOpeningPreview(){const t=Math.floor(this.openingPreviewCoords.x)-25,e=Math.floor(this.openingPreviewCoords.y)-25;this.ctx.save(),this.ctx.fillStyle="rgba(240, 240, 240, 0.6)",this.ctx.strokeStyle="#0080ff",this.ctx.lineWidth=2,this.ctx.setLineDash([6,3]),this.ctx.beginPath(),this.ctx.rect(t+.5,e+.5,50,50),this.ctx.fill(),this.ctx.stroke(),this.ctx.setLineDash([]),this.ctx.fillStyle="#0080ff",this.ctx.font="12px Arial",this.ctx.textAlign="center",this.ctx.fillText("開口部",t+25,e-5),this.ctx.restore()}redrawCanvas(){this.redrawTimeout&&cancelAnimationFrame(this.redrawTimeout),this.redrawTimeout=requestAnimationFrame(()=>{this._performRedraw()})}_performRedraw(){this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.setTransform(this.scale,0,0,this.scale,this.translateX,this.translateY),this.drawGrid(),console.log("redrawCanvas: パス数=",this.allPaths.length,"scale:",this.scale),this.allPaths.forEach((t,e)=>{if(console.log(`パス${e}: ${t.tool}`),this.ctx.save(),"pen"===t.tool)this.ctx.strokeStyle=t.strokeColor,this.ctx.lineWidth=t.strokeWidth,this.ctx.beginPath(),t.path.forEach((t,e)=>{0===e?this.ctx.moveTo(t.x,t.y):this.ctx.lineTo(t.x,t.y)}),this.ctx.stroke();else if("text-horizontal"===t.tool||"text-vertical"===t.tool)console.log(`テキスト: "${t.text}" at (${t.x}, ${t.y})`),this.ctx.fillStyle=t.strokeColor,this.ctx.font=`${t.fontSize}px "Noto Sans JP", "Hiragino Sans", "Yu Gothic", "Meiryo", Arial, sans-serif`,t.isVertical?this.drawVerticalText(t.text,t.x,t.y,t.fontSize):this.ctx.fillText(t.text,t.x,t.y);else if("textbox"===t.tool)console.log("テキストボックスを描画:",t),this.drawTextBox(t);else{if(console.log(`図形: ${t.tool} (${t.startPoint.x},${t.startPoint.y}) → (${t.endPoint.x},${t.endPoint.y})`),this.ctx.strokeStyle=t.strokeColor,this.ctx.lineWidth=t.strokeWidth,this.ctx.lineCap="round",this.ctx.lineJoin="round","line"===t.tool){const e=t.lineStyle||(t.isDashed?"dashed":t.hasArrow?"arrow":"solid");if("dashed"===e){console.log("保存済み図形で点線を設定します:",e);const t=20,s=15;this.ctx.setLineDash([t,s])}else this.ctx.setLineDash([])}else this.ctx.setLineDash([]);switch(this.ctx.beginPath(),t.tool){case"line":this.ctx.moveTo(t.startPoint.x,t.startPoint.y),this.ctx.lineTo(t.endPoint.x,t.endPoint.y);break;case"rectangle":const e=t.endPoint.x-t.startPoint.x,s=t.endPoint.y-t.startPoint.y;this.ctx.rect(t.startPoint.x,t.startPoint.y,e,s);break;case"door":const i=this.doorType;return this.doorType=t.doorType||"opening",this.drawDoor(t.startPoint,t.endPoint),this.doorType=i,void this.ctx.restore();case"stairs":const o=this.stairSteps,n=this.stairWidth;return this.stairSteps=t.stairSteps||10,this.stairWidth=t.stairWidth||1*this.gridSize,this.drawStairs(t.startPoint,t.endPoint),this.stairSteps=o,this.stairWidth=n,void this.ctx.restore()}if(this.ctx.stroke(),"line"===t.tool){const e=t.lineStyle||(t.hasArrow?"arrow":"solid");console.log("保存済み直線の線スタイル確認:",{lineStyle:e,pathDataLineStyle:t.lineStyle,pathDataHasArrow:t.hasArrow}),"arrow"===e&&(console.log("保存済み図形で矢印を描画します"),this.drawArrowHead(this.ctx,t.startPoint.x,t.startPoint.y,t.endPoint.x,t.endPoint.y))}}this.ctx.restore()}),this.selectedTextBox&&this.drawSelectionHandles(this.selectedTextBox),this.openings.forEach(t=>{this.drawSingleOpening(t)}),this.showOpeningPreview&&this.openingPreviewCoords&&this.drawOpeningPreview(),this.showEraserPreview&&this.eraserPreviewCoords&&this.drawEraserPreview(),this.showShapePreview&&this.startPoint&&this.previewEndPoint&&this.drawShapePreview(this.startPoint,this.previewEndPoint),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.setLineDash([]),this.ctx.strokeStyle=this.strokeColor,this.ctx.fillStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth,this.ctx.lineCap="round",this.ctx.lineJoin="round"}drawShapePreview(t,e){if(this.ctx.setTransform(this.scale,0,0,this.scale,this.translateX,this.translateY),this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=this.strokeWidth+6,"line"===this.currentTool)if(console.log("プレビューでlineStyle:",this.lineStyle),"dashed"===this.lineStyle){const t=20,e=15;console.log("プレビューで点線を設定:",{dashLength:t,gapLength:e,strokeWidth:this.strokeWidth}),this.ctx.setLineDash([t,e])}else this.ctx.setLineDash([]);else this.ctx.setLineDash([]);switch(this.ctx.beginPath(),this.currentTool){case"line":this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y),this.ctx.stroke(),"arrow"===this.lineStyle&&(console.log("プレビューで矢印を描画:",{start:t,end:e}),this.drawArrowHead(this.ctx,t.x,t.y,e.x,e.y));break;case"rectangle":const s=e.x-t.x,i=e.y-t.y;this.ctx.rect(t.x,t.y,s,i),this.ctx.stroke();break;case"door":return void this.drawDoor(t,e);case"stairs":return void this.drawStairs(t,e)}}drawSelectionHandles(t){const e=this.ctx.strokeStyle,s=this.ctx.fillStyle,i=this.ctx.lineWidth,o=this.ctx.font,n=this.ctx.textAlign,a=this.ctx.textBaseline,r=this.calculateActualTextBoxSize(t),h=this.getResizeHandles(t);this.ctx.strokeStyle="#8B5CF6",this.ctx.lineWidth=1,this.ctx.setLineDash([3,3]),this.ctx.beginPath(),this.ctx.rect(t.x,t.y,r.width,r.height),this.ctx.stroke(),this.ctx.setLineDash([]);const l=this.handleSize,c=t.x+l,d=t.y+l,x=Math.max(0,r.width-2*l),g=Math.max(0,r.height-2*l);if(x>0&&g>0){this.ctx.fillStyle="rgba(139, 92, 246, 0.1)",this.ctx.fillRect(c,d,x,g);const e=t.x+t.width/2,s=t.y+t.height/2;this.ctx.fillStyle="rgba(139, 92, 246, 0.5)",this.ctx.font="10px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText("⊹",e,s)}this.ctx.fillStyle="#ffffff",this.ctx.strokeStyle="#8B5CF6",this.ctx.lineWidth=1.5;for(let u in h){const t=h[u];"w"!==u&&"e"!==u||(this.ctx.save(),this.ctx.fillStyle="rgba(0, 0, 0, 0.15)",this.ctx.fillRect(t.x-this.handleSize/2+1,t.y-this.handleSize/2+1,this.handleSize,this.handleSize),this.ctx.restore(),this.ctx.beginPath(),this.ctx.rect(t.x-this.handleSize/2,t.y-this.handleSize/2,this.handleSize,this.handleSize),this.ctx.fillStyle="#ffffff",this.ctx.fill(),this.ctx.strokeStyle="#8B5CF6",this.ctx.stroke(),this.ctx.beginPath(),this.ctx.arc(t.x,t.y,1.5,0,2*Math.PI),this.ctx.fillStyle="#8B5CF6",this.ctx.fill())}this.ctx.strokeStyle=e,this.ctx.fillStyle=s,this.ctx.lineWidth=i,this.ctx.font=o,this.ctx.textAlign=n,this.ctx.textBaseline=a}drawVerticalText(t,e,s,i){t.split("").forEach((t,o)=>{this.ctx.fillText(t,e,s+o*i)})}drawTextBoxPreview(t,e){this.ctx.strokeStyle="#007AFF",this.ctx.lineWidth=1,this.ctx.setLineDash([5,5]),this.ctx.beginPath();const s=e.x-t.x,i=e.y-t.y;this.ctx.rect(t.x,t.y,s,i),this.ctx.stroke(),this.ctx.setLineDash([])}createTextBox(t,e){const s=Math.abs(e.x-t.x),i=Math.abs(e.y-t.y),o=(t.x+e.x)/2,n=(t.y+e.y)/2,a="text-vertical"===this.currentTool,r=a?60:120,h=Math.max(s,r),l=Math.max(i,60);this.createTextBoxAuto(o,n,h,l,a)}createTextBoxAuto(t,e,s,i,o){console.log("=== createTextBoxAuto が呼ばれました ==="),console.log("既存のテキスト入力状態:",{textInput:this.textInput,parentNode:this.textInput?this.textInput.parentNode:null,allPathsCount:this.allPaths.length});if(this.allPaths.some(t=>"textbox"===t.tool&&t.isSelected)||this.textInput&&this.textInput.parentNode)return void console.log("編集中のテキストボックスがあるため、新しいテキストボックスの作成をスキップします");const n={tool:"textbox",x:t-s/2,y:e-i/2,width:s,height:i,text:"",fontSize:this.fontSize,fontFamily:'"Noto Sans JP", "Hiragino Sans", "Yu Gothic", "Meiryo", Arial, sans-serif',strokeColor:this.strokeColor,isVertical:o,isSelected:!0};this.allPaths.forEach(t=>{"textbox"===t.tool&&(t.isSelected=!1)}),this.setSelectedTextBox(n),this.allPaths.push(n),this.redoStack=[],this.lastOperationType="path",console.log("テキストボックス作成: lastOperationType = path"),console.log("作成されたテキストボックス:",n),console.log("allPaths配列:",this.allPaths),this.redrawCanvas(),this.editTextBox(n)}editTextBox(t){console.log("=== editTextBox 開始 ==="),console.log("textBoxData:",t),console.log("isVertical:",t.isVertical);if(this.allPaths.some(e=>"textbox"===e.tool&&e.isSelected&&e!==t)||this.textInput&&this.textInput.parentNode){console.log("他の編集中のテキストボックスがあるため、編集をスキップします");const e=this.allPaths.indexOf(t);return void(e>-1&&(this.allPaths.splice(e,1),console.log("重複テキストボックスを削除"),this.redrawCanvas()))}this.removeTextInput();const e=this.canvas.getBoundingClientRect(),s=this.canvas.parentElement;t.isVertical?(this.textInput=document.createElement("div"),this.textInput.contentEditable=!0,this.textInput.setAttribute("role","textbox"),this.textInput.setAttribute("aria-multiline","true"),this.textInput.textContent=t.text||""):(this.textInput=document.createElement("textarea"),this.textInput.value=t.text,this.textInput.placeholder="横書きテキスト"),this.textInput.className="text-input-overlay";const i=t.fontSize,o=Math.max(4,.2*i),n=window.devicePixelRatio||1,a=t.x*this.scale+this.translateX,r=t.y*this.scale+this.translateY,h=t.width*this.scale,l=t.height*this.scale;if(this.textInput.style.position="absolute",t.isVertical?(this.textInput.style.left=a/n+e.left-s.offsetLeft+o-3*i+"px",this.textInput.style.top=`${r/n+e.top-s.offsetTop+o}px`):(this.textInput.style.left=`${a/n+e.left-s.offsetLeft+o}px`,this.textInput.style.top=`${r/n+e.top-s.offsetTop+o}px`),t.isVertical){const t=Math.max(3.5*i,80),e=Math.max(10*i,250);this.textInput.style.width=`${t}px`,this.textInput.style.height=`${e}px`}else{const t=Math.max(80,h-2*o,5*i),e=Math.max(40,l/n-2*o,2*i);this.textInput.style.width=`${t}px`,this.textInput.style.height=`${e}px`}this.textInput.style.fontSize=i/n+"px",this.textInput.style.fontFamily=t.fontFamily,this.textInput.style.color=t.strokeColor,this.textInput.style.background="rgba(255, 255, 255, 0.8)",this.textInput.style.border="2px solid #007AFF",this.textInput.style.borderRadius="4px",this.textInput.style.padding="2px",this.textInput.style.resize="none",this.textInput.style.zIndex="1000",this.textInput.style.overflow="hidden",this.textInput.style.boxSizing="border-box",this.textInput.style.lineHeight="1.3",this.textInput.style.cursor="text",t.isVertical?(console.log("縦書きテキストボックス編集 - 縦書きスタイルを適用"),this.textInput.classList.add("vertical"),this.textInput.classList.remove("horizontal"),this.textInput.style.setProperty("writing-mode","vertical-rl","important"),this.textInput.style.setProperty("-webkit-writing-mode","vertical-rl","important"),this.textInput.style.setProperty("-ms-writing-mode","tb-rl","important"),this.textInput.style.setProperty("text-orientation","upright","important"),this.textInput.style.setProperty("-webkit-text-orientation","upright","important"),this.textInput.style.setProperty("direction","ltr","important"),this.textInput.style.minWidth="40px",this.textInput.style.minHeight="80px",this.textInput.setAttribute("dir","ltr")):(console.log("横書きテキストボックス編集 - 横書きスタイルを適用"),this.textInput.classList.add("horizontal"),this.textInput.classList.remove("vertical"),this.textInput.style.setProperty("writing-mode","horizontal-tb","important"),this.textInput.style.setProperty("-webkit-writing-mode","horizontal-tb","important"),this.textInput.style.setProperty("-ms-writing-mode","lr-tb","important"),this.textInput.style.setProperty("text-orientation","mixed","important"),this.textInput.style.setProperty("-webkit-text-orientation","mixed","important"),this.textInput.style.setProperty("direction","ltr","important"),this.textInput.removeAttribute("dir")),this.selectedTextBox=t,this.currentTextBox=t,this.textInput.addEventListener("blur",()=>this.finishTextBoxEdit()),this.textInput.addEventListener("keydown",e=>{if("Escape"===e.key)this.cancelTextBoxEdit();else if("Enter"===e.key)if(t.isVertical&&this.textInput.contentEditable)if(e.ctrlKey)e.preventDefault(),this.finishTextBoxEdit();else{e.preventDefault();const t=window.getSelection(),s=t.getRangeAt(0),i=document.createElement("br");s.deleteContents(),s.insertNode(i),s.setStartAfter(i),s.collapse(!0),t.removeAllRanges(),t.addRange(s)}else t.isVertical,e.ctrlKey&&(e.preventDefault(),this.finishTextBoxEdit())}),s.appendChild(this.textInput),console.log("=== テキスト入力要素のスタイル確認 ==="),console.log("writingMode:",this.textInput.style.writingMode),console.log("textOrientation:",this.textInput.style.textOrientation),console.log("isVertical:",t.isVertical),setTimeout(()=>{if(this.textInput.focus(),this.textInput.style.cursor="text",this.textInput.select)this.textInput.select();else{const t=document.createRange();t.selectNodeContents(this.textInput);const e=window.getSelection();e.removeAllRanges(),e.addRange(t)}},10)}finishTextBoxEdit(){if(!this.textInput||!this.selectedTextBox)return;const t=(void 0!==this.textInput.value?this.textInput.value:this.textInput.textContent||this.textInput.innerText||"").trim();this.selectedTextBox.text=t,this.removeTextInput(),this.selectedTextBox=null,this.currentTextBox=null,this.redrawCanvas()}cancelTextBoxEdit(){if(this.selectedTextBox){if(!this.selectedTextBox.text.trim()){const t=this.allPaths.indexOf(this.selectedTextBox);t>-1&&this.allPaths.splice(t,1)}this.removeTextInput(),this.selectedTextBox=null,this.currentTextBox=null,this.redrawCanvas()}}drawTextBox(t){console.log("=== drawTextBox 開始 ==="),console.log("textBoxData:",t),this.ctx.strokeStyle="#CCCCCC",this.ctx.lineWidth=1;let{x:e,y:s,width:i,height:o,text:n,fontSize:a,fontFamily:r,strokeColor:h,isVertical:l}=t;this.ctx.font=`${a}px ${r}`;const c=i,d=Math.max(4,.2*a),x=1.3*a;if(n&&n.trim())if(this.ctx.fillStyle=h,l){const t=n.split("\n");let e=0,s=t.length;for(let i of t)e=Math.max(e,i.length);const r=e*a+2*d,h=s*a*1.2+2*d;o<r&&(o=r),i<h&&(i=h)}else{const t=n.split("\n");let e=[],s=0;for(let i of t){if(""===i){e.push("");continue}const t=i.split("");let o="";for(let i of t){const t=o+i;this.ctx.measureText(t).width>c-2*d&&""!==o?(e.push(o),s=Math.max(s,this.ctx.measureText(o).width),o=i):o=t}o&&(e.push(o),s=Math.max(s,this.ctx.measureText(o).width))}const a=e.length*x+2*d;o<a&&(o=a),i<s+2*d&&(i=s+2*d)}if(this.ctx.beginPath(),this.ctx.rect(e,s,i,o),console.log("テキストボックス枠を描画:",{x:e,y:s,width:i,height:o}),this.ctx.stroke(),n&&n.trim()){if(this.ctx.fillStyle=h,l){this.ctx.textAlign="center",this.ctx.textBaseline="middle";const t=n.split("\n"),r=t.length,h=1.2*a,l=r*h,c=Math.max(...t.map(t=>t.length)),d=e+i/2-(l-h)/2,x=s+o/2-c*a/2;t.forEach((t,e)=>{const s=t.split(""),i=d+e*h;s.forEach((t,e)=>{const s=x+e*a+a/2;this.ctx.fillText(t,i,s)})})}else{this.ctx.textAlign="left",this.ctx.textBaseline="middle";const t=n.split("\n");let r=[];for(let e of t){if(""===e){r.push("");continue}const t=e.split("");let s="";for(let e of t){const t=s+e;this.ctx.measureText(t).width>i-2*d&&""!==s?(r.push(s),s=e):s=t}s&&r.push(s)}const h=s+(o-r.length*x)/2+a/2;r.forEach((t,s)=>{const i=e+d,o=h+s*x;this.ctx.fillText(t,i,o)})}this.ctx.textAlign="start",this.ctx.textBaseline="alphabetic"}}handleSelection(t){console.log("handleSelection called");const e=this.getCoordinates(t);if(console.log("Click coordinates:",e),this.selectedTextBox){console.log("Already selected textbox:",this.selectedTextBox);const t=this.getResizeHandle(e,this.selectedTextBox);if(t)return console.log("Resize handle clicked:",t),this.isResizing=!0,this.resizeHandle=t,void(this.startPoint=e);if(this.isPointInTextBox(e,this.selectedTextBox))return console.log("Starting to drag textbox"),this.isDraggingTextBox=!0,void(this.dragOffset={x:e.x-this.selectedTextBox.x,y:e.y-this.selectedTextBox.y})}const s=this.getTextBoxAt(e);console.log("Found textbox at click:",s),s?(console.log("Selecting textbox:",s),this.selectedTextBox=s,this.redrawCanvas()):(console.log("Deselecting textbox"),this.selectedTextBox=null,this.redrawCanvas())}getTextBoxAt(t){console.log("Searching for textbox at:",t),console.log("Total paths:",this.allPaths.length);for(let e=this.allPaths.length-1;e>=0;e--){const s=this.allPaths[e];if(console.log(`Path ${e}:`,s.tool,s),"textbox"===s.tool&&this.isPointInTextBox(t,s))return console.log("Found matching textbox:",s),s}return console.log("No textbox found at coordinates"),null}isPointInTextBox(t,e){const s=this.calculateActualTextBoxSize(e);return t.x>=e.x&&t.x<=e.x+s.width&&t.y>=e.y&&t.y<=e.y+s.height}calculateActualTextBoxSize(t){if(!t.text||!t.text.trim())return{width:t.width,height:t.height};const e=this.ctx.font;this.ctx.font=`${t.fontSize}px ${t.fontFamily||"Arial"}`;let{width:s,height:i,fontSize:o,isVertical:n,text:a}=t;const r=Math.max(4,.2*o),h=1.3*o;if(n){const t=a.split("\n");let e=0,n=t.length;for(let s of t)e=Math.max(e,s.length);const h=e*o+2*r,l=n*o*1.2+2*r;i=Math.max(i,h),s=Math.max(s,l)}else{const t=a.split("\n");let e=[],o=0;for(let i of t){if(""===i){e.push("");continue}const t=this.ctx.measureText(i).width;o=Math.max(o,t);const n=i.split("");let a="";for(let i of n){const t=a+i;this.ctx.measureText(t).width>s-2*r&&""!==a?(e.push(a),a=i):a=t}a&&e.push(a)}const n=e.length*h+2*r;i=Math.max(i,n);const l=o+2*r;s=Math.max(s,l)}return this.ctx.font=e,{width:s,height:i}}isPointInMoveArea(t,e){const s=this.calculateActualTextBoxSize(e),i=this.handleSize,o=e.x+i,n=e.y+i,a=Math.max(0,s.width-2*i),r=Math.max(0,s.height-2*i),h=t.x>=o&&t.x<=o+a&&t.y>=n&&t.y<=n+r;return console.log("移動エリア判定:",{coords:t,moveArea:{x:o,y:n,width:a,height:r},actualSize:s,isInMoveArea:h}),h}getResizeHandle(t,e){const s=this.getResizeHandles(e),i=2.5*this.handleSize;console.log("ハンドル検出試行:",{coords:t,textBox:{x:e.x,y:e.y,width:e.width,height:e.height},detectionSize:i});const o=["w","e"];for(let n of o){const e=s[n],o=i/2,a=t.x>=e.x-o&&t.x<=e.x+o&&t.y>=e.y-o&&t.y<=e.y+o;if(console.log(`ハンドル${n}検出:`,{handle:e,range:{left:e.x-o,right:e.x+o,top:e.y-o,bottom:e.y+o},isInRange:a}),a)return console.log("✅ ハンドル検出成功:",n),n}return console.log("❌ ハンドル検出失敗"),null}resizeTextBox(t,e,s){console.log("🔄 リサイズ実行:",{handle:e,coords:s,textBox:{x:t.x,y:t.y,width:t.width,height:t.height}});const i=Math.max(30,3*this.fontSize);Math.max(20,2*this.fontSize);let o=t.width;switch(t.height,t.x,t.y,t.width,t.height,e){case"w":o=t.width+(t.x-s.x),o>=i&&(t.width=o,t.x=s.x);break;case"e":o=s.x-t.x,o>=i&&(t.width=o)}console.log("✅ リサイズ完了:",{handle:e,coords:s,textBox:{x:t.x,y:t.y,width:t.width,height:t.height}}),this.redrawCanvas()}updateCursorForPosition(t){const e=this.getCoordinates(t);if(this.selectedTextBox){const t=this.getResizeHandle(e,this.selectedTextBox);if(t){switch(t){case"nw":case"se":this.canvas.style.cursor="nw-resize";break;case"ne":case"sw":this.canvas.style.cursor="ne-resize";break;case"n":case"s":this.canvas.style.cursor="ns-resize";break;case"w":case"e":this.canvas.style.cursor="ew-resize";break;default:this.canvas.style.cursor="default"}return}if(this.isPointInTextBox(e,this.selectedTextBox))return void(this.isPointInMoveArea(e,this.selectedTextBox)?this.canvas.style.cursor="move":this.canvas.style.cursor="grab")}for(let s=this.allPaths.length-1;s>=0;s--){const t=this.allPaths[s];if("textbox"===t.tool){const s=this.getResizeHandle(e,t);if(s){switch(s){case"nw":case"se":this.canvas.style.cursor="nw-resize";break;case"ne":case"sw":this.canvas.style.cursor="ne-resize";break;case"n":case"s":this.canvas.style.cursor="ns-resize";break;case"w":case"e":this.canvas.style.cursor="ew-resize";break;default:this.canvas.style.cursor="default"}return}if(this.isPointInTextBox(e,t))return void(this.isPointInMoveArea(e,t)?this.canvas.style.cursor="move":this.canvas.style.cursor="pointer")}}this.updateCursor()}getResizeHandles(t){const e=this.calculateActualTextBoxSize(t),s=t.x,i=t.y,o=e.width,n=e.height;return{nw:{x:s,y:i},ne:{x:s+o,y:i},sw:{x:s,y:i+n},se:{x:s+o,y:i+n},n:{x:s+o/2,y:i},s:{x:s+o/2,y:i+n},w:{x:s,y:i+n/2},e:{x:s+o,y:i+n/2}}}handleSelectDrag(t){const e=this.getCoordinates(t);this.isResizing&&this.selectedTextBox&&this.resizeHandle?(this.resizeTextBox(this.selectedTextBox,this.resizeHandle,e),this.redrawCanvas()):this.isDraggingTextBox&&this.selectedTextBox&&(this.selectedTextBox.x=e.x-this.dragOffset.x,this.selectedTextBox.y=e.y-this.dragOffset.y,this.redrawCanvas())}setStrokeWidth(t){this.strokeWidth=t,this.ctx.lineWidth=t}setPenWidth(t){this.penWidth=t,"pen"===this.currentTool&&(this.strokeWidth=t,this.ctx.lineWidth=t)}setEraserSize(t){this.eraserSize=t}setStrokeColor(t){console.log("setStrokeColor called with:",t),this.strokeColor=t,this.ctx.strokeStyle=t,this.ctx.fillStyle=t,console.log("Updated strokeColor:",this.strokeColor,"ctx.strokeStyle:",this.ctx.strokeStyle)}setFontSize(t){if(this.fontSize=t,this.selectedTextBox){if(this.selectedTextBox.fontSize=t,this.textInput&&this.textInput.parentNode){const t=this.selectedTextBox,e=Math.min(t.fontSize,t.height/2,t.width/4),s=Math.max(8,e);this.textInput.style.fontSize=s*dpr+"px"}this.redrawCanvas()}}setSelectedTextBox(t){this.selectedTextBox&&(this.selectedTextBox.isSelected=!1,this.emit("textBoxDeselected")),this.selectedTextBox=t,t&&(t.isSelected=!0,this.emit("textBoxSelected",t))}clearTextBoxSelection(){this.allPaths.forEach(t=>{"textbox"===t.tool&&(t.isSelected=!1)}),this.selectedTextBox&&(this.selectedTextBox=null,this.emit("textBoxDeselected"))}setTool(t){this.currentTool=t,this.showEraserPreview=!1,this.eraserPreviewCoords=null,this.cancelTouchEraserPreview(),"pen"===t?(this.strokeWidth=this.penWidth,this.ctx.lineWidth=this.penWidth):(this.strokeWidth=2,this.ctx.lineWidth=2),this.ctx.strokeStyle=this.strokeColor,this.ctx.fillStyle=this.strokeColor,this.updateCursor(),this.redrawCanvas()}setSnapToGrid(t){this.snapToGrid=t}createTextInput(t){console.log("createTextInput開始:",t,"ツール:",this.currentTool),this.removeTextInput();const e=this.canvas.getBoundingClientRect(),s=this.canvas.parentElement;console.log("container:",s,"rect:",e);const i="text-vertical"===this.currentTool;i?(this.textInput=document.createElement("div"),this.textInput.contentEditable=!0,this.textInput.setAttribute("role","textbox"),this.textInput.setAttribute("aria-multiline","true")):this.textInput=document.createElement("textarea"),this.textInput.className="text-input-overlay",this.textInput.style.position="absolute",this.textInput.style.cursor="text",i?(this.textInput.style.left=t.x+e.left-s.offsetLeft-3*this.fontSize+"px",this.textInput.style.top=t.y+e.top-s.offsetTop+"px"):(this.textInput.style.left=t.x+e.left-s.offsetLeft+"px",this.textInput.style.top=t.y+e.top-s.offsetTop+"px"),this.textInput.style.fontSize=`${this.fontSize}px`,this.textInput.style.fontFamily="Arial, sans-serif",this.textInput.style.color=this.strokeColor,this.textInput.style.background="rgba(255, 255, 255, 0.8)",this.textInput.style.border="2px solid #007AFF",this.textInput.style.borderRadius="4px",this.textInput.style.padding="4px",this.textInput.style.resize="none",this.textInput.style.zIndex="1000",i?(this.textInput.style.minWidth=3.5*this.fontSize+"px",this.textInput.style.minHeight=10*this.fontSize+"px",this.textInput.style.width=3.5*this.fontSize+"px",this.textInput.style.height=10*this.fontSize+"px"):(this.textInput.style.minWidth="50px",this.textInput.style.minHeight="20px"),this.textInput.style.display="block",this.textInput.style.visibility="visible",this.textInput.style.opacity="1",i?(this.textInput.classList.add("vertical"),this.textInput.classList.remove("horizontal"),this.textInput.style.setProperty("writing-mode","vertical-rl","important"),this.textInput.style.setProperty("-webkit-writing-mode","vertical-rl","important"),this.textInput.style.setProperty("-ms-writing-mode","tb-rl","important"),this.textInput.style.setProperty("text-orientation","upright","important"),this.textInput.style.setProperty("-webkit-text-orientation","upright","important"),this.textInput.style.setProperty("direction","ltr","important"),this.textInput.style.minWidth="20px",this.textInput.style.minHeight="50px",this.textInput.setAttribute("dir","ltr")):(this.textInput.classList.add("horizontal"),this.textInput.classList.remove("vertical"),this.textInput.style.setProperty("writing-mode","horizontal-tb","important"),this.textInput.style.setProperty("-webkit-writing-mode","horizontal-tb","important"),this.textInput.style.setProperty("-ms-writing-mode","lr-tb","important"),this.textInput.style.setProperty("text-orientation","mixed","important"),this.textInput.style.setProperty("-webkit-text-orientation","mixed","important"),this.textInput.style.setProperty("direction","ltr","important"),this.textInput.removeAttribute("dir")),this.textInput.placeholder=i?"縦書きテキスト":"横書きテキスト",this.textInput.addEventListener("blur",()=>this.finishTextInput()),this.textInput.addEventListener("keydown",t=>{if("Escape"===t.key)this.removeTextInput();else if("Enter"===t.key)if(i&&this.textInput.contentEditable)if(t.ctrlKey)t.preventDefault(),this.finishTextInput();else{t.preventDefault();const e=window.getSelection(),s=e.getRangeAt(0),i=document.createElement("br");s.deleteContents(),s.insertNode(i),s.setStartAfter(i),s.collapse(!0),e.removeAllRanges(),e.addRange(s)}else t.ctrlKey&&(t.preventDefault(),this.finishTextInput())}),s.appendChild(this.textInput),console.log("テキスト入力要素をDOMに追加しました:",this.textInput),console.log("要素のスタイル:",{position:this.textInput.style.position,left:this.textInput.style.left,top:this.textInput.style.top,zIndex:this.textInput.style.zIndex,display:this.textInput.style.display,visibility:this.textInput.style.visibility}),setTimeout(()=>{this.textInput.focus(),this.textInput.style.cursor="text",console.log("フォーカスを設定しました。縦書き:",i)},10)}finishTextInput(){if(console.log("=== finishTextInput が呼ばれました ==="),console.log("テキスト入力状態:",{textInput:this.textInput,parentNode:this.textInput?this.textInput.parentNode:null,allPathsCount:this.allPaths.length}),!this.textInput||!this.textInput.parentNode)return void console.log("テキスト入力が存在しないため、処理をスキップします");let t;if(void 0!==this.textInput.value)t=this.textInput.value.trim();else{let e=this.textInput.innerHTML;e=e.replace(/<br\s*\/?>/gi,"\n");const s=document.createElement("div");s.innerHTML=e,t=(s.textContent||s.innerText||"").trim()}const e=this.allPaths.find(t=>"textbox"===t.tool&&t.isSelected);if(e){if(e.text=t,console.log("=== テキストボックス更新 ==="),console.log("テキスト:",t),console.log("テキストボックス:",e),t)this.adjustTextBoxSize(e),e.isSelected=!1,this.selectedTextBox=null;else{const t=this.allPaths.indexOf(e);t>-1&&(this.allPaths.splice(t,1),console.log("空のテキストボックスを削除")),this.selectedTextBox=null}this.redrawCanvas()}this.removeTextInput()}adjustTextBoxSize(t){if(this.ctx.font=`${t.fontSize}px ${t.fontFamily}`,t.isVertical){const e=t.text.split("\n");let s=0,i=e.length;for(let t of e)s=Math.max(s,t.length);t.width=Math.max(i*t.fontSize*1.2,30),t.height=Math.max(s*t.fontSize*1.2,50)}else{const e=t.text.split("\n");let s=0,i=0;for(let o of e){if(""===o){i++;continue}const e=this.ctx.measureText(o).width;s=Math.max(s,e);const n=t.width-20;e>n&&n>0?i+=Math.ceil(e/n):i++}t.width=Math.max(s+20,50),t.height=Math.max(i*t.fontSize*1.4,30)}}removeTextInput(){if(this.textInput){try{this.textInput.parentNode&&this.textInput.parentNode.removeChild(this.textInput)}catch(t){console.log("Text input already removed")}this.textInput=null}}removeCurrentTextBox(){console.log("=== removeCurrentTextBox 開始 ==="),console.log("削除前の状態:",{textInput:this.textInput,allPathsCount:this.allPaths.length,selectedTextBox:this.selectedTextBox}),this.removeTextInput();const t=this.allPaths.findIndex(t=>"textbox"===t.tool&&t.isSelected&&(!t.text||""===t.text.trim()));if(console.log("削除対象の空テキストボックスのインデックス:",t),-1!==t){const e=this.allPaths.splice(t,1)[0];console.log("削除された空のテキストボックス:",e),console.log("空のテキストボックスを削除しました")}else{console.log("削除対象の空テキストボックスが見つかりませんでした");const t=this.allPaths.find(t=>"textbox"===t.tool&&t.isSelected&&t.text&&""!==t.text.trim());t&&(console.log("テキストが入力済みのテキストボックスは削除せず選択解除のみ行います:",t),t.isSelected=!1)}this.selectedTextBox=null,console.log("削除後の状態:",{allPathsCount:this.allPaths.length,selectedTextBox:this.selectedTextBox}),this.redrawCanvas(),console.log("=== removeCurrentTextBox 完了 ===")}updateCursor(){this.canvas.classList.remove("tool-pen","tool-line","tool-rectangle","tool-circle","tool-text-horizontal","tool-text-vertical","tool-select","tool-door","tool-stairs"),this.canvas.classList.add(`tool-${this.currentTool.replace("-","-")}`);let t="crosshair";"pen"===this.currentTool||"line"===this.currentTool||"rectangle"===this.currentTool||"circle"===this.currentTool||"door"===this.currentTool||"stairs"===this.currentTool?t="crosshair":"text-horizontal"===this.currentTool||"text-vertical"===this.currentTool?t="text":"select"===this.currentTool&&(t="default"),this.canvas.style.cursor=t}clear(){this.allPaths=[],this.redoStack=[],this.openings=[],this.selectedOpening=null,this.isDraggingOpening=!1,this.openingsHistory=[],this.openingsRedoStack=[],this.saveOpeningsState(),this.redrawCanvas()}eraseAtPoint(t){const e=this.eraserSize,s=[],i=[];let o=!1;const n=[];for(let r=0;r<this.openings.length;r++){const e=this.openings[r];t.x>=e.x&&t.x<=e.x+e.width&&t.y>=e.y&&t.y<=e.y+e.height&&(n.push(r),o=!0)}o&&this.saveOpeningsState();for(let r=n.length-1;r>=0;r--)this.openings.splice(n[r],1);this.selectedOpening&&n.length>0&&(this.selectedOpening=null);for(let r=0;r<this.allPaths.length;r++){const o=this.allPaths[r];if("pen"===o.tool)for(let i=0;i<o.path.length;i++){const n=o.path[i];if(Math.sqrt(Math.pow(t.x-n.x,2)+Math.pow(t.y-n.y,2))<=e){s.push(r);break}}else if("textbox"===o.tool)this.isPointInTextBox(t,o)&&s.push(r);else if("line"===o.tool){if("arrow"===o.lineStyle){const n=this.getArrowHeadRegion(o.startPoint,o.endPoint);if(this.isPointInArrowHead(t,n,e))console.log("矢印の先端部分を削除するため、矢印全体を削除します"),s.push(r);else{const s=this.getLineSegmentsHalfGrid(o),a=[];for(let i=0;i<s.length;i++){const o=s[i];!this.isSegmentInArrowHead(o,n)&&this.isPointNearLineSegment(t,o.start,o.end,e)&&a.push(i)}if(a.length>0){console.log("矢印の線部分のみを部分削除します");const t=this.removeLineSegmentsHalfGrid(o,a);t.forEach(t=>{t.lineStyle="arrow"}),i.push({index:r,newPaths:t})}}continue}if("dashed"===o.lineStyle||o.isDashed){const s=this.getLineSegmentsHalfGrid(o),n=[];for(let i=0;i<s.length;i++){const o=s[i];this.isPointNearLineSegment(t,o.start,o.end,e)&&n.push(i)}if(n.length>0){console.log("点線の部分削除を実行します");const t=this.removeLineSegmentsHalfGrid(o,n);t.forEach(t=>{t.lineStyle=o.lineStyle||"dashed",t.isDashed=!0}),i.push({index:r,newPaths:t})}continue}const n=this.getLineSegmentsHalfGrid(o),a=[];for(let s=0;s<n.length;s++){const i=n[s];this.isPointNearLineSegment(t,i.start,i.end,e)&&a.push(s)}if(a.length>0){const t=this.removeLineSegmentsHalfGrid(o,a);i.push({index:r,newPaths:t})}}else if("rectangle"===o.tool){const s=this.getRectangleSegmentsHalfGrid(o),n=[];for(let i=0;i<s.length;i++){const o=s[i];this.isPointNearLineSegment(t,o.start,o.end,e)&&n.push(i)}if(n.length>0){const t=this.removeRectangleSegmentsHalfGrid(o,n);i.push({index:r,newPaths:t})}}else"stairs"===o.tool?this.isPointNearShape(t,o,e)?(console.log("階段を削除します:",{coords:t,startPoint:o.startPoint,endPoint:o.endPoint,stairWidth:o.stairWidth}),s.push(r)):console.log("階段判定: ヒットせず",{coords:t,distance:this.distanceToLine(t,o.startPoint,o.endPoint),eraserSize:e}):"door"===o.tool?this.isPointNearShape(t,o,e)&&(console.log("扉を削除します"),s.push(r)):o.startPoint&&o.endPoint&&this.isPointNearShape(t,o,e)&&s.push(r)}const a=[...new Set(s)].sort((t,e)=>e-t);for(const r of a)this.allPaths.splice(r,1);i.sort((t,e)=>e.index-t.index);for(const r of i){let t=r.index;for(const e of a)e<r.index&&t--;this.allPaths.splice(t,1),this.allPaths.splice(t,0,...r.newPaths)}(a.length>0||i.length>0)&&this.redrawCanvas()}updateEraserPreview(t){this.eraserPreviewTimeout&&clearTimeout(this.eraserPreviewTimeout);const e=this.getCoordinates(t);this.eraserPreviewCoords=e,this.showEraserPreview=!0,this.eraserPreviewTimeout=setTimeout(()=>{this.redrawCanvas()},16)}startTouchEraserPreview(t){const e=this.getCoordinates(t);this.eraserPreviewCoords=e,this.showEraserPreview=!0,this.isShowingTouchPreview=!0,this.redrawCanvas(),this.touchPreviewTimer=setTimeout(()=>{this.isShowingTouchPreview=!1,this.isDrawing=!0,this.startPoint=e,this.currentPath=[e],this.canvas.classList.add("drawing"),this.eraseAtPoint(e)},300)}cancelTouchEraserPreview(){this.touchPreviewTimer&&(clearTimeout(this.touchPreviewTimer),this.touchPreviewTimer=null),this.isShowingTouchPreview=!1,this.showEraserPreview=!1,this.redrawCanvas()}drawEraserPreview(){if(!this.eraserPreviewCoords)return;const t=this.eraserSize,e=this.eraserPreviewCoords;this.ctx.save(),this.isShowingTouchPreview?(this.ctx.strokeStyle="#FF3030",this.ctx.fillStyle="rgba(255, 48, 48, 0.4)",this.ctx.lineWidth=3,this.ctx.setLineDash([4,4])):(this.ctx.strokeStyle="#FF6B6B",this.ctx.fillStyle="rgba(255, 107, 107, 0.2)",this.ctx.lineWidth=2,this.ctx.setLineDash([5,5])),this.ctx.beginPath(),this.ctx.arc(e.x,e.y,t,0,2*Math.PI),this.ctx.fill(),this.ctx.stroke(),this.ctx.setLineDash([]),this.isShowingTouchPreview&&(this.ctx.strokeStyle="#FF3030",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.moveTo(e.x-6,e.y),this.ctx.lineTo(e.x+6,e.y),this.ctx.moveTo(e.x,e.y-6),this.ctx.lineTo(e.x,e.y+6),this.ctx.stroke()),this.highlightTargetElements(e,t),this.ctx.restore()}highlightTargetElements(t,e){const s=[],i=[];for(let o=0;o<this.allPaths.length;o++){const n=this.allPaths[o];let a=!1;if("pen"===n.tool){for(let s=0;s<n.path.length;s++){const i=n.path[s];if(Math.sqrt(Math.pow(t.x-i.x,2)+Math.pow(t.y-i.y,2))<=e){a=!0;break}}a&&s.push(n)}else if("textbox"===n.tool)this.isPointInTextBox(t,n)&&s.push(n);else if("line"===n.tool){const s=this.getLineSegments(n),o=[];for(let i=0;i<s.length;i++){const n=s[i];this.isPointNearLineSegment(t,n.start,n.end,e)&&o.push(n)}if(o.length>0){const t=this.groupConsecutiveSegments(o);i.push(...t)}}else n.startPoint&&n.endPoint&&this.isPointNearShape(t,n,e)&&s.push(n)}this.ctx.save(),this.ctx.strokeStyle="#FF6B6B",this.ctx.lineWidth=3,this.ctx.setLineDash([3,3]),s.forEach(t=>{if(this.ctx.beginPath(),"pen"===t.tool)t.path.length>0&&(this.ctx.moveTo(t.path[0].x,t.path[0].y),t.path.forEach(t=>{this.ctx.lineTo(t.x,t.y)}));else if("textbox"===t.tool)this.ctx.rect(t.x,t.y,t.width,t.height);else if(t.startPoint&&t.endPoint)switch(t.tool){case"line":this.ctx.moveTo(t.startPoint.x,t.startPoint.y),this.ctx.lineTo(t.endPoint.x,t.endPoint.y);break;case"rectangle":const e=t.endPoint.x-t.startPoint.x,s=t.endPoint.y-t.startPoint.y;this.ctx.rect(t.startPoint.x,t.startPoint.y,e,s);break;case"circle":const i=Math.sqrt(Math.pow(t.endPoint.x-t.startPoint.x,2)+Math.pow(t.endPoint.y-t.startPoint.y,2));this.ctx.arc(t.startPoint.x,t.startPoint.y,i,0,2*Math.PI)}this.ctx.stroke()}),this.ctx.strokeStyle="#FF3030",this.ctx.lineWidth=6,this.ctx.setLineDash([4,2]),i.forEach(t=>{this.ctx.beginPath(),this.ctx.moveTo(t.start.x,t.start.y),this.ctx.lineTo(t.end.x,t.end.y),this.ctx.stroke()}),this.ctx.setLineDash([]),this.ctx.restore()}groupConsecutiveSegments(t){if(0===t.length)return[];t.sort((t,e)=>t.index-e.index);const e=[];let s=[t[0]];for(let i=1;i<t.length;i++){const o=t[i],n=t[i-1];o.index===n.index+1?s.push(o):(s.length>0&&e.push({start:s[0].start,end:s[s.length-1].end}),s=[o])}return s.length>0&&e.push({start:s[0].start,end:s[s.length-1].end}),e}isPointNearShape(t,e,s){const{startPoint:i,endPoint:o}=e;switch(e.tool){case"line":case"door":return this.distanceToLine(t,i,o)<=s;case"rectangle":return this.isPointNearRectangle(t,i,o,s);case"circle":return this.isPointNearCircle(t,i,o,s);case"stairs":return this.isPointNearStairs(t,i,o,e.stairWidth||this.gridSize,s);default:return!1}}isPointNearStairs(t,e,s,i,o){if(this.distanceToLine(t,e,s)<=o)return!0;const n=s.x-e.x,a=s.y-e.y,r=Math.sqrt(n*n+a*a);if(0===r)return!1;const h=-(a/r),l=n/r,c=i/2,d=r/11;for(let x=1;x<=10;x++){const s=x*d/r;if(s>=1)break;const i=e.x+n*s,g=e.y+a*s,u={x:i+h*c,y:g+l*c},p={x:i-h*c,y:g-l*c};if(this.distanceToLine(t,u,p)<=o)return!0}return!1}distanceToLine(t,e,s){const i=t.x-e.x,o=t.y-e.y,n=s.x-e.x,a=s.y-e.y,r=i*n+o*a,h=n*n+a*a;if(0===h)return Math.sqrt(i*i+o*o);let l,c,d=r/h;d<0?(l=e.x,c=e.y):d>1?(l=s.x,c=s.y):(l=e.x+d*n,c=e.y+d*a);const x=t.x-l,g=t.y-c;return Math.sqrt(x*x+g*g)}isPointNearLineSegmentImproved(t,e,s,i){const o=this.distanceToLine(t,e,s),n=s.x-e.x,a=s.y-e.y;let r=i;const h=180*Math.abs(Math.atan2(a,n))/Math.PI;return h<10||h>80&&h<100||h>170||(r*=1.4),o<=r}isPointNearRectangle(t,e,s,i){const o=Math.min(e.x,s.x),n=Math.max(e.x,s.x),a=Math.min(e.y,s.y),r=Math.max(e.y,s.y),h=[this.distanceToLine(t,{x:o,y:a},{x:n,y:a}),this.distanceToLine(t,{x:n,y:a},{x:n,y:r}),this.distanceToLine(t,{x:n,y:r},{x:o,y:r}),this.distanceToLine(t,{x:o,y:r},{x:o,y:a})];return Math.min(...h)<=i}isPointNearCircle(t,e,s,i){const o=(e.x+s.x)/2,n=(e.y+s.y)/2,a=Math.abs(s.x-e.x)/2,r=Math.sqrt(Math.pow(t.x-o,2)+Math.pow(t.y-n,2));return Math.abs(r-a)<=i}getLineSegments(t){const{startPoint:e,endPoint:s}=t,i=[],o=s.x-e.x,n=s.y-e.y,a=Math.sqrt(o*o+n*n),r=4*this.strokeWidth/3,h=Math.max(1,Math.ceil(a/r));for(let l=0;l<h;l++){const t=l/h,s=(l+1)/h,a={x:e.x+o*t,y:e.y+n*t},r={x:e.x+o*s,y:e.y+n*s};i.push({start:a,end:r,index:l})}return i}isPointNearLineSegment(t,e,s,i){return this.isPointNearLineSegmentImproved(t,e,s,i)}removeLineSegments(t,e){const s=this.getLineSegments(t),i=[],o=new Set(e);let n=[];for(let a=0;a<s.length;a++)if(o.has(a)){if(n.length>0){const e=this.createLineFromSegments(n,t);e&&i.push(e),n=[]}}else n.push(s[a]);if(n.length>0){const e=this.createLineFromSegments(n,t);e&&i.push(e)}return i}createLineFromSegments(t,e){if(0===t.length)return null;const s=t[0],i=t[t.length-1];return{tool:"line",startPoint:s.start,endPoint:i.end,strokeWidth:e.strokeWidth,strokeColor:e.strokeColor}}zoomAt(t,e,s){console.log("zoomAt called:",{x:t,y:e,zoom:s,currentScale:this.scale});const i=Math.max(this.minScale,Math.min(this.maxScale,this.scale*s));if(i!==this.scale){const s=window.devicePixelRatio||1;t*=s,e*=s;const o=i/this.scale;this.translateX=t-(t-this.translateX)*o,this.translateY=e-(e-this.translateY)*o,this.scale=i,console.log("Zoom applied. New scale:",this.scale,"translate:",this.translateX,this.translateY),this.redrawCanvas()}}getPinchDistance(t){const e=t[0].clientX-t[1].clientX,s=t[0].clientY-t[1].clientY;return Math.sqrt(e*e+s*s)}getPinchCenter(t){const e=this.canvas.getBoundingClientRect(),s=window.devicePixelRatio||1;return{x:((t[0].clientX+t[1].clientX)/2-e.left)*s,y:((t[0].clientY+t[1].clientY)/2-e.top)*s}}resetZoom(){this.scale=1,this.translateX=0,this.translateY=0,this.redrawCanvas()}drawGrid(){if(!this.snapToGrid)return;const t=this.ctx,e=-this.translateX/this.scale,s=-this.translateY/this.scale,i=(this.canvas.width-this.translateX)/this.scale,o=(this.canvas.height-this.translateY)/this.scale;t.save();const n=this.gridSize/2,a=Math.floor(e/n)*n,r=Math.floor(s/n)*n,h=Math.ceil(i/n)*n,l=Math.ceil(o/n)*n;t.strokeStyle="#cccccc",t.lineWidth=.5/this.scale,t.beginPath();for(let v=a;v<=h;v+=n)t.moveTo(v,s),t.lineTo(v,o);for(let v=r;v<=l;v+=n)t.moveTo(e,v),t.lineTo(i,v);t.stroke();const c=Math.floor(e/this.gridSize)*this.gridSize,d=Math.floor(s/this.gridSize)*this.gridSize,x=Math.ceil(i/this.gridSize)*this.gridSize,g=Math.ceil(o/this.gridSize)*this.gridSize;t.strokeStyle="#d0d0d0",t.lineWidth=1/this.scale,t.beginPath();for(let v=c;v<=x;v+=this.gridSize)t.moveTo(v,s),t.lineTo(v,o);for(let v=d;v<=g;v+=this.gridSize)t.moveTo(e,v),t.lineTo(i,v);t.stroke();const u=this.gridSize/4,p=Math.floor(e/u)*u,y=Math.floor(s/u)*u,f=Math.ceil(i/u)*u,m=Math.ceil(o/u)*u;t.fillStyle="#cccccc";for(let v=p;v<=f;v+=u)for(let e=y;e<=m;e+=u){if(!(v%n===0)&&!(e%n===0)){const s=Math.max(1.5/this.scale,.8);t.beginPath(),t.arc(v,e,s,0,2*Math.PI),t.fill()}}t.strokeStyle="#999999",t.lineWidth=3/this.scale,t.setLineDash([]),t.beginPath();0>=e&&0<=i&&(t.moveTo(0,s),t.lineTo(0,o)),0>=s&&0<=o&&(t.moveTo(e,0),t.lineTo(i,0)),t.stroke(),t.restore()}undo(){console.log("Undo実行前の状態:",{allPathsLength:this.allPaths.length,redoStackLength:this.redoStack.length,openingsHistoryLength:this.openingsHistory.length,openingsRedoStackLength:this.openingsRedoStack.length,actualOpeningsCount:this.openings.length,lastOperationType:this.lastOperationType});let t=!1;if("opening"===this.lastOperationType&&this.openingsHistory.length>0&&this.openings.length>0){console.log("開口部をundo（実際に開口部が存在する場合）");const e=this.openings.map(t=>({x:t.x,y:t.y,width:t.width,height:t.height,isSelected:t.isSelected}));this.openingsRedoStack.push(e);const s=this.openingsHistory.pop();this.restoreOpeningsState(s),this.lastOperationType=this.openingsHistory.length>0?"opening":this.allPaths.length>0?"path":null,t=!0}else if(this.allPaths.length>0){console.log("パスをundo（メイン処理またはフォールバック）");const e=this.allPaths.pop();this.redoStack.push(e),this.lastOperationType=this.allPaths.length>0?"path":this.openings.length>0?"opening":null,t=!0}else if(this.openingsHistory.length>0){console.log("最終フォールバック: 開口部をundo");const e=this.openings.map(t=>({x:t.x,y:t.y,width:t.width,height:t.height,isSelected:t.isSelected}));this.openingsRedoStack.push(e);const s=this.openingsHistory.pop();this.restoreOpeningsState(s),this.lastOperationType=this.openings.length>0?"opening":null,t=!0}else console.log("undo可能な操作がありません");t?this.redrawCanvas():console.log("何もundoしませんでした")}redo(){let t=!1;if(this.redoStack.length>0&&this.openingsRedoStack.length>0){const e=this.redoStack.pop();this.allPaths.push(e),this.lastOperationType="path",t=!0}else if(this.redoStack.length>0){const e=this.redoStack.pop();this.allPaths.push(e),this.lastOperationType="path",t=!0}else if(this.openingsRedoStack.length>0){const e=this.openings.map(t=>({x:t.x,y:t.y,width:t.width,height:t.height,isSelected:t.isSelected}));this.openingsHistory.push(e);const s=this.openingsRedoStack.pop();this.restoreOpeningsState(s),this.lastOperationType="opening",t=!0}t&&this.redrawCanvas()}replaceLastStroke(t){this.allPaths.length>0&&(this.allPaths[this.allPaths.length-1]=t,this.redrawCanvas())}resize(){this.canvas.getBoundingClientRect(),this.setupHighDPI(),this.redrawCanvas()}optimizePaths(){if(this.allPaths.length<2)return;const t=this.allPaths.length,e=[];let s=null;this.allPaths.forEach(t=>{"pen"===t.tool&&s&&s.strokeColor===t.strokeColor&&s.strokeWidth===t.strokeWidth?s.path.push(...t.path):(s&&e.push(s),s=n({},t))}),s&&e.push(s),this.allPaths=e;const i=this.allPaths.length,o=t-i;o>0&&console.log(`🚀 自動最適化実行: ${t} → ${i} パス (${o}個統合)`)}on(t,e){this.eventListeners[t]||(this.eventListeners[t]=[]),this.eventListeners[t].push(e)}emit(t,e){this.eventListeners[t]&&this.eventListeners[t].forEach(t=>t(e))}getLineSegmentsHalfGrid(t){const e=[],s=this.gridSize/2,i=t.startPoint,o=t.endPoint,n=o.x-i.x,a=o.y-i.y,r=Math.sqrt(n*n+a*a);if(0===r)return e;const h=180*Math.abs(Math.atan2(a,n))/Math.PI;let l=s;h>=35&&h<=55&&(l=s*Math.sqrt(2));const c=n/r,d=a/r,x=Math.max(1,Math.ceil(r/l)),g=r/x;for(let u=0;u<x;u++){const t=u*g,s=Math.min((u+1)*g,r),o={x:i.x+c*t,y:i.y+d*t},n={x:i.x+c*s,y:i.y+d*s};e.push({start:o,end:n,index:u,length:s-t,distance:t})}return e}getRectangleSegmentsHalfGrid(t){const e=[],s=this.gridSize/2,i=t.startPoint,o=t.endPoint,n={x:Math.min(i.x,o.x),y:Math.min(i.y,o.y)},a={x:Math.max(i.x,o.x),y:Math.min(i.y,o.y)},r={x:Math.min(i.x,o.x),y:Math.max(i.y,o.y)},h={x:Math.max(i.x,o.x),y:Math.max(i.y,o.y)};return[{start:n,end:a,side:"top"},{start:a,end:h,side:"right"},{start:h,end:r,side:"bottom"},{start:r,end:n,side:"left"}].forEach(t=>{const i=t.end.x-t.start.x,o=t.end.y-t.start.y,n=Math.sqrt(i*i+o*o);if(0===n)return;const a=i/n,r=o/n;for(let h=0;h<n;h+=s){const i={x:t.start.x+a*h,y:t.start.y+r*h},o={x:t.start.x+a*Math.min(h+s,n),y:t.start.y+r*Math.min(h+s,n)};e.push({start:i,end:o,side:t.side,originalEdge:t})}}),e}removeLineSegmentsHalfGrid(t,e){const s=this.getLineSegmentsHalfGrid(t),i=new Set(e),o=[];let a=[];for(let n=0;n<s.length;n++)i.has(n)?a.length>0&&(o.push([...a]),a=[]):a.push(s[n]);a.length>0&&o.push(a);const r=[];for(const h of o){if(0===h.length)continue;const e=h[0],s=h[h.length-1],i={tool:"line",startPoint:n({},e.start),endPoint:n({},s.end),strokeColor:t.strokeColor,strokeWidth:t.strokeWidth};Math.sqrt(Math.pow(i.endPoint.x-i.startPoint.x,2)+Math.pow(i.endPoint.y-i.startPoint.y,2))>1&&r.push(i)}return r}removeRectangleSegmentsHalfGrid(t,e){const s=this.getRectangleSegmentsHalfGrid(t).filter((t,s)=>!e.includes(s)),i={top:[],right:[],bottom:[],left:[]};s.forEach(t=>{i[t.side].push(t)});const o=[];return Object.keys(i).forEach(e=>{const s=i[e];if(0===s.length)return;let a=null;for(const i of s)if(a){Math.sqrt(Math.pow(a.endPoint.x-i.start.x,2)+Math.pow(a.endPoint.y-i.start.y,2))<this.gridSize/4?a.endPoint=n({},i.end):(o.push(a),a={tool:"line",startPoint:n({},i.start),endPoint:n({},i.end),strokeColor:t.strokeColor,strokeWidth:t.strokeWidth})}else a={tool:"line",startPoint:n({},i.start),endPoint:n({},i.end),strokeColor:t.strokeColor,strokeWidth:t.strokeWidth};a&&o.push(a)}),o}setDoorType(t){this.doorType=t,console.log(`扉の種類を変更: ${t}`)}setDoorWidth(t){const e=this.gridSize/4;this.doorWidth=Math.round(t/e)*e,console.log(`扉の幅を変更: ${this.doorWidth}px (0.25マス単位調整済み)`)}getDoorTypes(){return[{value:"single",label:"片開き戸"},{value:"double",label:"両開き戸"},{value:"opening",label:"開口部"}]}setLineStyle(t){this.lineStyle=t,console.log(`線スタイルを変更: ${t}`)}setLineDashed(t){this.lineStyle=t?"dashed":"solid",console.log(`線スタイルを変更: ${this.lineStyle}`)}setLineArrow(t){this.lineStyle=t?"arrow":"solid",console.log(`線スタイルを変更: ${this.lineStyle}`)}get isDashed(){return"dashed"===this.lineStyle}get hasArrow(){return"arrow"===this.lineStyle}setStairSize(t){const e=this.stairWidth;switch(t){case"small":this.stairWidth=.5*this.gridSize;break;case"large":this.stairWidth=1.5*this.gridSize;break;default:this.stairWidth=1*this.gridSize}console.log("階段サイズ変更詳細:",{size:t,gridSize:this.gridSize,previousWidth:e,newWidth:this.stairWidth,calculation:`${this.gridSize} * ${"small"===t?.5:"large"===t?1.5:1} = ${this.stairWidth}`,gridUnits:this.stairWidth/this.gridSize+"マス"})}setStairWidth(t){const e=this.gridSize/4;this.stairWidth=Math.round(t/e)*e,console.log(`階段の横線長さを変更: ${this.stairWidth}px (0.25マス単位調整済み)`)}getStairWidth(){return this.stairWidth}drawArrowHead(t,e,s,i,o,n=10){const a=i-e,r=o-s,h=Math.atan2(r,a),l=Math.max(n,3*t.lineWidth),c=Math.PI/6,d=i-l*Math.cos(h-c),x=o-l*Math.sin(h-c),g=i-l*Math.cos(h+c),u=o-l*Math.sin(h+c);t.save(),t.setLineDash([]),t.beginPath(),t.moveTo(i,o),t.lineTo(d,x),t.moveTo(i,o),t.lineTo(g,u),t.stroke(),t.restore()}saveOpeningsState(){const t=(new Error).stack;console.log("saveOpeningsState呼び出し:",{currentOpeningsCount:this.openings.length,historyLength:this.openingsHistory.length,fullStackTrace:t});const e=this.openings.map(t=>({x:t.x,y:t.y,width:t.width,height:t.height,isSelected:t.isSelected}));this.openingsHistory.push(e),this.openingsRedoStack=[],this.redoStack=[]}restoreOpeningsState(t){this.openings=t.map(t=>({x:t.x,y:t.y,width:t.width,height:t.height,isSelected:t.isSelected})),this.selectedOpening=this.openings.find(t=>t.isSelected)||null}getArrowHeadRegion(t,e,s=10){const i=e.x-t.x,o=e.y-t.y,n=Math.sqrt(i*i+o*o);if(0===n)return null;const a=Math.max(s,.1*n),r=a/n,h=e.x-i*r,l=e.y-o*r;return{tip:{x:e.x,y:e.y},base:{x:h,y:l},length:a}}isPointInArrowHead(t,e,s=0){if(!e)return!1;return this.distanceToLineSegment(t,e.base,e.tip)<=e.length/2+s}isSegmentInArrowHead(t,e){if(!e)return!1;const s=this.isPointInArrowHead(t.start,e,5),i=this.isPointInArrowHead(t.end,e,5);return s||i}distanceToLineSegment(t,e,s){const i=t.x-e.x,o=t.y-e.y,n=s.x-e.x,a=s.y-e.y,r=n*n+a*a;let h,l,c=-1;0!==r&&(c=(i*n+o*a)/r),c<0?(h=e.x,l=e.y):c>1?(h=s.x,l=s.y):(h=e.x+c*n,l=e.y+c*a);const d=t.x-h,x=t.y-l;return Math.sqrt(d*d+x*x)}getDrawingBounds(){if(0===this.allPaths.length&&0===this.openings.length)return null;let t=1/0,e=1/0,s=-1/0,i=-1/0;return this.allPaths.forEach(o=>{"pen"===o.tool?o.path.forEach(o=>{t=Math.min(t,o.x),e=Math.min(e,o.y),s=Math.max(s,o.x),i=Math.max(i,o.y)}):"textbox"===o.tool?(t=Math.min(t,o.x),e=Math.min(e,o.y),s=Math.max(s,o.x+o.width),i=Math.max(i,o.y+o.height)):o.startPoint&&o.endPoint&&(t=Math.min(t,o.startPoint.x,o.endPoint.x),e=Math.min(e,o.startPoint.y,o.endPoint.y),s=Math.max(s,o.startPoint.x,o.endPoint.x),i=Math.max(i,o.startPoint.y,o.endPoint.y))}),this.openings.forEach(o=>{t=Math.min(t,o.x),e=Math.min(e,o.y),s=Math.max(s,o.x+o.width),i=Math.max(i,o.y+o.height)}),{minX:t,minY:e,maxX:s,maxY:i,width:s-t,height:i-e}}exportToImage(t="png",e=.95){return a(this,null,function*(){try{console.log("🖼️ 画像エクスポート開始（PDF完全準拠）:",t);const s=210,i=297,o=15,n=20,a=(s-2*o)/(i-2*o-n),r=22,h=Math.round(r*a),l=h*this.gridSize,c=r*this.gridSize,d=-l/2,x=-c/2;console.log("キャプチャ範囲（PDF準拠）:",{"マス数":{width:h,height:r},"ピクセル":{width:l,height:c},"アスペクト比":(l/c).toFixed(3),"PDF最適比":a.toFixed(3)});const g=300/25.4,u=Math.round(s*g),p=Math.round(i*g),y=Math.round(o*g),f=Math.round(n*g),m=document.createElement("canvas"),v=m.getContext("2d",{alpha:!1,willReadFrequently:!0});m.width=u,m.height=p,v.fillStyle="#ffffff",v.fillRect(0,0,u,p),yield this.drawImageHeader(v,u,y,f,g);const w=document.createElement("canvas"),P=w.getContext("2d",{alpha:!1,willReadFrequently:!0}),T=4096,S=Math.min(l,T),k=Math.min(c,T);w.width=S,w.height=k,P.fillStyle="white",P.fillRect(0,0,S,k),P.setTransform(1,0,0,1,0,0),P.imageSmoothingEnabled=!0,P.imageSmoothingQuality="high",this.drawGridOnContext(P,S,k),this.redrawPathsOnContext(P,d,x,S,k);const I=w.toDataURL("image/png",.95),M=u-2*y,b=p-2*y-f-0,C=M/l,E=b/c,z=Math.min(C,E),D=l*z,B=c*z,L=y+(M-D)/2,W=y+f+(b-B)/2;console.log("配置情報（PDF準拠）:",{"キャプチャサイズ":{width:l,height:c},"利用可能エリア":{width:M,height:b},"スケール":{scaleX:C,scaleY:E,"使用":z},"最終サイズ":{width:D,height:B},"配置位置":{x:L,y:W}});const O=new Image;yield new Promise((t,e)=>{O.onload=()=>{v.drawImage(O,L,W,D,B),t()},O.onerror=e,O.src=I}),yield this.drawImageLogo(v,y,f,g,u,p),v.strokeStyle="#e26b0a",v.lineWidth=1*g;const F=y,$=y,A=u-2*y,R=f+B;v.strokeRect(F,$,A,R),console.log("オレンジ色枠線を画像に追加:",{color:"#e26b0a",lineWidth:1*g,frame:{x:F,y:$,width:A,height:R}});const H="jpg"===t?"image/jpeg":"image/png";return navigator.share&&navigator.canShare?yield this.shareImageViaAPI(m,H,e):this.downloadImage(m,H,e,t)}catch(s){return console.error("画像エクスポートエラー:",s),!1}})}drawImageHeader(t,e,s,i,o){return a(this,null,function*(){t.fillStyle="#0066cc",t.fillRect(s,s,e-2*s,i);const n=document.createElement("canvas"),a=n.getContext("2d"),r="間取り図";a.font='bold 18px "Noto Sans JP", "Hiragino Sans", "Yu Gothic", "Meiryo", sans-serif';const h=a.measureText(r).width;n.width=3*(h+20),n.height=90,a.scale(3,3),a.font='bold 18px "Noto Sans JP", "Hiragino Sans", "Yu Gothic", "Meiryo", sans-serif',a.fillStyle="#fccc9e",a.textAlign="left",a.textBaseline="top",a.imageSmoothingEnabled=!0,a.imageSmoothingQuality="high",a.clearRect(0,0,n.width/3,n.height/3),a.fillText(r,10,6),yield new Promise(t=>setTimeout(t,50));const l=n.toDataURL("image/png",1),c=.35*(h+20)*o,d=10.5*o,x=s+2*o,g=s+1*o,u=new Image;yield new Promise(e=>{u.onload=()=>{t.drawImage(u,x,g,c,d),e()},u.src=l});const p=12*o,y=s+i;t.strokeStyle="#99ccff",t.lineWidth=p,t.beginPath(),t.moveTo(s,y),t.lineTo(e-s,y),t.stroke(),console.log("PDFヘッダー完全再現完了:",{titleSize:{width:c,height:d},titlePosition:{x:x,y:g},lineThickness:p,linePosition:y})})}drawImageLogo(t,e,s,i,o,n){return a(this,null,function*(){try{const e=new Image;yield new Promise((t,s)=>{e.onload=t,e.onerror=s,e.src="/logo.png"});const s=15,o=s*i,n=e.width/e.height,a=o*n,r=210,h=297,l=10,c=5,d=r-l-s*n-c,x=h-l-s-c,g=d*i,u=x*i;t.drawImage(e,g,u,a,o),console.log("ロゴ画像を画像に追加しました（右下端配置）:",{logoSize:{width:a,height:o},logoPosition:{x:g,y:u},"配置詳細":{a4WidthMm:r,a4HeightMm:h,marginMm:l,logoMarginMm:c,logoWidthMm:s*n,logoHeightMm:s,mmToPx:i,"計算式":{logoXMm:`${r} - ${l} - ${s*n} - ${c} = ${d}`,logoYMm:`${h} - ${l} - ${s} - ${c} = ${x}`,logoX:`${d} * ${i} = ${g}`,logoY:`${x} * ${i} = ${u}`}}})}catch(e){console.warn("ロゴ画像の読み込みに失敗:",e.message)}})}shareImageViaAPI(t,e,s){return a(this,null,function*(){try{return console.log("🔄 Web Share API試行開始"),new Promise(i=>{t.toBlob(o=>a(this,null,function*(){if(!o)return console.error("画像データの生成に失敗"),void i(this.downloadImage(t,e,s,e.split("/")[1]));if(console.log("📱 ブラウザ情報:",{userAgent:navigator.userAgent,hasShare:!!navigator.share,hasCanShare:!!navigator.canShare}),navigator.share&&(/iPad/i.test(navigator.userAgent)||/iPhone/i.test(navigator.userAgent)))try{const t={files:[new File([o],`floor-plan-${Date.now()}.${e.split("/")[1]}`,{type:e,lastModified:Date.now()})],title:"間取り図",text:"作成した間取り図です"};if(console.log("📤 ネイティブ共有を試行:",t),!navigator.canShare||navigator.canShare(t))return yield navigator.share(t),console.log("✅ ネイティブ共有成功！"),void i(!0);console.warn("⚠️ canShare()がfalseを返しました")}catch(n){if(console.warn("❌ ネイティブ共有エラー:",{name:n.name,message:n.message}),"AbortError"===n.name)return console.log("ℹ️ ユーザーが共有をキャンセル"),void i(!1)}console.log("🔄 フォールバック実行"),i(this.downloadImage(t,e,s,e.split("/")[1]))}),e,s)})}catch(i){return console.error("❌ Web Share API全体エラー:",i),this.downloadImage(t,e,s,e.split("/")[1])}})}downloadImage(t,e,s,i){try{const o=t.toDataURL(e,s);if(/iPad|iPhone|iPod/i.test(navigator.userAgent))return this.showImageForSaving(o),!0;if("ontouchstart"in window)return this.triggerMobileDownload(o,i),!0;{const t=document.createElement("a");return t.download=`floor-plan-${(new Date).toISOString().slice(0,10)}.${i}`,t.href=o,document.body.appendChild(t),t.click(),document.body.removeChild(t),console.log("✅ 画像ダウンロード完了（デスクトップ）"),!0}}catch(o){return console.error("画像ダウンロードエラー:",o),!1}}showImageForSaving(t){const e=document.createElement("div");e.style.cssText="\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100vw;\n      height: 100vh;\n      background: rgba(0, 0, 0, 0.9);\n      z-index: 10000;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      padding: 20px;\n      box-sizing: border-box;\n    ";const s=document.createElement("div");s.style.cssText="\n      color: white;\n      font-size: 18px;\n      text-align: center;\n      margin-bottom: 20px;\n      line-height: 1.5;\n    ",s.textContent="画像を長押しして「画像を保存」を選択してください";const i=document.createElement("img");i.src=t,i.style.cssText="\n      max-width: 90%;\n      max-height: 70%;\n      border: 2px solid white;\n      border-radius: 8px;\n    ";const o=document.createElement("button");o.textContent="×",o.style.cssText="\n      position: absolute;\n      top: 20px;\n      right: 20px;\n      background: white;\n      border: none;\n      border-radius: 50%;\n      width: 40px;\n      height: 40px;\n      font-size: 24px;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    ",o.onclick=()=>{document.body.removeChild(e)},e.onclick=t=>{t.target===e&&document.body.removeChild(e)},e.appendChild(s),e.appendChild(i),e.appendChild(o),document.body.appendChild(e),console.log("✅ iPad用画像表示完了（長押しで保存）")}triggerMobileDownload(t,e){const s=document.createElement("a");s.href=t,s.download=`floor-plan-${(new Date).toISOString().slice(0,10)}.${e}`,s.style.display="none",document.body.appendChild(s);const i=new MouseEvent("click",{view:window,bubbles:!0,cancelable:!0});s.dispatchEvent(i),document.body.removeChild(s),console.log("✅ モバイル用ダウンロード実行")}exportToPDF(){return a(this,null,function*(){try{let d;console.log("PDF出力開始 - デバイス情報:",{userAgent:navigator.userAgent,platform:navigator.platform,isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)});try{d=(yield r(()=>import("./pdf-lib-CJovE0jj.js").then(t=>t.j),[])).jsPDF,console.log("jsPDF動的インポート成功")}catch(t){if(console.warn("jsPDF動的インポート失敗、グローバル参照を試行:",t),window.jspdf&&window.jspdf.jsPDF)d=window.jspdf.jsPDF,console.log("jsPDFグローバル参照成功");else{if(!window.jsPDF)throw new Error("jsPDFライブラリが見つかりません");d=window.jsPDF,console.log("jsPDF直接参照成功")}}const x=new d({orientation:"portrait",unit:"mm",format:"a4"});console.log("PDF作成成功");const g=210,u=297,p=15,y=20,f=0;x.setFillColor(255,255,255),x.rect(0,0,g,u,"F"),yield this.addPDFHeader(x,g,p,y);const m=(g-2*p)/(u-2*p-y),v=22,w=Math.round(v*m),P=w*this.gridSize,T=v*this.gridSize;console.log("PDF キャプチャ範囲（最適化）:",{"マス数":{width:w,height:v},"ピクセル":{width:P,height:T},"アスペクト比":(P/T).toFixed(3),"PDF最適比":m.toFixed(3)});const S=-P/2,k=-T/2,I=document.createElement("canvas"),M=I.getContext("2d",{alpha:!1,willReadFrequently:!0}),b=4096,C=Math.min(P,b),E=Math.min(T,b);I.width=C,I.height=E,console.log("一時キャンバス作成:",{requestedSize:{width:P,height:T},actualSize:{width:C,height:E},context:M?"OK":"ERROR",contextAttributes:M.getContextAttributes()});try{M.fillStyle="white",M.fillRect(0,0,C,E),M.setTransform(1,0,0,1,0,0),M.imageSmoothingEnabled=!0,M.imageSmoothingQuality="high"}catch(e){throw console.error("キャンバス初期化エラー:",e),new Error("キャンバスの初期化に失敗しました")}try{this.drawGridOnContext(M,C,E),console.log("グリッド描画完了")}catch(s){console.warn("グリッド描画エラー:",s)}try{this.redrawPathsOnContext(M,S,k,C,E),console.log("パス描画完了")}catch(i){console.warn("パス描画エラー:",i)}let z;console.log("PDF用描画データ:",{pathCount:this.allPaths.length,captureArea:{startX:S,startY:k,width:P,height:T},canvasInfo:{canvasWidth:this.canvas.width,canvasHeight:this.canvas.height,translateX:this.translateX,translateY:this.translateY,scale:this.scale},samplePaths:this.allPaths.slice(0,3).map(t=>({type:t.type,tool:t.tool,start:t.startPoint,end:t.endPoint}))});try{if(!I)throw new Error("一時キャンバスがnullです");if(0===I.width||0===I.height)throw new Error(`一時キャンバスサイズが無効です: ${I.width}x${I.height}`);if(!M)throw new Error("一時キャンバスコンテキストが無効です");yield new Promise((t,e)=>{try{const e=M.getImageData(0,0,Math.min(10,I.width),Math.min(10,I.height));if(!e||!e.data)throw new Error("ImageDataの取得に失敗しました");console.log("ImageData取得テスト成功:",e.data.length),setTimeout(t,200)}catch(s){e(new Error("ImageData取得テストに失敗: "+s.message))}});const t=.95;try{if(z=I.toDataURL("image/png",t),!z||z.length<100)throw new Error("PNG生成結果が不正です");console.log("PNG生成成功 (方法1)")}catch(o){console.warn("PNG生成失敗 (方法1):",o);try{if(z=I.toDataURL("image/webp",t),!z||z.length<100)throw new Error("WebP生成結果が不正です");console.log("WebP生成成功 (方法2)")}catch(n){console.warn("WebP生成失敗 (方法2):",n);try{if(z=I.toDataURL("image/jpeg",t),!z||z.length<100)throw new Error("JPEG生成結果が不正です");console.log("JPEG生成成功 (方法3)")}catch(a){throw new Error(`全ての画像形式で生成失敗: PNG(${o.message}), WebP(${n.message}), JPEG(${a.message})`)}}}if(!z.startsWith("data:image/"))throw new Error("生成されたDataURLが無効です");console.log("画像生成最終成功:",{format:z.substring(5,z.indexOf(";")),size:z.length,canvasSize:{width:I.width,height:I.height}})}catch(h){throw console.error("画像生成完全失敗:",h),new Error("画像生成に失敗しました: "+h.message)}const D=P,B=T,L=g-2*p,W=u-2*p-y-f,O=L/D,F=W/B,$=Math.min(O,F);console.log("PDF スケーリング情報:",{"キャプチャサイズ":{width:D,height:B},"利用可能サイズ":{width:L,height:W},"スケール":{x:O,y:F,"選択":$},"最終サイズ":{width:D*$,height:B*$}});const A=D*$,R=B*$,H=p+(L-A)/2,N=p+y+(W-R)/2;console.log("PDF配置情報:",{"キャプチャサイズ":{width:D,height:B},"利用可能エリア":{width:L,height:W},"スケール":{scaleX:O,scaleY:F,"使用":$},"最終サイズ":{width:A,height:R},"配置位置":{x:H,y:N},"余白":{"左右":(L-A)/2,"上下":(W-R)/2}});let G="PNG";z.startsWith("data:image/jpeg")?G="JPEG":z.startsWith("data:image/webp")&&(G="WEBP"),console.log("PDF画像追加:",{format:G,size:{width:A,height:R}}),x.addImage(z,G,H,N,A,R),x.setDrawColor(226,107,10),x.setLineWidth(1);const Y=p,X=p,q=g-2*p,j=y+R;x.rect(Y,X,q,j),yield this.addPDFLogo(x,g,u,p,y,A,R);const V=new Date,U=`間取り図_${V.getFullYear()}${String(V.getMonth()+1).padStart(2,"0")}${String(V.getDate()).padStart(2,"0")}_${String(V.getHours()).padStart(2,"0")}${String(V.getMinutes()).padStart(2,"0")}.pdf`;try{if(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)){console.log("モバイル/タブレットデバイス検出");const t=x.output("blob");if(window.saveAs)window.saveAs(t,U);else if(navigator.share&&navigator.canShare&&navigator.canShare({files:[new File([t],U,{type:"application/pdf"})]})){const e=new File([t],U,{type:"application/pdf"});yield navigator.share({title:"間取り図PDF",files:[e]})}else{const e=URL.createObjectURL(t),s=document.createElement("a");s.href=e,s.download=U,s.style.display="none",document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(e)}}else x.save(U);console.log("PDF出力完了:",U),/iPad|iPhone|iPod/.test(navigator.userAgent)&&alert("PDFが作成されました。ダウンロードフォルダまたは共有メニューを確認してください。")}catch(l){console.error("PDF保存エラー:",l);try{x.save(U)}catch(c){throw new Error(`PDF保存に失敗しました: ${l.message}`)}}return!0}catch(d){return console.error("PDF出力エラー:",d),alert("PDF出力中にエラーが発生しました: "+d.message),!1}})}addPDFHeader(t,e,s,i){return a(this,null,function*(){t.setFillColor(0,102,204),t.rect(s,s,e-2*s,i,"F");const o=document.createElement("canvas"),n=o.getContext("2d"),a="間取り図";n.font='bold 18px "Noto Sans JP", "Hiragino Sans", "Yu Gothic", "Meiryo", sans-serif';const r=n.measureText(a).width;let h;o.width=3*(r+20),o.height=90,n.scale(3,3),n.font='bold 18px "Noto Sans JP", "Hiragino Sans", "Yu Gothic", "Meiryo", sans-serif',n.fillStyle="#fccc9e",n.textAlign="left",n.textBaseline="top",n.textRenderingOptimization="optimizeQuality",n.imageSmoothingEnabled=!0,n.imageSmoothingQuality="high",n.clearRect(0,0,o.width/3,o.height/3),n.fillText(a,10,6);try{if(!o||0===o.width||0===o.height)throw new Error("テキストキャンバスが無効です");if(yield new Promise(t=>setTimeout(t,50)),h=o.toDataURL("image/png",1),!h||!h.startsWith("data:image/png;base64,"))throw new Error("テキストPNG生成に失敗しました")}catch(d){console.error("テキストPNG生成エラー:",d);try{h=o.toDataURL("image/jpeg",.95)}catch(x){return console.error("テキストJPEG生成も失敗:",x),void console.warn("テキスト画像の追加をスキップします")}}const l=.35*(r+20),c=h.startsWith("data:image/png")?"PNG":"JPEG";t.addImage(h,c,s+2,s+1,l,10.5),t.setDrawColor(153,204,255),t.setLineWidth(12),t.line(s,s+i,e-s,s+i)})}addPDFFooter(t,e,s,i,o){const n=s-i-o;t.setFillColor(248,248,248),t.rect(i,n,e-2*i,o,"F"),t.setDrawColor(200,200,200),t.setLineWidth(.5),t.rect(i,n,e-2*i,o),t.setFontSize(10),t.setTextColor(100,100,100),t.setFont(void 0,"normal");const a="- 1 -",r=t.getTextWidth(a);t.text(a,(e-r)/2,n+8),t.setFontSize(8),t.setTextColor(120,120,120),t.text("平面図描画アプリ",i+5,n+8),t.setFontSize(8);const h="スケール: 自動調整",l=t.getTextWidth(h);t.text(h,e-i-l-5,n+8)}addPDFLogo(t,e,s,i,o,n,r){return a(this,null,function*(){try{const s=new Image;s.crossOrigin="anonymous";const i=()=>new Promise((t,e)=>{s.onload=()=>t(s),s.onerror=()=>e(new Error("ロゴ画像の読み込みに失敗しました")),s.src="/logo.png",setTimeout(()=>{e(new Error("ロゴ画像の読み込みがタイムアウトしました"))},5e3)});try{yield i();const e=15,o=e*(s.width/s.height),n=210,a=297,r=10,h=5,l=n-r-o-h,c=a-r-e-h,d=document.createElement("canvas"),x=d.getContext("2d");d.width=s.width,d.height=s.height,x.drawImage(s,0,0);const g=d.toDataURL("image/png");t.addImage(g,"PNG",l,c,o,e),console.log("ロゴ画像をPDFに追加しました（右下端配置）:",{logoSize:{width:o,height:e},logoPosition:{x:l,y:c},"配置詳細":{a4WidthMm:n,a4HeightMm:a,marginMm:r,logoMarginMm:h,"計算式":{logoX:`${n} - ${r} - ${o} - ${h} = ${l}`,logoY:`${a} - ${r} - ${e} - ${h} = ${c}`}}})}catch(e){console.warn("ロゴ画像の読み込みに失敗:",e.message)}}catch(s){console.error("ロゴ追加でエラーが発生:",s)}})}drawGridOnContext(t,e,s){if(!this.snapToGrid)return;t.save();const i=160;console.log("PDF グリッド描画:",{canvasSize:{width:e,height:s},gridSize:i,aspectRatio:e/s}),t.fillStyle="#cccccc";for(let a=40;a<e;a+=40)for(let e=40;e<s;e+=40)t.beginPath(),t.arc(a,e,1,0,2*Math.PI),t.fill();t.strokeStyle="#cccccc",t.lineWidth=.5,t.setLineDash([]);for(let a=80;a<e;a+=80)t.beginPath(),t.moveTo(a,0),t.lineTo(a,s),t.stroke();for(let a=80;a<s;a+=80)t.beginPath(),t.moveTo(0,a),t.lineTo(e,a),t.stroke();t.strokeStyle="#d0d0d0",t.lineWidth=1;for(let a=i;a<e;a+=i)t.beginPath(),t.moveTo(a,0),t.lineTo(a,s),t.stroke();for(let a=i;a<s;a+=i)t.beginPath(),t.moveTo(0,a),t.lineTo(e,a),t.stroke();const o=Math.floor(e/2/i)*i,n=Math.floor(s/2/i)*i;t.strokeStyle="#999999",t.lineWidth=3,o>0&&o<e&&(t.beginPath(),t.moveTo(o,0),t.lineTo(o,s),t.stroke()),n>0&&n<s&&(t.beginPath(),t.moveTo(0,n),t.lineTo(e,n),t.stroke()),t.restore()}redrawPathsOnContext(t,e,s,i,o){t.save(),t.beginPath(),t.rect(0,0,i,o),t.clip(),console.log(`PDF描画: ${this.allPaths.length}個のパスを処理中`),console.log(`キャプチャ範囲: x=${e}, y=${s}, w=${i}, h=${o}`);for(let n=0;n<this.allPaths.length;n++){const i=this.allPaths[n];console.log(`=== パス ${n} 詳細情報 ===`),console.log("完全なpathData:",JSON.stringify(i,null,2)),console.log("=================="),this.drawPathOnContext(t,i,e,s)}console.log("=== 開口部描画開始 ==="),console.log("開口部の数:",this.openings.length),this.openings.forEach((i,o)=>{console.log(`開口部 ${o}:`,i),this.drawOpeningOnPDF(t,i,e,s)}),console.log("=== 開口部描画完了 ==="),t.restore()}isPathInRange(t,e,s,i,o){if(!t)return!1;const n=e+i,a=s+o;return"freehand"===t.type&&t.points?t.points.some(t=>t.x>=e&&t.x<=n&&t.y>=s&&t.y<=a):!(!t.startPoint||!t.endPoint)&&(t.startPoint.x>=e&&t.startPoint.x<=n&&t.startPoint.y>=s&&t.startPoint.y<=a||t.endPoint.x>=e&&t.endPoint.x<=n&&t.endPoint.y>=s&&t.endPoint.y<=a)}drawPathOnContext(t,e,s,i){if(t.save(),t.strokeStyle=e.strokeColor||e.color||"#000000",t.lineWidth=e.strokeWidth||e.lineWidth||2,t.lineCap="round",t.lineJoin="round","pen"===e.tool&&e.path){if(console.log("ペンツール描画:",e.path.length,"点"),t.beginPath(),e.path.length>0){t.moveTo(e.path[0].x-s,e.path[0].y-i);for(let o=1;o<e.path.length;o++)t.lineTo(e.path[o].x-s,e.path[o].y-i)}t.stroke()}else if("line"===e.tool&&e.startPoint&&e.endPoint){const o=e.startPoint.x-s,n=e.startPoint.y-i,a=e.endPoint.x-s,r=e.endPoint.y-i,h=e.lineStyle||(e.isDashed?"dashed":e.hasArrow?"arrow":"solid");if(console.log(`直線描画: 線種=${h}, 元座標(${e.startPoint.x}, ${e.startPoint.y}) → PDF座標(${o}, ${n})`),"dashed"===h||e.isDashed){t.save();const e=20,s=15;t.setLineDash([e,s]),t.beginPath(),t.moveTo(o,n),t.lineTo(a,r),t.stroke(),t.setLineDash([]),t.restore(),console.log("点線描画完了（キャンバス版準拠）")}else"arrow"===h||e.hasArrow?(t.beginPath(),t.moveTo(o,n),t.lineTo(a,r),t.stroke(),this.drawArrowHeadOnContext(t,o,n,a,r),console.log("矢印描画完了（キャンバス版準拠）")):(t.beginPath(),t.moveTo(o,n),t.lineTo(a,r),t.stroke(),console.log("実線描画完了"))}else if("rectangle"===e.tool&&e.startPoint&&e.endPoint)console.log("四角形描画"),t.beginPath(),t.rect(e.startPoint.x-s,e.startPoint.y-i,e.endPoint.x-e.startPoint.x,e.endPoint.y-e.startPoint.y),t.stroke();else if("circle"===e.tool&&e.startPoint&&e.endPoint){console.log("円描画");const o=(e.startPoint.x+e.endPoint.x)/2-s,n=(e.startPoint.y+e.endPoint.y)/2-i,a=Math.sqrt(Math.pow(e.endPoint.x-e.startPoint.x,2)+Math.pow(e.endPoint.y-e.startPoint.y,2))/2;t.beginPath(),t.arc(o,n,a,0,2*Math.PI),t.stroke()}else if("door"===e.tool&&e.startPoint&&e.endPoint){console.log("🚪 扉描画開始:",{doorType:e.doorType,start:e.startPoint,end:e.endPoint,"調整後start":{x:e.startPoint.x-s,y:e.startPoint.y-i},"調整後end":{x:e.endPoint.x-s,y:e.endPoint.y-i},pathDataKeys:Object.keys(e),fullPathData:e}),e.doorType||(console.warn('⚠️ doorTypeが未定義です。デフォルト値"opening"を使用します'),e.doorType="opening"),t.save();const o={x:e.startPoint.x-s,y:e.startPoint.y-i},n={x:e.endPoint.x-s,y:e.endPoint.y-i};this.drawDoorOnContext(t,o,n,e),t.restore(),console.log("扉描画完了")}else if("stairs"===e.tool&&e.startPoint&&e.endPoint){console.log("階段描画"),t.save();const o={x:e.startPoint.x-s,y:e.startPoint.y-i},n={x:e.endPoint.x-s,y:e.endPoint.y-i};this.drawStairsOnContext(t,o,n,e),t.restore()}else if("textbox"===e.tool&&e.x&&e.y){console.log("テキストボックス描画:",e),t.save();const o=e.x-s,n=e.y-i;this.drawTextBoxOnContext(t,o,n,e),t.restore()}else if("line"===e.type&&e.startPoint&&e.endPoint)t.beginPath(),t.moveTo(e.startPoint.x-s,e.startPoint.y-i),t.lineTo(e.endPoint.x-s,e.endPoint.y-i),t.stroke();else if("rectangle"===e.type&&e.startPoint&&e.endPoint)t.beginPath(),t.rect(e.startPoint.x-s,e.startPoint.y-i,e.endPoint.x-e.startPoint.x,e.endPoint.y-e.startPoint.y),t.stroke();else if("circle"===e.type&&e.startPoint&&e.endPoint){const o=(e.startPoint.x+e.endPoint.x)/2-s,n=(e.startPoint.y+e.endPoint.y)/2-i,a=Math.sqrt(Math.pow(e.endPoint.x-e.startPoint.x,2)+Math.pow(e.endPoint.y-e.startPoint.y,2))/2;t.beginPath(),t.arc(o,n,a,0,2*Math.PI),t.stroke()}else if("freehand"===e.type&&e.points){if(t.beginPath(),e.points.length>0){t.moveTo(e.points[0].x-s,e.points[0].y-i);for(let o=1;o<e.points.length;o++)t.lineTo(e.points[o].x-s,e.points[o].y-i)}t.stroke()}t.restore()}drawDoorOnContext(t,e,s,i){console.log("🚪 扉描画メソッド呼び出し:",{start:e,end:s,doorType:i.doorType,pathDataKeys:Object.keys(i),strokeWidth:i.strokeWidth,strokeColor:i.strokeColor}),t.lineWidth=i.strokeWidth||2,t.strokeStyle=i.strokeColor||"#000000";const o=i.doorType||"opening";console.log("🚪 扉タイプ確定:",o);const n=s.x-e.x,a=s.y-e.y;console.log("🚪 方向ベクトル:",{dx:n,dy:a});const r=80;let h,l,c;Math.abs(n)>Math.abs(a)?n>0?(c="horizontal-right",h={x:e.x,y:e.y},l={x:e.x+r,y:e.y}):(c="horizontal-left",h={x:e.x,y:e.y},l={x:e.x-r,y:e.y}):a>0?(c="vertical-down",h={x:e.x,y:e.y},l={x:e.x,y:e.y+r}):(c="vertical-up",h={x:e.x,y:e.y},l={x:e.x,y:e.y-r}),console.log("決定された方向:",c),console.log("扉の座標:",{doorStart:h,doorEnd:l});const d=c.startsWith("horizontal")?0:1,x=c.startsWith("vertical")?0:1;switch(console.log("描画処理開始:",o),o){case"single":case"single-right":this.drawSingleDoorOnContext(t,h,l,d,x,r,"right");break;case"double":this.drawDoubleDoorOnContext(t,h,l,d,x,r);break;case"opening":this.drawOpeningOnContext(t,h,l,d,x,r);break;case"single-left":this.drawSingleDoorOnContext(t,h,l,d,x,r,"left");break;default:console.log("未知の扉タイプ:",o),this.drawOpeningOnContext(t,h,l,d,x,r)}console.log("扉描画メソッド完了")}drawOpeningOnContext(t,e,s,i,o,n){console.log("🔓 開口部描画開始:",{start:e,end:s,perpDx:i,perpDy:o,width:n});const a={x:Math.floor(e.x),y:Math.floor(e.y)},r={x:Math.floor(s.x),y:Math.floor(s.y)};t.save(),t.lineWidth=6,t.strokeStyle="#ffffff",t.beginPath(),t.moveTo(a.x,a.y),t.lineTo(r.x,r.y),t.stroke(),t.lineWidth=1,t.strokeStyle="#000000",t.setLineDash([5,5]),t.beginPath(),t.moveTo(a.x,a.y),t.lineTo(r.x,r.y),t.stroke(),t.setLineDash([]),t.restore(),console.log("🔓 開口部描画完了")}drawSingleDoorOnContext(t,e,s,i,o,n,a){console.log("🚪➡️ 片開き扉描画開始:",{start:e,end:s,perpDx:i,perpDy:o,width:n,direction:a});const r={x:Math.floor(e.x),y:Math.floor(e.y)},h={x:Math.floor(s.x),y:Math.floor(s.y)};t.save(),t.lineWidth=6,t.strokeStyle="#ffffff",t.beginPath(),t.moveTo(r.x,r.y),t.lineTo(h.x,h.y),t.stroke(),t.lineWidth=6,t.strokeStyle="#ffffff",t.beginPath(),t.moveTo(r.x,r.y),t.lineTo(h.x,h.y),t.stroke(),t.restore();const l="left"===a?h:r,c=n,d=Math.atan2(h.y-r.y,h.x-r.x);let x;x="left"===a?d+Math.PI/2:d-Math.PI/2,t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath(),t.arc(l.x,l.y,c,Math.min(d,x),Math.max(d,x)),t.stroke(),t.restore();const g=Math.floor(l.x+Math.cos(x)*c),u=Math.floor(l.y+Math.sin(x)*c);t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath(),t.moveTo(l.x,l.y),t.lineTo(g,u),t.stroke(),t.restore(),console.log("🚪➡️ 片開き扉描画完了")}drawDoubleDoorOnContext(t,e,s,i,o,n){console.log("🚪↔️ 両開き扉描画開始:",{start:e,end:s,perpDx:i,perpDy:o,width:n});const a={x:Math.floor(e.x),y:Math.floor(e.y)},r={x:Math.floor(s.x),y:Math.floor(s.y)};t.save(),t.lineWidth=6,t.strokeStyle="#ffffff",t.beginPath(),t.moveTo(a.x,a.y),t.lineTo(r.x,r.y),t.stroke(),t.restore();const h=Math.floor((a.x+r.x)/2),l=Math.floor((a.y+r.y)/2),c=n/2;t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath();t.moveTo(h+4*i,l+4*o),t.lineTo(h-4*i,l-4*o),t.stroke(),t.restore();const d=Math.atan2(r.y-a.y,r.x-a.x),x=c;t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath();const g=d-Math.PI/2;t.arc(a.x,a.y,x,Math.min(d,g),Math.max(d,g)),t.stroke(),t.restore(),t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath();const u=Math.floor(a.x+Math.cos(g)*x),p=Math.floor(a.y+Math.sin(g)*x);t.moveTo(a.x,a.y),t.lineTo(u,p),t.stroke(),t.restore(),t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath();const y=d+Math.PI,f=y+Math.PI/2;t.arc(r.x,r.y,x,Math.min(y,f),Math.max(y,f)),t.stroke(),t.restore(),t.save(),t.lineWidth=1,t.strokeStyle="#000000",t.beginPath();const m=Math.floor(r.x+Math.cos(f)*x),v=Math.floor(r.y+Math.sin(f)*x);t.moveTo(r.x,r.y),t.lineTo(m,v),t.stroke(),t.restore(),console.log("🚪↔️ 両開き扉描画完了")}drawStairsOnContext(t,e,s,i){t.lineWidth=i.strokeWidth||2,t.strokeStyle=i.strokeColor||"#000000";const o=i.stairSteps||10,n=i.stairWidth||this.gridSize,a=s.x-e.x,r=s.y-e.y,h=Math.sqrt(a*a+r*r);if(0===h)return;const l=a/h,c=r/h,d=-c,x=l,g=n/2;t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(s.x,s.y),t.stroke();const u=Math.PI/6;t.beginPath(),t.moveTo(s.x,s.y),t.lineTo(s.x-15*Math.cos(Math.atan2(r,a)-u),s.y-15*Math.sin(Math.atan2(r,a)-u)),t.moveTo(s.x,s.y),t.lineTo(s.x-15*Math.cos(Math.atan2(r,a)+u),s.y-15*Math.sin(Math.atan2(r,a)+u)),t.stroke();const p=h/(o+1);for(let y=1;y<=o;y++){const s=y*p,i=e.x+l*s,o=e.y+c*s;t.beginPath(),t.moveTo(i+d*g,o+x*g),t.lineTo(i-d*g,o-x*g),t.stroke()}}drawTextBoxOnContext(t,e,s,i){console.log("PDF用テキストボックス描画:",{x:e,y:s,pathData:i});let o=i.width||100,n=i.height||40;const a=i.text||"",r=i.fontSize||14,h=i.fontFamily||"Arial, sans-serif",l=i.isVertical||!1,c=Math.max(4,.2*r),d=1.3*r;if(t.font=`${r}px ${h}`,a&&a.trim())if(l){const t=a.split("\n");let e=0,s=t.length;for(let o of t)e=Math.max(e,o.length);const i=e*r+2*c,h=s*r*1.2+2*c;n<i&&(n=i),o<h&&(o=h)}else{const e=a.split("\n");let s=[],i=0;for(let n of e){if(""===n){s.push("");continue}const e=n.split("");let a="";for(let n of e){const e=a+n;t.measureText(e).width>o-2*c&&""!==a?(s.push(a),i=Math.max(i,t.measureText(a).width),a=n):a=e}a&&(s.push(a),i=Math.max(i,t.measureText(a).width))}const r=s.length*d+2*c;n<r&&(n=r),o<i+2*c&&(o=i+2*c)}if(t.strokeStyle=i.strokeColor||"#CCCCCC",t.lineWidth=1,t.strokeRect(e,s,o,n),console.log("PDF用テキストボックス最終サイズ:",{x:e,y:s,width:o,height:n,"元サイズ":{width:i.width,height:i.height}}),a)if(t.fillStyle=i.textColor||i.strokeColor||"#000000",t.font=`${r}px ${h}`,l)this.drawVerticalTextPDF(t,a,e,s,o,n,r,c);else{t.textAlign="left",t.textBaseline="middle";const i=a.split("\n");let h=[];for(let e of i){if(""===e){h.push("");continue}const s=e.split("");let i="";for(let e of s){const s=i+e;t.measureText(s).width>o-2*c&&""!==i?(h.push(i),i=e):i=s}i&&h.push(i)}console.log("PDF横書きテキスト処理:",{"元テキスト":a,"入力行数":i.length,"処理後行数":h.length,"行内容":h});const l=h.length*d,x=s+(n-l)/2+r/2;h.forEach((i,o)=>{const a=e+c,h=x+o*d;console.log(`PDF横書き行${o}: "${i}" at (${a}, ${h})`),h-r/2>=s&&h+r/2<=s+n?t.fillText(i,a,h):console.log(`行${o}はボックス外のため描画スキップ`)})}}drawVerticalTextPDF(t,e,s,i,o,n,a,r=5){t.textAlign="center",t.textBaseline="middle",console.log("PDF縦書きテキスト描画開始（完全中央配置）:",{text:e,position:{x:s,y:i,width:o,height:n},fontSize:a,padding:r});const h=e.split("\n"),l=h.length,c=1.2*a,d=l*c,x=Math.max(...h.map(t=>t.length)),g=x*a,u=s+o/2,p=i+n/2,y=u-(d-c)/2,f=p-g/2;console.log("PDF縦書き完全中央配置計算:",{totalColumns:l,maxLineLength:x,totalTextWidth:d,totalTextHeight:g,centerX:u,centerY:p,startX:y,startY:f}),h.forEach((e,r)=>{const h=e.split(""),l=y+r*c;console.log(`PDF縦書き列${r}: "${e}" at columnX=${l}`),h.forEach((e,r)=>{const h=f+r*a+a/2;h-a/2>=i&&h+a/2<=i+n&&l-a/2>=s&&l+a/2<=s+o?(t.fillText(e,l,h),console.log(`PDF縦書き文字: "${e}" at (${l}, ${h})`)):console.log(`PDF縦書き文字 "${e}" はボックス外のため描画スキップ`)})}),console.log("PDF縦書きテキスト描画完了")}drawOpeningOnPDF(t,e,s,i){console.log("PDF用開口部描画:",{opening:e,offsetX:s,offsetY:i});const o=e.x-s,n=e.y-i;t.save(),t.fillStyle="rgba(240, 240, 240, 0.9)",t.fillRect(o,n,e.width,e.height),t.lineWidth=1,t.strokeStyle="#000000",t.strokeRect(o,n,e.width,e.height),t.restore(),console.log("PDF用開口部描画完了")}drawArrowHeadOnContext(t,e,s,i,o,n=10){const a=i-e,r=o-s,h=Math.atan2(r,a),l=Math.max(n,3*t.lineWidth),c=Math.PI/6,d=i-l*Math.cos(h-c),x=o-l*Math.sin(h-c),g=i-l*Math.cos(h+c),u=o-l*Math.sin(h+c);t.save(),t.setLineDash([]),t.beginPath(),t.moveTo(i,o),t.lineTo(d,x),t.moveTo(i,o),t.lineTo(g,u),t.stroke(),t.restore()}}class c{constructor(){this.currentTool="pen",this.tools={pen:{name:"ペン",cursor:"crosshair",mode:"freehand"},eraser:{name:"消しゴム",cursor:"crosshair",mode:"eraser"},line:{name:"直線",cursor:"crosshair",mode:"shape"},rectangle:{name:"四角形",cursor:"crosshair",mode:"shape"},door:{name:"扉",cursor:"crosshair",mode:"shape"},stairs:{name:"階段",cursor:"crosshair",mode:"shape"},circle:{name:"円",cursor:"crosshair",mode:"shape"},"text-horizontal":{name:"横書きテキスト",cursor:"text",mode:"text"},"text-vertical":{name:"縦書きテキスト",cursor:"text",mode:"text"}}}setTool(t){return!!this.tools[t]&&(this.currentTool=t,this.updateCursor(),!0)}getCurrentTool(){return this.currentTool}getToolInfo(t=null){const e=t||this.currentTool;return this.tools[e]}updateCursor(){const t=document.getElementById("drawing-canvas"),e=this.getToolInfo();t&&e&&(t.style.cursor=e.cursor)}isShapeTool(){const t=this.getToolInfo();return t&&"shape"===t.mode}isFreehandTool(){const t=this.getToolInfo();return t&&"freehand"===t.mode}}class d{constructor(){this.tolerance={line:25,circle:20,rectangle:25}}recognize(t){if(!t||t.length<3)return null;const e=this.recognizeLine(t);if(e&&e.confidence>.5)return e;const s=[this.recognizeCircle(t),this.recognizeRectangle(t)].filter(t=>null!==t).sort((t,e)=>e.confidence-t.confidence);return s.length>0&&s[0].confidence>.7?s[0]:null}recognizeLine(t){if(t.length<2)return null;let e=t[0],s=t[t.length-1];if(Math.sqrt(Math.pow(s.x-e.x,2)+Math.pow(s.y-e.y,2))<20)return null;const i=Math.abs(s.x-e.x),o=Math.abs(s.y-e.y),n=180*Math.atan2(o,i)/Math.PI;n<15||n>165?s={x:s.x,y:e.y}:n>75&&n<105&&(s={x:e.x,y:s.y});let a=0,r=0;for(let l=1;l<t.length-1;l++){const i=this.pointToLineDistance(t[l],e,s);a+=i,r=Math.max(r,i)}const h=a/(t.length-2);if(r<this.tolerance.line&&h<this.tolerance.line/1.5){return{type:"line",tool:"line",startPoint:e,endPoint:s,path:[e,s],strokeWidth:2,strokeColor:"#000000",confidence:Math.max(.5,1-h/this.tolerance.line)}}return null}recognizeCircle(t){if(t.length<10)return null;const e=this.getBounds(t),s=(e.minX+e.maxX)/2,i=(e.minY+e.maxY)/2,o=t.map(t=>Math.sqrt(Math.pow(t.x-s,2)+Math.pow(t.y-i,2))),n=o.reduce((t,e)=>t+e,0)/o.length,a=o.reduce((t,e)=>t+Math.pow(e-n,2),0)/o.length,r=Math.sqrt(a);if(r<this.tolerance.circle){if(Math.sqrt(Math.pow(t[0].x-t[t.length-1].x,2)+Math.pow(t[0].y-t[t.length-1].y,2))<.3*n)return{type:"circle",tool:"circle",startPoint:{x:s,y:i},endPoint:{x:s+n,y:i},path:t,strokeWidth:2,strokeColor:"#000000",confidence:1-r/this.tolerance.circle}}return null}recognizeRectangle(t){if(t.length<8)return null;const e=this.detectCorners(t);if(4===e.length){const s=this.getBounds(e);if(this.checkRectangularity(e))return{type:"rectangle",tool:"rectangle",startPoint:{x:s.minX,y:s.minY},endPoint:{x:s.maxX,y:s.maxY},path:t,strokeWidth:2,strokeColor:"#000000",confidence:.8}}return null}pointToLineDistance(t,e,s){const i=t.x-e.x,o=t.y-e.y,n=s.x-e.x,a=s.y-e.y,r=i*n+o*a,h=n*n+a*a;if(0===h)return Math.sqrt(i*i+o*o);let l=r/h;l=Math.max(0,Math.min(1,l));const c=e.x+l*n,d=e.y+l*a;return Math.sqrt(Math.pow(t.x-c,2)+Math.pow(t.y-d,2))}getBounds(t){let e=1/0,s=1/0,i=-1/0,o=-1/0;return t.forEach(t=>{e=Math.min(e,t.x),s=Math.min(s,t.y),i=Math.max(i,t.x),o=Math.max(o,t.y)}),{minX:e,minY:s,maxX:i,maxY:o}}detectCorners(t){const e=[],s=Math.PI/4;for(let i=1;i<t.length-1;i++){const o=t[i-1],n=t[i],a=t[i+1],r=Math.atan2(n.y-o.y,n.x-o.x),h=Math.atan2(a.y-n.y,a.x-n.x);let l=Math.abs(h-r);l>Math.PI&&(l=2*Math.PI-l),l>s&&e.push(n)}return e}checkRectangularity(t){if(4!==t.length)return!1;const e=[];for(let n=0;n<4;n++){const s=(n+1)%4;e.push({x:t[s].x-t[n].x,y:t[s].y-t[n].y})}const s=this.areVectorsParallel(e[0],e[2]),i=this.areVectorsParallel(e[1],e[3]),o=this.areVectorsPerpendicular(e[0],e[1]);return s&&i&&o}areVectorsParallel(t,e,s=.2){return Math.abs(t.x*e.y-t.y*e.x)<s*Math.sqrt(t.x*t.x+t.y*t.y)*Math.sqrt(e.x*e.x+e.y*e.y)}areVectorsPerpendicular(t,e,s=.2){return Math.abs(t.x*e.x+t.y*e.y)<s*Math.sqrt(t.x*t.x+t.y*t.y)*Math.sqrt(e.x*e.x+e.y*e.y)}}class x{constructor(){this.canvas=null,this.toolManager=null,this.shapeRecognizer=null,this.init()}init(){this.canvas=new l("#drawing-canvas"),this.toolManager=new c,this.shapeRecognizer=new d,this.toolManager.setTool("pen"),this.canvas.setTool("pen"),document.addEventListener("DOMContentLoaded",()=>{this.updateToolUI("pen")}),this.setupEventListeners(),this.resizeCanvas(),window.addEventListener("resize",()=>this.resizeCanvas())}setupEventListeners(){document.addEventListener("DOMContentLoaded",()=>{this.initializeToolButtons()}),"complete"!==document.readyState&&"interactive"!==document.readyState||this.initializeToolButtons()}initializeToolButtons(){console.log("=== initializeToolButtons 開始 ==="),console.log("DOM readyState:",document.readyState);const t=document.getElementById("pen-tool");t?t.addEventListener("click",()=>{this.handleToolSwitch(),this.toolManager.setTool("pen"),this.canvas.setTool("pen"),this.updateToolButtons("pen-tool"),this.updateToolUI("pen")}):console.error("pen-tool button not found");const e=document.getElementById("eraser-tool");e?e.addEventListener("click",()=>{this.handleToolSwitch(),this.toolManager.setTool("eraser"),this.canvas.setTool("eraser"),this.updateToolButtons("eraser-tool"),this.updateToolUI("eraser")}):console.error("eraser-tool button not found");const s=document.getElementById("line-tool");s?s.addEventListener("click",()=>{this.handleToolSwitch(),this.toolManager.setTool("line"),this.canvas.setTool("line"),this.updateToolButtons("line-tool"),this.updateToolUI("line")}):console.error("line-tool button not found");const i=document.getElementById("rect-tool");i?i.addEventListener("click",()=>{this.handleToolSwitch(),this.toolManager.setTool("rectangle"),this.canvas.setTool("rectangle"),this.updateToolButtons("rect-tool"),this.updateToolUI("rectangle")}):console.error("rect-tool button not found");const o=document.getElementById("door-tool");o?o.addEventListener("click",()=>{this.handleToolSwitch(),this.toolManager.setTool("door"),this.canvas.setTool("door"),this.updateToolButtons("door-tool"),this.updateToolUI("door")}):console.error("door-tool button not found");const n=document.getElementById("stairs-tool");n?n.addEventListener("click",()=>{this.handleToolSwitch(),this.toolManager.setTool("stairs"),this.canvas.setTool("stairs"),this.updateToolButtons("stairs-tool"),this.updateToolUI("stairs"),this.canvas.setStairSize("medium"),console.log("階段ツール選択: デフォルトサイズ（中）を設定")}):console.error("stairs-tool button not found");const r=document.getElementById("text-h-tool");r?(r.addEventListener("mousedown",t=>{this.canvas.textInput&&this.canvas.textInput.parentNode&&t.preventDefault()}),r.addEventListener("click",()=>{console.log("横書きテキストツールがクリックされました"),console.log("現在のテキスト入力状態:",{textInput:this.canvas.textInput,parentNode:this.canvas.textInput?this.canvas.textInput.parentNode:null,allPathsCount:this.canvas.allPaths.length});const t=this.canvas.allPaths.filter(t=>"textbox"===t.tool&&t.isSelected);console.log("編集中のテキストボックス:",t),this.toolManager.setTool("text-horizontal"),this.canvas.setTool("text-horizontal"),this.updateToolButtons("text-h-tool"),this.updateToolUI("text-horizontal");if(this.canvas.textInput&&this.canvas.textInput.parentNode){const t=this.canvas.allPaths.find(t=>"textbox"===t.tool&&t.isSelected);if(!t||!t.isVertical)return t&&!t.isVertical?void console.log("横書きテキスト編集中のため、編集を継続します"):void console.log("実際にテキスト編集中のため、新しいテキストボックスの作成をスキップします（編集は継続）");console.log("縦書きから横書きに切り替えるため、現在の編集を破棄します"),this.canvas.removeCurrentTextBox()}this.canvas.clearTextBoxSelection();document.getElementById("drawing-canvas").getBoundingClientRect();const e=document.getElementById("drawing-canvas").getBoundingClientRect(),s=(e.width/2-this.canvas.translateX)/this.canvas.scale,i=(e.height/2-this.canvas.translateY)/this.canvas.scale,o=this.canvas.fontSize,n=12*o,a=2*o;this.canvas.createTextBoxAuto(s,i,n,a,!1)})):console.error("text-h-tool button not found");const h=document.getElementById("text-v-tool");h?(h.addEventListener("mousedown",t=>{this.canvas.textInput&&this.canvas.textInput.parentNode&&t.preventDefault()}),h.addEventListener("click",()=>{console.log("縦書きテキストツールがクリックされました"),this.toolManager.setTool("text-vertical"),this.canvas.setTool("text-vertical"),this.updateToolButtons("text-v-tool"),this.updateToolUI("text-vertical");if(this.canvas.textInput&&this.canvas.textInput.parentNode){const t=this.canvas.allPaths.find(t=>"textbox"===t.tool&&t.isSelected);if(!t||t.isVertical)return t&&t.isVertical?void console.log("縦書きテキスト編集中のため、編集を継続します"):void console.log("実際にテキスト編集中のため、新しいテキストボックスの作成をスキップします（編集は継続）");console.log("横書きから縦書きに切り替えるため、現在の編集を破棄します"),this.canvas.removeCurrentTextBox()}this.canvas.clearTextBoxSelection();const t=document.getElementById("drawing-canvas").getBoundingClientRect(),e=(t.width/2-this.canvas.translateX)/this.canvas.scale,s=(t.height/2-this.canvas.translateY)/this.canvas.scale,i=this.canvas.fontSize,o=2*i,n=6*i;this.canvas.createTextBoxAuto(e,s,o,n,!0)})):console.error("text-v-tool button not found");const l=document.getElementById("clear-btn");l?l.addEventListener("click",()=>{this.canvas&&"function"==typeof this.canvas.clear&&this.canvas.clear()}):console.error("clear-btn button not found");const c=document.getElementById("undo-btn");c?c.addEventListener("click",()=>{this.canvas&&"function"==typeof this.canvas.undo&&this.canvas.undo()}):console.error("undo-btn button not found");const d=document.getElementById("redo-btn");d?d.addEventListener("click",()=>{this.canvas&&"function"==typeof this.canvas.redo&&this.canvas.redo()}):console.error("redo-btn button not found");const x=document.getElementById("export-btn"),g=document.getElementById("export-menu"),u=document.getElementById("export-pdf-option"),p=document.getElementById("export-image-option");x&&g&&u&&p?(x.addEventListener("click",t=>{t.stopPropagation();const e="none"!==g.style.display;g.style.display=e?"none":"block",x.classList.toggle("active",!e)}),u.addEventListener("click",()=>a(this,null,function*(){console.log("PDF出力オプションが選択されました"),g.style.display="none",x.classList.remove("active"),this.handleToolSwitch();(yield this.canvas.exportToPDF())&&(this.showExportFeedback(x,"PDF出力完了！"),x.style.transform="scale(0.95)",setTimeout(()=>{x.style.transform=""},150))})),p.addEventListener("click",()=>a(this,null,function*(){console.log("画像エクスポートオプションが選択されました"),g.style.display="none",x.classList.remove("active"),this.handleToolSwitch();(yield this.canvas.exportToImage("png",.95))?this.showExportFeedback(x,"画像エクスポート完了！"):this.showExportFeedback(x,"エクスポートに失敗しました","error")})),document.addEventListener("click",()=>{g.style.display="none",x.classList.remove("active")}),g.addEventListener("click",t=>{t.stopPropagation()})):console.error("Export button or menu elements not found"),this.initOfflineSupport();const y=document.getElementById("pen-width"),f=document.getElementById("pen-preview");document.getElementById("pen-width-control"),y&&f&&(this.updatePenPreview(y.value),y.addEventListener("input",t=>{const e=parseInt(t.target.value);this.canvas.setPenWidth(e),this.updatePenPreview(e)}));const m=document.getElementById("eraser-size"),v=document.getElementById("eraser-preview");document.getElementById("eraser-size-control"),m&&v&&(this.updateEraserPreview(m.value),m.addEventListener("input",t=>{const e=parseInt(t.target.value);this.canvas.setEraserSize(e),this.updateEraserPreview(e)}));const w=document.getElementById("door-type");w&&w.addEventListener("change",t=>{this.canvas.setDoorType(t.target.value),console.log("扉の種類を変更:",t.target.value)});const P=["small","medium","large"];P.forEach(t=>{const e=document.getElementById(`stair-size-${t}`);e&&e.addEventListener("click",()=>{P.forEach(t=>{const e=document.getElementById(`stair-size-${t}`);e&&e.classList.remove("active")}),e.classList.add("active"),this.canvas.setStairSize(t),this.updateStairsPreview(t),console.log("階段サイズを変更:",t)})});document.getElementById("stairs-preview")&&(this.canvas.setStairSize("medium"),this.updateStairsPreview("medium"),console.log("初期化: 階段を中サイズに設定"));const T=document.getElementById("line-style-toggle");T?T.addEventListener("click",()=>{let t,e="solid";switch(T.classList.contains("dashed")?e="dashed":T.classList.contains("arrow")&&(e="arrow"),e){case"solid":t="dashed";break;case"dashed":t="arrow";break;default:t="solid"}switch(console.log("線スタイル切り替え:",{beforeClick:e,afterClick:t}),this.canvas.setLineStyle(t),T.classList.remove("solid","dashed","arrow"),t){case"dashed":T.classList.add("dashed"),T.textContent="┅",T.title="点線モード（クリックで矢印に変更）";break;case"arrow":T.classList.add("arrow"),T.textContent="→",T.title="矢印モード（クリックで実線に変更）";break;default:T.classList.add("solid"),T.textContent="─",T.title="実線モード（クリックで点線に変更）"}console.log("変更後:",{afterClick:T.classList.toString(),canvasLineStyle:this.canvas.lineStyle})}):console.error("line-style-toggle button not found");const S=document.getElementById("stroke-color");console.log("stroke-color要素の検索結果:",S),S?(console.log("stroke-color要素が見つかりました。イベントリスナーを設定中..."),S.addEventListener("input",t=>{console.log("❗ カラーピッカー inputイベント発生",t.target.value),this.canvas.setStrokeColor(t.target.value),f&&(f.style.background=t.target.value)}),S.addEventListener("change",t=>{console.log("❗ カラーピッカー changeイベント発生",t.target.value),console.log("現在のテキスト入力状態:",{textInput:this.canvas.textInput,parentNode:this.canvas.textInput?this.canvas.textInput.parentNode:null,existsInDOM:!!this.canvas.textInput&&document.contains(this.canvas.textInput)});const e=this.canvas.allPaths.filter(t=>"textbox"===t.tool&&t.isSelected);if(e.some(t=>t.text&&""!==t.text.trim()))return console.log("テキストが入力済みのため、色を変更して編集を継続します"),e.forEach(e=>{e.text&&""!==e.text.trim()&&(e.strokeColor=t.target.value,console.log("テキストボックスの色を変更:",t.target.value))}),this.canvas.setStrokeColor(t.target.value),f&&(f.style.background=t.target.value),void this.canvas.redrawCanvas();const s=this.canvas.textInput&&this.canvas.textInput.parentNode,i=document.querySelector(".text-input-overlay");(s||i)&&(console.log("色変更: 空のテキスト入力を終了します"),this.canvas.finishTextInput(),this.canvas.removeTextInput()),this.canvas.clearTextBoxSelection(),this.handleToolSwitch(),this.canvas.setStrokeColor(t.target.value),f&&(f.style.background=t.target.value),this.canvas.redrawCanvas()}),S.addEventListener("click",t=>{console.log("❗ カラーピッカー clickイベント発生"),console.log("クリック時のテキスト入力状態:",{textInput:this.canvas.textInput,parentNode:this.canvas.textInput?this.canvas.textInput.parentNode:null,existsInDOM:!!this.canvas.textInput&&document.contains(this.canvas.textInput)});const e=this.canvas.allPaths.filter(t=>"textbox"===t.tool&&t.isSelected);console.log("選択状態のテキストボックス:",e);const s=document.querySelector(".text-input-overlay");console.log("DOM内のテキスト入力エリア:",s);const i=e.some(t=>t.text&&""!==t.text.trim()),o=this.canvas.textInput&&this.canvas.textInput.parentNode,n=document.querySelector(".text-input-overlay"),a=e.length>0;i?console.log("テキストが入力済みのため、色変更を許可します"):(o||n||a)&&(console.log("カラーピッカークリック: 空のテキストボックス関連を終了します"),o&&(this.canvas.finishTextInput(),this.canvas.removeTextInput()),n&&n.remove(),a&&e.forEach(t=>{t.text&&""!==t.text.trim()||this.canvas.removeCurrentTextBox()}),this.handleToolSwitch(),this.canvas.redrawCanvas())}),console.log("stroke-color要素のイベントリスナー設定完了")):console.error("stroke-color input not found");const k=document.getElementById("font-size");console.log("font-size要素の検索結果:",k),k?(console.log("font-size要素が見つかりました。イベントリスナーを設定中..."),k.addEventListener("input",t=>{console.log("❗ フォントサイズ inputイベント発生",t.target.value)}),k.addEventListener("change",t=>{console.log("❗ フォントサイズ changeイベント発生",t.target.value),console.log("現在のテキスト入力状態:",{textInput:this.canvas.textInput,parentNode:this.canvas.textInput?this.canvas.textInput.parentNode:null,existsInDOM:!!this.canvas.textInput&&document.contains(this.canvas.textInput)});const e=this.canvas.allPaths.filter(t=>"textbox"===t.tool&&t.isSelected);if(e.some(t=>t.text&&""!==t.text.trim()))return console.log("テキストが入力済みのため、文字サイズを変更して編集を継続します"),e.forEach(e=>{if(e.text&&""!==e.text.trim()&&(e.fontSize=parseInt(t.target.value),console.log("テキストボックスの文字サイズを変更:",t.target.value),!e.isVertical)){const t=this.canvas.ctx.font;this.canvas.ctx.font=`${e.fontSize}px ${e.fontFamily||"Arial"}`;const s=e.text.split("\n");let i=0;for(let e of s)if(""!==e.trim()){const t=this.canvas.ctx.measureText(e).width;i=Math.max(i,t)}const o=i+2*Math.max(4,.2*e.fontSize);o>e.width&&(e.width=o,console.log("テキストボックスの幅を自動調整:",{oldWidth:e.width,newWidth:o,maxLineWidth:i,fontSize:e.fontSize})),this.canvas.ctx.font=t}}),this.canvas.setFontSize(parseInt(t.target.value)),void this.canvas.redrawCanvas();const s=this.canvas.textInput&&this.canvas.textInput.parentNode,i=document.querySelector(".text-input-overlay");(s||i)&&(console.log("文字サイズ変更: 空のテキスト入力を終了します"),this.canvas.finishTextInput(),this.canvas.removeTextInput()),this.canvas.clearTextBoxSelection(),this.handleToolSwitch(),this.canvas.setFontSize(parseInt(t.target.value)),this.canvas.redrawCanvas()}),k.addEventListener("click",t=>{console.log("❗ フォントサイズ clickイベント発生"),console.log("クリック時のテキスト入力状態:",{textInput:this.canvas.textInput,parentNode:this.canvas.textInput?this.canvas.textInput.parentNode:null,existsInDOM:!!this.canvas.textInput&&document.contains(this.canvas.textInput)});const e=this.canvas.allPaths.filter(t=>"textbox"===t.tool&&t.isSelected);console.log("選択状態のテキストボックス:",e);const s=document.querySelector(".text-input-overlay");console.log("DOM内のテキスト入力エリア:",s);const i=e.some(t=>t.text&&""!==t.text.trim()),o=this.canvas.textInput&&this.canvas.textInput.parentNode,n=document.querySelector(".text-input-overlay"),a=e.length>0;i?console.log("テキストが入力済みのため、文字サイズ変更を許可します"):(o||n||a)&&(console.log("フォントサイズクリック: 空のテキストボックス関連を終了します"),o&&(this.canvas.finishTextInput(),this.canvas.removeTextInput()),n&&n.remove(),a&&e.forEach(t=>{t.text&&""!==t.text.trim()||this.canvas.removeCurrentTextBox()}),this.handleToolSwitch(),this.canvas.redrawCanvas())}),k.addEventListener("focus",t=>{console.log("❗ フォントサイズ focusイベント発生")}),console.log("font-size要素のイベントリスナー設定完了"),this.canvas.on("textBoxSelected",t=>{k.value=t.fontSize;const e=document.getElementById("stroke-color");e&&t.strokeColor!==e.value&&(console.log("テキストボックス選択でカラーピッカーを同期:",{before:e.value,after:t.strokeColor}),e.value=t.strokeColor,this.canvas.setStrokeColor(t.strokeColor))}),this.canvas.on("textBoxDeselected",()=>{k.value=this.canvas.fontSize;const t=document.getElementById("stroke-color");t&&this.canvas.strokeColor!==t.value&&(console.log("テキストボックス選択解除でカラーピッカーを同期:",{before:t.value,after:this.canvas.strokeColor}),t.value=this.canvas.strokeColor)})):console.error("font-size input not found"),this.canvas.on("drawingComplete",t=>{}),console.log("=== initializeToolButtons 完了 ===")}handleToolSwitch(){const t=this.canvas.textInput&&this.canvas.textInput.parentNode,e=this.canvas.allPaths.some(t=>"textbox"===t.tool&&t.isSelected&&(!t.text||""===t.text.trim())),s=this.canvas.allPaths.some(t=>"textbox"===t.tool&&t.isSelected&&t.text&&""!==t.text.trim());console.log("=== handleToolSwitch 呼び出し ==="),console.log("テキスト入力状態:",{textInput:this.canvas.textInput,parentNode:this.canvas.textInput?this.canvas.textInput.parentNode:null,isActuallyEditing:t,hasEditingEmptyTextBox:e,hasSelectedTextBoxWithText:s,allPathsCount:this.canvas.allPaths.length}),t||e?(console.log("テキスト編集中または空の選択状態テキストボックスがあるため削除します"),this.canvas.removeCurrentTextBox()):s?(console.log("テキストが入力済みのテキストボックスの選択を解除します"),this.canvas.clearTextBoxSelection(),this.canvas.redrawCanvas()):console.log("テキストボックスがないか、既に選択解除されているため、何もしません");const i=document.getElementById("stroke-color");i&&this.canvas.strokeColor!==i.value&&(console.log("カラーピッカーの値を同期:",{before:i.value,after:this.canvas.strokeColor}),i.value=this.canvas.strokeColor),this.canvas.showEraserPreview&&(this.canvas.showEraserPreview=!1,this.canvas.eraserPreviewCoords=null,this.canvas.redrawCanvas())}updateToolButtons(t){document.querySelectorAll(".tool-btn").forEach(t=>{t.id.includes("-tool")&&t.classList.remove("active")}),document.getElementById(t).classList.add("active")}resizeCanvas(){this.canvas.resize()}updatePenPreview(t){const e=document.getElementById("pen-preview");if(e){const s=Math.min(Math.max(2*t,4),16);e.style.width=s+"px",e.style.height=s+"px"}}updateEraserPreview(t){const e=document.getElementById("eraser-preview");if(e){const s=Math.min(Math.max(t/2+8,8),28);e.style.width=s+"px",e.style.height=s+"px"}}updateStairsPreview(t){const e=document.getElementById("stairs-preview");if(e){let s;switch(t){case"small":s={width:"10px",height:"8px",label:"0.5マス"};break;case"large":s={width:"24px",height:"8px",label:"1.5マス"};break;default:s={width:"16px",height:"8px",label:"1マス"}}e.style.width=s.width,e.style.height=s.height,e.style.background="#000",e.style.borderRadius="1px",e.title=`階段記号サイズ: ${s.label}`}}updateToolUI(t){const e=document.getElementById("pen-width-control"),s=document.getElementById("eraser-size-control"),i=document.getElementById("door-control"),o=document.getElementById("stairs-control"),n=document.getElementById("line-control");e&&(e.style.display="pen"===t?"flex":"none"),s&&(s.style.display="eraser"===t?"flex":"none"),i&&(i.style.display="door"===t?"flex":"none"),o&&(o.style.display="stairs"===t?"flex":"none"),n&&(n.style.display="line"===t?"flex":"none")}initOfflineSupport(){window.addEventListener("online",()=>{this.showNetworkStatus("オンラインに復帰しました","success"),console.log("Network: Online")}),window.addEventListener("offline",()=>{this.showNetworkStatus("オフラインモードです。アプリは引き続き利用できます","info"),console.log("Network: Offline")}),navigator.onLine||this.showNetworkStatus("オフラインモードです","info"),this.initPWAInstallPrompt()}showNetworkStatus(t,e="info"){const s=document.querySelector(".network-notification");s&&s.remove();const i=document.createElement("div");i.className=`network-notification ${e}`,i.textContent=t,i.style.cssText=`\n      position: fixed;\n      top: 70px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: ${"success"===e?"#4CAF50":"error"===e?"#f44336":"#2196F3"};\n      color: white;\n      padding: 12px 20px;\n      border-radius: 6px;\n      z-index: 10000;\n      font-size: 14px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n      transition: opacity 0.3s ease;\n    `,document.body.appendChild(i),setTimeout(()=>{i&&i.parentNode&&(i.style.opacity="0",setTimeout(()=>{i.parentNode&&i.parentNode.removeChild(i)},300))},3e3)}initPWAInstallPrompt(){let t;window.addEventListener("beforeinstallprompt",e=>{e.preventDefault(),t=e,this.isIPad()?this.showIPadInstallGuide():this.showInstallButton(t)}),window.addEventListener("appinstalled",()=>{console.log("PWA was installed"),this.showNetworkStatus("アプリがホーム画面に追加されました！","success"),t=null})}isIPad(){return/iPad|iPhone|iPod/.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1}showIPadInstallGuide(){if(window.navigator.standalone)return;if(localStorage.getItem("installGuideShown"))return;const t=document.createElement("div");t.style.cssText="\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0,0,0,0.7);\n      z-index: 20000;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n    ";const e=document.createElement("div");e.style.cssText="\n      background: white;\n      border-radius: 12px;\n      padding: 24px;\n      max-width: 400px;\n      margin: 20px;\n      text-align: center;\n    ",e.innerHTML='\n      <h3 style="margin: 0 0 16px 0; color: #333;">ホーム画面に追加</h3>\n      <p style="margin: 0 0 20px 0; color: #666; line-height: 1.5;">\n        この平面図アプリをiPadのホーム画面に追加して、<br>\n        ネイティブアプリのように使用できます。\n      </p>\n      <div style="margin: 20px 0; padding: 16px; background: #f8f9fa; border-radius: 8px;">\n        <p style="margin: 0; font-size: 14px; color: #555;">\n          1. Safari の <strong>共有ボタン</strong> 📤 をタップ<br>\n          2. <strong>「ホーム画面に追加」</strong> を選択<br>\n          3. <strong>「追加」</strong> をタップ\n        </p>\n      </div>\n      <button id="closeInstallGuide" style="\n        background: #007AFF;\n        color: white;\n        border: none;\n        border-radius: 8px;\n        padding: 12px 24px;\n        font-size: 16px;\n        cursor: pointer;\n      ">わかりました</button>\n    ',t.appendChild(e),document.body.appendChild(t),document.getElementById("closeInstallGuide").addEventListener("click",()=>{document.body.removeChild(t),localStorage.setItem("installGuideShown","true")}),t.addEventListener("click",e=>{e.target===t&&(document.body.removeChild(t),localStorage.setItem("installGuideShown","true"))})}toggleGrid(){const t=document.getElementById("drawing-canvas"),e=document.getElementById("grid-toggle");t.classList.contains("no-grid")?(t.classList.remove("no-grid"),e.classList.add("active"),this.canvas.setSnapToGrid(!0)):(t.classList.add("no-grid"),e.classList.remove("active"),this.canvas.setSnapToGrid(!1))}showExportFeedback(t,e,s="success"){const i=t.textContent,o=t.style.backgroundColor;t.textContent=e,t.style.backgroundColor="error"===s?"#ff6b6b":"#4CAF50",t.style.transform="scale(0.95)",setTimeout(()=>{t.textContent=i,t.style.backgroundColor=o,t.style.transform=""},2e3)}}document.addEventListener("DOMContentLoaded",()=>{new x});
